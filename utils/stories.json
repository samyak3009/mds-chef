{
  "avatar": [
    {
      "query": "Avatar All",
      "code": "import { Avatar } from '@innovaccer/design-system';\n    () => {\n  const appearance = 'primary';\n  const size = 'tiny';\n  const withTooltip = true;\n  const children = '';\n  const firstName = 'John';\n  const lastName = 'Doe';\n\n  const options = {\n    appearance,\n    withTooltip,\n    size,\n    firstName,\n    lastName,\n  };\n\n  return <Avatar {...options}>{children}</Avatar>;\n}\n    "
    },
    {
      "query": "Avatar",
      "code": "import { Avatar } from '@innovaccer/design-system';\n    () => <Avatar firstName=\"John\" lastName=\"Doe\" appearance=\"primary\" />\n    "
    },
    {
      "query": "Avatar",
      "code": "import { Text, Avatar } from '@innovaccer/design-system';\n    () => {\n  const weight = 'strong';\n\n  const appearances = [\n    'primary',\n    'secondary',\n    'alert',\n    'warning',\n    'success',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n  ];\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Text weight={weight}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n            <br />\n            <br />\n            <Avatar firstName=\"John\" lastName=\"Doe\" appearance={appear} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Avatar",
      "code": "import { Text, Avatar } from '@innovaccer/design-system';\n    () => {\n  const weight = 'strong';\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9 d-flex flex-column\">\n        <Text weight={weight}>Regular</Text> <br />\n        <Avatar firstName=\"John\" lastName=\"Doe\" />\n      </div>\n      <div className=\"mr-9  d-flex flex-column\">\n        <Text weight={weight}>Tiny</Text> <br />\n        <Avatar firstName=\"John\" lastName=\"Doe\" size=\"tiny\" />\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "avatargroup": [
    {
      "query": "AvatarGroup All",
      "code": "import { AvatarGroup } from '@innovaccer/design-system';\n    () => {\n  const list = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n    },\n    {\n      firstName: 'Steven',\n      lastName: 'Packton',\n    },\n    {\n      firstName: 'Nancy',\n      lastName: 'Wheeler'\n    },\n    {\n      firstName: 'Monica',\n      lastName: 'Geller'\n    },\n    {\n      firstName: 'Arya',\n      lastName: 'Stark',\n    },\n    {\n      firstName: 'Rachel',\n      lastName: 'Green',\n    },\n    {\n      firstName: 'Walter',\n      lastName: 'Wheeler'\n    },\n  ];\n  return <AvatarGroup list={list} popoverOptions={{ dark: true, on: 'hover', position: 'bottom'}}/>;\n}\n    "
    },
    {
      "query": "AvatarGroup   Border Color",
      "code": "import { AvatarGroup } from '@innovaccer/design-system';\n    () => {\n  const list = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n    },\n    {\n      firstName: 'Steven',\n      lastName: 'Packton',\n    },\n    {\n      firstName: 'Nancy',\n      lastName: 'Wheeler'\n    },\n    {\n      firstName: 'Monica',\n      lastName: 'Geller'\n    },\n  ];\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9\">\n        <AvatarGroup list={list.slice(0, 4)} borderColor='var(--secondary)' />\n      </div>\n      <div className=\"mr-9\">\n        <AvatarGroup list={list.slice(0, 4)} borderColor='var(--alert)' />\n      </div>\n      <div className=\"mr-9\">\n        <AvatarGroup list={list.slice(0, 4)} borderColor='var(--warning)' />\n      </div>\n      <div className=\"mr-9\">\n        <AvatarGroup list={list.slice(0, 4)} borderColor='var(--accent1)' />\n      </div>\n    </div>\n  )\n}\n    "
    },
    {
      "query": "AvatarGroup   Custom Popper",
      "code": "import { Avatar, Text, AvatarGroup } from '@innovaccer/design-system';\n    /*\n// style.css\n.UserAvatars-popover {\n    max-height: var(--spacing-7);\n}\n*/\n\n() => {\n  const list = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n    },\n    {\n      firstName: 'Steven',\n      lastName: 'Packton',\n    },\n    {\n      firstName: 'Nancy',\n      lastName: 'Wheeler'\n    },\n    {\n      firstName: 'Monica',\n      lastName: 'Geller'\n    },\n    {\n      firstName: 'Arya',\n      lastName: 'Stark',\n    },\n    {\n      firstName: 'Rachel',\n      lastName: 'Green',\n    },\n    {\n      firstName: 'Walter',\n      lastName: 'Wheeler'\n    },\n  ];\n\n  const popperRenderer = (list) => {\n    const AvatarList = list.map((avatar, index) => {\n      const { firstName, lastName, appearance } = avatar;\n\n      return (\n        <div className=\"d-flex align-items-center mr-4 mb-4\" key={index}>\n          <Avatar\n            firstName={firstName}\n            lastName={lastName}\n            appearance={appearance}\n            className=\"mr-4\"\n            withTooltip={false}\n          />\n          <Text>{`${firstName} ${lastName}`}</Text>\n        </div>\n      )\n    });\n\n    return (\n      <div className=\"overflow-auto py-4 px-6 UserAvatars-popover\">\n        {AvatarList}\n      </div>\n    )\n  };\n\n  return (\n    <AvatarGroup\n      list={list}\n      popoverOptions={{ dark: false, on: 'click', popperRenderer }}\n    />\n  );\n}\n    "
    }
  ],
  "backdrop": [
    {
      "query": "Backdrop All",
      "code": "import { Button, Backdrop } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onKeyDown = (event) => {\n    if (event.key === 'Escape') {\n      setOpen(false);\n    }\n  };\n\n  return (\n    <div onKeyDown={onKeyDown}>\n      <Button onClick={() => setOpen(true)} appearance=\"primary\">\n        Trigger Backdrop\n      </Button>\n      <div onClick={() => setOpen(false)}>\n        <Backdrop open={open} />\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "badge": [
    {
      "query": "Badge",
      "code": "import { Badge } from '@innovaccer/design-system';\n    () => (\n  <Badge appearance=\"secondary\" subtle={false}>\n    {'Closed'}\n  </Badge>\n)\n    "
    },
    {
      "query": "Badge All",
      "code": "import { Badge } from '@innovaccer/design-system';\n    () => {\n  const appearance = 'primary';\n  const subtle = false;\n  const children = 'Badge';\n\n  return (\n    <Badge appearance={appearance} subtle={subtle}>\n      {children}\n    </Badge>\n  );\n}\n    "
    },
    {
      "query": "Badge",
      "code": "import { Badge } from '@innovaccer/design-system';\n    () => (\n  <Badge appearance=\"alert\" subtle={false}>\n    {'Failed'}\n  </Badge>\n)\n    "
    },
    {
      "query": "Badge",
      "code": "import { Badge } from '@innovaccer/design-system';\n    () => (\n  <Badge appearance=\"warning\" subtle={false}>\n    {'Disapproved'}\n  </Badge>\n)\n    "
    },
    {
      "query": "Badge",
      "code": "import { Badge } from '@innovaccer/design-system';\n    () => (\n  <Badge appearance=\"alert\" subtle={true}>\n    {'1.41'}\n  </Badge>\n)\n    "
    },
    {
      "query": "Badge",
      "code": "import { Badge } from '@innovaccer/design-system';\n    () => (\n  <Badge appearance=\"secondary\" subtle={true}>\n    {'Closed'}\n  </Badge>\n)\n    "
    },
    {
      "query": "Badge",
      "code": "import { Badge } from '@innovaccer/design-system';\n    () => (\n  <Badge appearance=\"warning\" subtle={true}>\n    {'Pending'}\n  </Badge>\n)\n    "
    },
    {
      "query": "Badge",
      "code": "import { Badge } from '@innovaccer/design-system';\n    () => (\n  <Badge appearance=\"success\" subtle={false}>\n    {'Badge'}\n  </Badge>\n)\n    "
    },
    {
      "query": "Badge",
      "code": "import { Badge, Text } from '@innovaccer/design-system';\n    () => {\n  const subtle = false;\n  const weight = 'strong';\n  const children = 'Badge';\n  const appearances = [\n    'primary',\n    'secondary',\n    'alert',\n    'warning',\n    'success',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n  ];\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Badge appearance={appear} subtle={subtle}>\n              {children}\n            </Badge>\n            <br />\n            <Text weight={weight}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Badge",
      "code": "import { Badge, Text } from '@innovaccer/design-system';\n    () => {\n  const ButtonSubtle = true;\n  const weight = 'strong';\n  const children = 'Badge';\n  const appearances = [\n    'primary',\n    'secondary',\n    'alert',\n    'warning',\n    'success',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n  ];\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Badge appearance={appear} subtle={ButtonSubtle}>\n              {children}\n            </Badge>\n            <br />\n            <Text weight={weight}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "breadcrumbs": [
    {
      "query": "Breadcrumbs Label Truncate",
      "code": "import { Breadcrumbs, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[\n        {\n          label: 'eCQM Performance year 2022',\n          link: '/eCQM',\n        },\n        {\n          label: 'Report 1',\n          link: '/report1',\n        },\n      ]}\n      onClick={link => console.log(`on-click: ${link}`)}\n      showTooltip={true}\n    />\n  );\n\n  return (\n    <div className=\"py-6 bg-secondary-lightest\">\n      <PageHeader title=\"eCQM Performance year 2022\" breadcrumbs={breadcrumbs} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Breadcrumbs   Less Than 4 Levels",
      "code": "import { Breadcrumbs } from '@innovaccer/design-system';\n    () => {\n  const list = [\n    {\n      label: 'Level 0',\n      link: '/level0'\n    },\n    {\n      label: 'Level 1',\n      link: '/level1'\n    },\n    {\n      label: 'Level 2',\n      link: '/level2'\n    },\n    {\n      label: 'Level 3',\n      link: '/level3'\n    }\n  ];\n\n  return (\n    <div className=\"bg-secondary-lightest\">\n      <Breadcrumbs\n        list={list}\n        onClick={link => console.log(`on-click: ${link}`)}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Breadcrumbs   More Than 4 Levels",
      "code": "import { Breadcrumbs } from '@innovaccer/design-system';\n    () => {\n  const list = [\n    {\n      label: 'Level 0',\n      link: '/level0'\n    },\n    {\n      label: 'Level 1',\n      link: '/level1'\n    },\n    {\n      label: 'Level 2',\n      link: '/level2'\n    },\n    {\n      label: 'Level 3',\n      link: '/level3'\n    },\n    {\n      label: 'Level 4',\n      link: '/level4'\n    },\n  ];\n\n  return (\n    <div className=\"bg-secondary-lightest\">\n      <Breadcrumbs\n        list={list}\n        onClick={link => console.log(`on-click: ${link}`)}\n      />\n    </div>\n  );\n}\n    "
    }
  ],
  "button": [
    {
      "query": "Button All",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => {\n  const type = 'button';\n\n  const appearance = 'basic';\n\n  const size = 'large';\n\n  const disabled = false;\n\n  const expanded = false;\n\n  const loading = false;\n\n  const icon = '';\n\n  const iconAlign = 'right';\n\n  const children = 'Open';\n\n  return (\n    <Button\n      onClick={action('button-clicked')}\n      onMouseEnter={action('mouse-enter')}\n      onMouseLeave={action('mouse-leave')}\n      type={type}\n      appearance={appearance}\n      size={size}\n      expanded={expanded}\n      disabled={disabled}\n      loading={loading}\n      icon={icon}\n      iconAlign={iconAlign}\n      aria-label=\"Open\"\n    >\n      {children}\n    </Button>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => (\n  <Button appearance=\"alert\" aria-label=\"Delete\">\n    Delete\n  </Button>\n)\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => (\n  <Button appearance=\"basic\" size=\"regular\" aria-label=\"Cancel\">\n    Cancel\n  </Button>\n)\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => (\n  <Button appearance=\"primary\" size=\"large\" expanded={true} aria-label=\"Login\">\n    Login\n  </Button>\n)\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => (\n  <Button appearance=\"basic\" icon=\"keyboard_arrow_right\" aria-label=\"Next in rank\" tooltip=\"Next in rank\" />\n)\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => (\n  <div className=\"d-inline-flex\">\n    <div className=\"mr-4\">\n      <Button size=\"tiny\" icon=\"content_copy\" aria-label=\"Copy\" tooltip=\"Copy\" />\n    </div>\n    <div className=\"mr-4\">\n      <Button size=\"tiny\" icon=\"content_paste\" aria-label=\"Paste\" tooltip=\"Paste\" />\n    </div>\n    <Button size=\"tiny\" icon=\"delete\" aria-label=\"Delete\" tooltip=\"Delete\" />\n  </div>\n)\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => (\n  <Button icon=\"get_app\" iconAlign=\"left\" aria-label=\"Download\">\n    Download\n  </Button>\n)\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => (\n  <Button icon=\"arrow_forward\" iconAlign=\"right\" aria-label=\"Next in rank\">\n    Next in rank\n  </Button>\n)\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => (\n  <div className=\"d-flex\">\n    <Button size=\"tiny\" className=\"mr-4\" aria-label=\"Copy\">\n      Copy\n    </Button>\n    <Button size=\"tiny\" className=\"mr-4\" aria-label=\"Paste\">\n      Paste\n    </Button>\n    <Button size=\"tiny\" aria-label=\"Delete\">\n      Delete\n    </Button>\n  </div>\n)\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => <Button appearance=\"primary\" loading={true} aria-label=\"loading\" />\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => (\n  <Button appearance=\"primary\" size=\"regular\" aria-label=\"Submit your response\">\n    Submit your response\n  </Button>\n)\n    "
    },
    {
      "query": "Button",
      "code": "import { Button, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Download All',\n      value: 'Download All',\n    },\n    {\n      label: 'Download Selected',\n      value: 'Download Selected',\n    },\n  ];\n\n  return (\n    <div className=\"d-flex\">\n      <Button className=\"mr-2\" aria-label=\"Request review\">\n        Request review\n      </Button>\n      <div className=\"mb-10\">\n        <Dropdown menu={true} icon=\"expand_more\" options={options} width={150} />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => (\n  <Button appearance=\"transparent\" aria-label=\"Re-evaluate\">\n    Re-evaluate\n  </Button>\n)\n    "
    },
    {
      "query": "Button",
      "code": "import { Button } from '@innovaccer/design-system';\n    () => <Button appearance=\"transparent\" icon=\"more_horiz\" aria-label=\"Menu\" />\n    "
    },
    {
      "query": "Button",
      "code": "import { Button, Text } from '@innovaccer/design-system';\n    () => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n  const appearances = ['basic', 'primary', 'alert', 'transparent'];\n  const children = 'Button';\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Button\n              onClick={action('button-clicked')}\n              onMouseEnter={action('mouse-enter')}\n              onMouseLeave={action('mouse-leave')}\n              appearance={appear}\n              size={'regular'}\n              expanded={expanded}\n              disabled={disabled}\n              loading={loading}\n              aria-label={`${appear}`}\n            >\n              {children}\n            </Button>\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Button, Text } from '@innovaccer/design-system';\n    () => {\n  const disabled = false;\n  const ButtonExpanded = true;\n  const loading = false;\n  const appearances = ['basic', 'primary', 'alert'];\n  const children = 'Button';\n\n  return (\n    <div className=\"Row\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9 mb-4 w-50\">\n            <Button\n              onClick={action('button-clicked')}\n              onMouseEnter={action('mouse-enter')}\n              onMouseLeave={action('mouse-leave')}\n              appearance={appear}\n              size={'regular'}\n              expanded={ButtonExpanded}\n              disabled={disabled}\n              loading={loading}\n              aria-label={`${appear}`}\n            >\n              {children}\n            </Button>\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Text, Button } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <div className=\"mb-7\">\n        <Text weight=\"medium\" size=\"large\">\n          Tiny\n        </Text>\n        <div className=\"d-flex align-items-center mt-4\">\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"mr-7\"\n            icon=\"add\"\n            size=\"tiny\"\n            largeIcon={false}\n            aria-label=\"Add document\"\n          />\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"\"\n            icon=\"add\"\n            size=\"tiny\"\n            largeIcon={true}\n            aria-label=\"Add document\"\n          />\n        </div>\n      </div>\n      <div className=\"mb-7\">\n        <Text weight=\"medium\" size=\"large\">\n          Regular\n        </Text>\n        <div className=\"d-flex align-items-center mt-4\">\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"mr-7\"\n            icon=\"print\"\n            size=\"regular\"\n            largeIcon={false}\n            aria-label=\"Print\"\n          />\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"\"\n            icon=\"print\"\n            size=\"regular\"\n            largeIcon={true}\n            aria-label=\"Print\"\n          />\n        </div>\n      </div>\n      <div className=\"mb-7\">\n        <Text weight=\"medium\" size=\"large\">\n          Large\n        </Text>\n        <div className=\"d-flex align-items-center mt-4\">\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"mr-7\"\n            icon=\"more_horiz\"\n            size=\"large\"\n            largeIcon={false}\n            aria-label=\"Menu\"\n          />\n          <Button\n            onClick={action('button-clicked')}\n            onMouseEnter={action('mouse-enter')}\n            onMouseLeave={action('mouse-leave')}\n            className=\"\"\n            icon=\"more_horiz\"\n            size=\"large\"\n            largeIcon={true}\n            aria-label=\"Menu\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Button, Text } from '@innovaccer/design-system';\n    () => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n  const iconAlign = 'left';\n\n  const size = ['tiny', 'regular', 'large'];\n\n  const icon = 'refresh';\n  const children = 'Button';\n  return (\n    <div className=\"d-flex w-25\">\n      {size.map((IconSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-5\">\n            <div className=\"h-50\">\n              <Button\n                onClick={action('button-clicked')}\n                onMouseEnter={action('mouse-enter')}\n                onMouseLeave={action('mouse-leave')}\n                appearance={'basic'}\n                size={IconSize}\n                expanded={expanded}\n                disabled={disabled}\n                loading={loading}\n                icon={icon}\n                iconAlign={iconAlign}\n                aria-label=\"Refresh\"\n              >\n                {children}\n              </Button>\n            </div>\n            <br />\n            <Text weight=\"strong\">{IconSize.charAt(0).toUpperCase() + IconSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Button, Text } from '@innovaccer/design-system';\n    () => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n  const iconAlign = 'right';\n\n  const size = ['tiny', 'regular', 'large'];\n\n  const icon = 'refresh';\n  const children = 'Button';\n  return (\n    <div className=\"d-flex w-25\">\n      {size.map((IconSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-5\">\n            <div className=\"h-50\">\n              <Button\n                onClick={action('button-clicked')}\n                onMouseEnter={action('mouse-enter')}\n                onMouseLeave={action('mouse-leave')}\n                appearance={'basic'}\n                size={IconSize}\n                expanded={expanded}\n                disabled={disabled}\n                loading={loading}\n                icon={icon}\n                iconAlign={iconAlign}\n                aria-label=\"Refresh\"\n              >\n                {children}\n              </Button>\n            </div>\n            <br />\n            <Text weight=\"strong\">{IconSize.charAt(0).toUpperCase() + IconSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Button, Text } from '@innovaccer/design-system';\n    () => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n  const sizes = ['tiny', 'regular', 'large'];\n  const children = 'Button';\n\n  return (\n    <div className=\"d-flex w-25\">\n      {sizes.map((ButtonSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-5\">\n            <div className=\"h-50\">\n              <Button\n                onClick={action('button-clicked')}\n                onMouseEnter={action('mouse-enter')}\n                onMouseLeave={action('mouse-leave')}\n                appearance={'primary'}\n                size={ButtonSize}\n                expanded={expanded}\n                disabled={disabled}\n                loading={loading}\n                aria-label={`${ButtonSize}`}\n              >\n                {children}\n              </Button>\n            </div>\n            <br />\n            <Text weight=\"strong\">{ButtonSize.charAt(0).toUpperCase() + ButtonSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Button, Text } from '@innovaccer/design-system';\n    () => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n  const children = 'Delete';\n\n  return (\n    <div className=\"d-flex w-25 justify-content-between\">\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'alert'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={loading}\n          aria-label=\"Delete\"\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'alert'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={true}\n          loading={loading}\n          aria-label=\"Delete\"\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'alert'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n          aria-label=\"Loading\"\n        >\n          {''}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Button, Text } from '@innovaccer/design-system';\n    () => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n  const children = 'Open';\n\n  return (\n    <div className=\"d-flex w-25 justify-content-between\">\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={loading}\n          aria-label=\"Open\"\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={true}\n          loading={loading}\n          aria-label=\"Open\"\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n          aria-label=\"Loading\"\n        >\n          {''}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          selected={true}\n          aria-label=\"Selected\"\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Selected</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'basic'}\n          size={'regular'}\n          selected={true}\n          icon=\"events\"\n          aria-label=\"Selected\"\n        />\n        <br />\n        <Text weight=\"strong\">Selected Icon</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Button, Text } from '@innovaccer/design-system';\n    () => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n  const children = 'Login';\n\n  return (\n    <div className=\"d-flex w-25 justify-content-between\">\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'primary'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={loading}\n          aria-label=\"Login\"\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'primary'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={true}\n          loading={loading}\n          aria-label=\"Login\"\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'primary'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n          aria-label=\"Loading\"\n        >\n          {''}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Button",
      "code": "import { Button, Text } from '@innovaccer/design-system';\n    () => {\n  const disabled = false;\n  const expanded = false;\n  const loading = false;\n  const children = 'Open';\n\n  return (\n    <div className=\"d-flex w-25 justify-content-between\">\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={loading}\n          aria-label=\"Open\"\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={true}\n          loading={loading}\n          aria-label=\"Open\"\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          expanded={expanded}\n          disabled={disabled}\n          loading={true}\n          aria-label=\"loading\"\n        >\n          {''}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Loading</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          selected={true}\n          aria-label=\"Open\"\n        >\n          {children}\n        </Button>\n        <br />\n        <Text weight=\"strong\">Selected</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Button\n          onClick={action('button-clicked')}\n          onMouseEnter={action('mouse-enter')}\n          onMouseLeave={action('mouse-leave')}\n          appearance={'transparent'}\n          size={'regular'}\n          selected={true}\n          icon=\"events\"\n          aria-label=\"Events\"\n        />\n        <br />\n        <Text weight=\"strong\">Selected Icon</Text>\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "calendar": [
    {
      "query": "Calendar All",
      "code": "import { Card, Calendar } from '@innovaccer/design-system';\n    () => {\n  const monthsInView = 1;\n\n  const dateValue = new Date('Jan 11 2021');\n\n  const startDate = new Date('Jan 15 2021');\n\n  const endDate = new Date('Jan 20 2021');\n\n  const view = 'date';\n\n  const rangePicker = false;\n\n  const rangeLimit = 0;\n\n  const firstDayOfWeek = 'saturday';\n\n  const disabledBefore = new Date('Jan 20 2015');\n\n  const disabledAfter = new Date('Jan 20 2028');\n\n  const jumpView = true;\n\n  const yearNav = -1;\n\n  const monthNav = -1;\n\n  const attr = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (rangeLimit) attr.rangeLimit = rangeLimit;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  // we redefine this function here because in storybook.json we do not get imported functions.\n\n  const isValid = (validators, ...value) => {\n    const iterator = Array.isArray(validators) ? validators : [validators];\n\n    return iterator.every((validator) => validator(...value));\n  };\n\n  const translateToDate = (format, val, validators) => {\n    if (isValid(validators, val, format)) {\n      const separator = format.includes('/') ? '/' : '-';\n\n      let year = -1,\n        month = -1,\n        date = -1;\n      const v = val.split(separator);\n      format.split(separator).forEach((f, i) => {\n        switch (f) {\n          case 'mm':\n            month = +v[i] - 1;\n            break;\n          case 'yyyy':\n            year = +v[i];\n            break;\n          case 'dd':\n            date = +v[i];\n            break;\n        }\n      });\n      const d = convertToDate({ year, month, date });\n      return d;\n    } else {\n      return undefined;\n    }\n  };\n\n  const convertToDate = (d, format, validators) => {\n    let dateVal;\n\n    if (d) {\n      if (typeof d === 'number') {\n        dateVal = new Date(d);\n      } else if (typeof d === 'string') {\n        return format ? translateToDate(format, d, validators) : undefined;\n      } else if (!(d instanceof Date)) {\n        const { year, month, date } = d;\n        dateVal = new Date(year, month, date, 0, 0, 0);\n      } else {\n        dateVal = d;\n      }\n    }\n    return dateVal;\n  };\n\n  return (\n    <Card className=\"d-inline-flex\" shadow=\"light\">\n      <Calendar\n        monthsInView={monthsInView}\n        rangePicker={rangePicker}\n        jumpView={jumpView}\n        date={convertToDate(dateValue)}\n        startDate={convertToDate(startDate)}\n        endDate={convertToDate(endDate)}\n        onDateChange={(currDate) => action(`on date change : ${currDate}`)()}\n        onRangeChange={(sDate, eDate) => action(`on range change: ${sDate} - ${eDate}`)()}\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        {...attr}\n      />\n    </Card>\n  );\n}\n    "
    },
    {
      "query": "Calendar",
      "code": "import { Heading, Card, Calendar } from '@innovaccer/design-system';\n    () => {\n  const view = ['year', 'month', 'date'];\n\n  return (\n    <>\n      <Heading>disabledBefore</Heading>\n      <div className=\"d-flex\">\n        {view.map((v, index) => (\n          <div className=\"mr-8\" key={index}>\n            <Card className=\"d-inline-flex\" shadow=\"light\">\n              <Calendar date={new Date(2020, 2, 15)} disabledBefore={new Date(2020, 2, 10)} view={v} />\n            </Card>\n          </div>\n        ))}\n      </div>\n\n      <Heading>disabledAfter</Heading>\n      <div className=\"d-flex\">\n        {view.map((v, index) => (\n          <div className=\"mr-8\" key={index}>\n            <Card className=\"d-inline-flex\" shadow=\"light\">\n              <Calendar date={new Date(2020, 2, 15)} disabledAfter={new Date(2020, 2, 20)} view={v} />\n            </Card>\n          </div>\n        ))}\n      </div>\n\n      <Heading>disabledBefore and disabledAfter</Heading>\n      <div className=\"d-flex\">\n        {view.map((v, index) => (\n          <div className=\"mr-8\" key={index}>\n            <Card className=\"d-inline-flex\" shadow=\"light\">\n              <Calendar\n                date={new Date(2020, 2, 15)}\n                disabledBefore={new Date(2020, 2, 10)}\n                disabledAfter={new Date(2020, 2, 20)}\n                view={v}\n              />\n            </Card>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n    "
    },
    {
      "query": "Calendar",
      "code": "import { Card, Calendar } from '@innovaccer/design-system';\n    () => {\n  const values = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n\n  // to freeze the object for typescript\n\n  return (\n    <div className=\"d-flex flex-wrap\">\n      {values.map((v, index) => (\n        <div className=\"mr-9 mt-5\" key={index}>\n          <Card className=\"d-inline-flex\" shadow=\"light\">\n            <Calendar date={new Date(2020, 2, 1)} firstDayOfWeek={v} />\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Calendar",
      "code": "import { Heading, Card, Calendar } from '@innovaccer/design-system';\n    () => {\n  return (\n    <>\n      <div className=\"mt-8\">\n        <Heading>size: small</Heading>\n        <div className=\"d-flex\">\n          <div className=\"mr-8\">\n            <Card className=\"d-inline-flex\" shadow=\"light\">\n              <Calendar date={new Date(2020, 2, 15)} size={'small'} view=\"date\" />\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-8\">\n        <Heading>size: large</Heading>\n        <div className=\"d-flex\">\n          <div className=\"mr-8\">\n            <Card className=\"d-inline-flex\" shadow=\"light\">\n              <Calendar date={new Date(2020, 2, 15)} size={'large'} view=\"date\" />\n            </Card>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n    "
    },
    {
      "query": "Calendar",
      "code": "import { Heading, Card, Calendar } from '@innovaccer/design-system';\n    () => {\n  const view = ['year', 'month', 'date'];\n\n  return (\n    <>\n      <div className=\"mt-8\">\n        <Heading>size: small</Heading>\n        <div className=\"d-flex\">\n          {view.map((v, index) => (\n            <div className=\"mr-8\" key={index}>\n              <Card className=\"d-inline-flex\" shadow=\"light\">\n                <Calendar date={new Date(2020, 2, 15)} size={'small'} view={v} />\n              </Card>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"mt-8\">\n        <Heading>size: large</Heading>\n        <div className=\"d-flex\">\n          {view.map((v, index) => (\n            <div className=\"mr-8\" key={index}>\n              <Card className=\"d-inline-flex\" shadow=\"light\">\n                <Calendar date={new Date(2020, 2, 15)} size={'large'} view={v} />\n              </Card>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n    "
    },
    {
      "query": "Calendar",
      "code": "import { Heading, Card, Calendar } from '@innovaccer/design-system';\n    () => {\n  return (\n    <>\n      <div className=\"mt-8\">\n        <Heading>size: small with events</Heading>\n        <div className=\"d-flex\">\n          <div className=\"mr-8\">\n            <Card className=\"d-inline-flex\" shadow=\"light\">\n              <Calendar events={{ '12/21/2021': true }} date={new Date('12/21/2021')} size={'small'} />\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-8\">\n        <Heading>size: large with events</Heading>\n        <div className=\"d-flex\">\n          <div className=\"mr-8\">\n            <Card className=\"d-inline-flex\" shadow=\"light\">\n              <Calendar events={{ '12/20/2021': true }} date={new Date('12/21/2021')} size={'large'} />\n            </Card>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n    "
    }
  ],
  "caption": [
    {
      "query": "Caption",
      "code": "import {  } from '@innovaccer/design-system';\n    () => <></>\n    "
    }
  ],
  "card": [
    {
      "query": "Card All",
      "code": "import { Card, CardHeader, Text, CardBody, CardFooter, Button, CardSubdued } from '@innovaccer/design-system';\n    /*\n// style.css\n.Card-wrapper {\n    height: 250px;\n}\n*/\n\n() => {\n  const shadow = 'default';\n\n  return (\n    <>\n      <Card shadow={shadow} className=\"w-50 Card-wrapper\">\n        <CardHeader>\n          <Text weight=\"strong\" size=\"large\">\n            Card Heading\n          </Text>\n        </CardHeader>\n        <CardBody>\n          <div>Card Body</div>\n        </CardBody>\n        <CardFooter className=\"justify-content-end\">\n          <>\n            <Button appearance=\"basic\">Cancel</Button>\n            <Button appearance=\"primary\" className=\"ml-4\">\n              Submit\n            </Button>\n          </>\n        </CardFooter>\n      </Card>\n      <Card className=\"mt-5 w-50\">\n        <CardHeader>\n          <Text weight=\"strong\" size=\"large\">\n            Card Heading\n          </Text>\n        </CardHeader>\n        <CardBody>\n          <div>Card Body</div>\n        </CardBody>\n        <CardSubdued border=\"top\">Subdued section.</CardSubdued>\n      </Card>\n    </>\n  );\n}\n    "
    },
    {
      "query": "Card Default Card",
      "code": "import { Card } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Card>\n      <div className=\"p-8\" />\n    </Card>\n  );\n}\n    "
    },
    {
      "query": "Card Empty Card",
      "code": "import { Row, Column, Card, CardHeader, Heading, CardBody, EmptyState, Button } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Row>\n      <Column size=\"8\">\n        <Card>\n          <CardHeader>\n            <Heading size=\"s\">Daily progress</Heading>\n          </CardHeader>\n          <CardBody>\n            <EmptyState\n              title=\"Unable to fetch data\"\n              description=\"Sorry there was a technical issue while getting this data. Please try again.\"\n              imageSrc={image}\n              size=\"small\"\n              className=\"pb-6\"\n            >\n              <Button icon=\"refresh\" iconAlign=\"left\" className=\"mt-3\">\n                Reload\n              </Button>\n            </EmptyState>\n          </CardBody>\n        </Card>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Card Flat",
      "code": "import { Card } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Card shadow=\"none\">\n      <div className=\"p-8\" />\n    </Card>\n  );\n}\n    "
    },
    {
      "query": "Card",
      "code": "import { Row, Column, Card, CardHeader, Heading, CardBody, Paragraph, Radio, Text, CardSubdued, StatusHint } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Row>\n      <Column size=\"7\">\n        <Card>\n          <CardHeader>\n            <Heading size=\"s\">Set timing</Heading>\n          </CardHeader>\n          <CardBody>\n            <Paragraph>\n              After the campaign starts, the outreach attempt will be made with the recipients according to the sender's\n              preferred timings.\n            </Paragraph>\n            <Row>\n              <Column size=\"12\" className=\"pt-4\">\n                <Radio label=\"Send now\" name=\"gender\" value=\"Checkbox\" defaultChecked={true} />\n                <Text small={true} appearance=\"disabled\" className=\"ml-7\">\n                  Campaign will start immediately\n                </Text>\n              </Column>\n              <Column size=\"12\" className=\"py-4\">\n                <Radio label=\"Schedule for later\" name=\"gender\" value=\"Checkbox\" />\n                <Text small={true} appearance=\"disabled\" className=\"ml-7\">\n                  Campaign will not start immediately\n                </Text>\n              </Column>\n            </Row>\n          </CardBody>\n\n          <CardSubdued border=\"top\">\n            <Text weight=\"strong\" small={true}>\n              SELECTED RECIPIENTS\n            </Text>\n            <div className=\"pt-6\">\n              <StatusHint appearance=\"success\">437 wil receive the message.</StatusHint>\n              <StatusHint appearance=\"alert\">42 have opted out or never agreed to receive messages.</StatusHint>\n            </div>\n          </CardSubdued>\n        </Card>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Card Scrollable Content",
      "code": "import { Paragraph, Text, Card, CardHeader, Heading, List } from '@innovaccer/design-system';\n    /*\n// style.css\n.Diagnosis-list {\n    height: 70vh;\n}\n*/\n\n() => {\n\n  const data = [\n  {\n    \"data\": {\n      \"title\": \"Reminder for due lab tests\",\n      \"subTitle\": \"ENG. +1 Hi [recipient.name]! Your (test) is overdue. Please get in touch with [recipient.PCPI...\"\n    }\n  },\n  {\n    \"data\": {\n      \"title\": \"Reminder for due lab tests\",\n      \"subTitle\": \"ENG. +1 Hi [recipient.name]! Your (test) is overdue. Please get in touch with [recipient.PCPI...\"\n    }\n  },\n  {\n    \"data\": {\n      \"title\": \"Reminder for upcoming lab test\",\n      \"subTitle\": \"ENG. «1 Hi [recipient.name]! Your [test] is scheduled for [test.date]. Please get in...\"\n    }\n  },\n  {\n    \"data\": {\n      \"title\": \"Reminder for due lab tests\",\n      \"subTitle\": \"ENG -1 Hi [recipient.name] Your [test] is overdue. Please get in touch with [recipiert.PCP}...\"\n    }\n  },\n  {\n    \"data\": {\n      \"title\": \"Reminder for due lab tests\",\n      \"subTitle\": \"ENG. +1 Hi [recipient.name] Your (test] is overdue. Please get in touch with (recipient. PCP}...\"\n    }\n  },\n  {\n    \"data\": {\n      \"title\": \"Reminder for due lab tests\",\n      \"subTitle\": \"ENG. +1 Hi [recipient.name]! Your (test) is overdue. Please get in touch with [recipient.PCPI...\"\n    }\n  },\n  {\n    \"data\": {\n      \"title\": \"Reminder for due lab tests\",\n      \"subTitle\": \"ENG. +1 Hi [recipient.name]! Your (test) is overdue. Please get in touch with [recipient.PCPI...\"\n    }\n  },\n  {\n    \"data\": {\n      \"title\": \"Reminder for upcoming lab test\",\n      \"subTitle\": \"ENG. «1 Hi [recipient.name]! Your [test] is scheduled for [test.date]. Please get in...\"\n    }\n  },\n  {\n    \"data\": {\n      \"title\": \"Reminder for due lab tests\",\n      \"subTitle\": \"ENG -1 Hi [recipient.name] Your [test] is overdue. Please get in touch with [recipiert.PCP}...\"\n    }\n  },\n  {\n    \"data\": {\n      \"title\": \"Reminder for due lab tests\",\n      \"subTitle\": \"ENG. +1 Hi [recipient.name] Your (test] is overdue. Please get in touch with (recipient. PCP}...\"\n    }\n  }\n];\n\n  const schema = [\n    {\n      width: '100%',\n      name: 'data',\n      displayName: '',\n      cellRenderer: (props) => {\n        return (\n          <>\n          <Paragraph>\n            <Text weight=\"strong\">\n              {props.data.data.title}\n            </Text>\n            <br />\n            <Text>\n              {props.data.data.subTitle}\n            </Text>\n\n          </Paragraph>\n          </>\n        );\n      }\n    }\n  ];\n\n  return (\n    <div>\n      <Card className=\"\">\n        <CardHeader>\n          <Heading size=\"s\">Use a template</Heading>\n        </CardHeader>\n        <div className=\"Diagnosis-list\">\n          <List\n            data={data}\n            schema={schema}\n            withHeader={true}\n            headerOptions={{\n              withSearch: true,\n              dynamicColumn: false\n            }}\n            withPagination={true}\n            pageSize={5}\n          />\n        </div>\n      </Card>\n    </div>\n  );\n};\n\n    "
    },
    {
      "query": "CardSubdued",
      "code": "import { CardSubdued } from '@innovaccer/design-system';\n    () => {\n  return (\n    <CardSubdued>\n      <div className=\"p-8\" />\n    </CardSubdued>\n  );\n}\n    "
    }
  ],
  "chat": [
    {
      "query": "Chat Chat Message",
      "code": "import { ChatMessage } from '@innovaccer/design-system';\n    () => {\n  const type = 'incoming';\n  const statusType = 'sent';\n  const isTyping = false;\n  const message = 'Hello, there.';\n  const typingText = 'Typing..';\n  const failedMessage = 'Click to retry';\n  const sendingMessage = 'Sending';\n\n  const options = {\n    type,\n    isTyping,\n    typingText,\n    failedMessage,\n    sendingMessage,\n    text: message,\n    statusOptions: { type: statusType, time: '10:11 AM' },\n  };\n\n  return (\n    <div className=\"w-25\">\n      <ChatMessage {...options} />\n    </div>\n  );\n}\n    "
    }
  ],
  "checkbox": [
    {
      "query": "Checkbox All",
      "code": "import { Checkbox } from '@innovaccer/design-system';\n    () => {\n  const size = 'tiny';\n\n  const label = 'Checkbox';\n\n  const [checked, setChecked] = React.useState(false);\n\n  const [indeterminate, setIndeterminate] = React.useState(false);\n\n  const disabled = false;\n\n  const onChangeHandler = (event) => {\n    setChecked(!checked);\n    setIndeterminate(!indeterminate);\n    return action(`onChange: ${event.target.checked}`)();\n  };\n\n  return (\n    <Checkbox\n      checked={checked}\n      indeterminate={indeterminate}\n      disabled={disabled}\n      size={size}\n      label={label}\n      onChange={onChangeHandler}\n    />\n  );\n}\n    "
    },
    {
      "query": "Checkbox",
      "code": "import { Row, Column, Heading, Label, Checkbox } from '@innovaccer/design-system';\n    () => {\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\n  return (\n    <div>\n      <Row>\n        <Column>\n          <Heading size=\"s\">Horizontal Alignment</Heading>\n          <Label>Days</Label>\n          <div className=\"d-flex\">\n            {days.map((day, index) => {\n              return (\n                <Checkbox className={index !== 0 ? 'ml-7' : ''} key={index} label={day} defaultChecked={index < 2} />\n              );\n            })}\n          </div>\n        </Column>\n      </Row>\n      <Row>\n        <Column className=\"pt-5 mt-8\">\n          <Heading size=\"s\">Vertical Alignment</Heading>\n          <Label>Days</Label>\n          {days.map((day, index) => {\n            return (\n              <Checkbox key={index} label={day} defaultChecked={index < 2} className={index !== 0 ? 'mt-4' : ''} />\n            );\n          })}\n        </Column>\n      </Row>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Checkbox",
      "code": "import { Label, Checkbox } from '@innovaccer/design-system';\n    () => (\n  <div>\n    <Label className=\"mb-3\">Problems</Label>\n    <Checkbox label=\"Cardiovascular\" defaultChecked={true} />\n    <Checkbox label=\"Obesity\" defaultChecked={true} className=\"mt-5\" />\n    <Checkbox label=\"Patient has language barriers\" className=\"mt-5\" />\n    <Checkbox label=\"Mental and behavioral health conditions\" className=\"mt-5\" />\n  </div>\n)\n    "
    },
    {
      "query": "Checkbox",
      "code": "import { Checkbox } from '@innovaccer/design-system';\n    () => <Checkbox label=\"Emergency contact\" defaultChecked={true} />\n    "
    },
    {
      "query": "Checkbox Nested Checkboxes",
      "code": "import { Checkbox } from '@innovaccer/design-system';\n    () => {\n  const labels = ['Diabetes Eye Exam', 'HbA1c Test in last 12 months', 'Falls Risk Assessment'];\n\n  const childArray = [true, true, false];\n\n  const [checked, setChecked] = React.useState(childArray);\n  const [parentStatus, setParentStatus] = React.useState({ checked: false, indeterminate: true });\n\n  const handleParentChange = (event) => {\n    const updatedArray = [...childArray].fill(event.target.checked);\n    setChecked(updatedArray);\n    setParentStatus({ checked: event.target.checked, indeterminate: event.target.indeterminate });\n  };\n\n  const handleChildChange = (event, index) => {\n    const updateCheck = [...checked];\n    updateCheck[index] = event.target.checked;\n    const totalCount = labels.length;\n    const countT = updateCheck.filter(Boolean).length;\n    const status = countT < totalCount;\n    const obj = (countT > 0) ? { checked: !status, indeterminate: status } : { checked: !status, indeterminate: false };\n    setChecked(updateCheck);\n    setParentStatus(obj);\n  };\n\n  return (\n    <div>\n      <Checkbox\n        checked={parentStatus.checked}\n        indeterminate={parentStatus.indeterminate}\n        label={'Measures'}\n        onChange={handleParentChange}\n        value={'Measures'}\n      />\n      <div className=\"d-flex flex-column pl-7\">\n        {\n          labels.map((label, ind) => {\n            return (\n              <Checkbox\n                key={`checkbox-${ind}`}\n                label={label}\n                checked={checked[ind]}\n                value={label}\n                onChange={c => handleChildChange(c, ind)}\n                className=\"mt-4\"\n              />\n            );\n          })\n        }\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Checkbox",
      "code": "import { Column, Checkbox } from '@innovaccer/design-system';\n    () => (\n  <Column size={4}>\n    <Checkbox label=\"Patient with impaired physical mobility and care deficits.\" />\n  </Column>\n)\n    "
    },
    {
      "query": "Checkbox   Checkbox List",
      "code": "import { Checkbox } from '@innovaccer/design-system';\n    () => {\n  const labels = ['InConnect', 'InGraph', 'InReport'];\n\n  const childArray = Array(labels.length).fill(false);\n  const [checked, setChecked] = React.useState(childArray);\n  const [parentStatus, setParentStatus] = React.useState({ checked: false, indeterminate: false });\n\n  const handleParentChange = (event) => {\n    const updatedArray = [...childArray].fill(event.target.checked);\n    setChecked(updatedArray);\n    setParentStatus({ checked: event.target.checked, indeterminate: event.target.indeterminate });\n  };\n\n  const handleChildChange = (event, index) => {\n    const updateCheck = [...checked];\n    updateCheck[index] = event.target.checked;\n    const totalCount = labels.length;\n    const countT = updateCheck.filter(Boolean).length;\n    const status = countT < totalCount;\n    const obj = (countT > 0) ? { checked: !status, indeterminate: status } : { checked: !status, indeterminate: false };\n    setChecked(updateCheck);\n    setParentStatus(obj);\n  };\n\n  return (\n    <div>\n      <Checkbox\n        checked={parentStatus.checked}\n        indeterminate={parentStatus.indeterminate}\n        label={'Innovaccer'}\n        onChange={handleParentChange}\n        value={'Innovaccer'}\n      />\n      <div className=\"d-flex flex-column pl-7\">\n        {\n          labels.map((label, ind) => {\n            return (\n              <Checkbox\n                key={`checkbox-${ind}`}\n                label={label}\n                checked={checked[ind]}\n                value={label}\n                onChange={c => handleChildChange(c, ind)}\n              />\n            );\n          })\n        }\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Checkbox   Controlled Checkbox",
      "code": "import { Checkbox } from '@innovaccer/design-system';\n    () => {\n  const [checked, setChecked] = React.useState(false);\n\n  const handleParentChange = (event) => {\n    const updatedChecked = event.target.checked;\n    this.window.setTimeout(() => {\n      setChecked(updatedChecked);\n    }, 2000);\n  };\n\n  return (\n      <Checkbox\n        checked={checked}\n        label={'Innovaccer'}\n        onChange={handleParentChange}\n        value={'Innovaccer'}\n      />\n  );\n}\n    "
    },
    {
      "query": "Checkbox",
      "code": "import { Checkbox, Text } from '@innovaccer/design-system';\n    () => {\n  const label = 'Checkbox';\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-5\">\n        <Checkbox checked={true} disabled={true} label={label} />\n        <br />\n        <Text weight=\"strong\">Checked</Text>\n      </div>\n      <div className=\"mr-5\">\n        <Checkbox checked={false} disabled={true} label={label} />\n        <br />\n        <Text weight=\"strong\">Unchecked</Text>\n      </div>\n      <div className=\"mr-5\">\n        <Checkbox indeterminate={true} disabled={true} label={label} />\n        <br />\n        <Text weight=\"strong\">Indeterminate</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Checkbox",
      "code": "import { Checkbox, Text } from '@innovaccer/design-system';\n    () => {\n  const sizes = ['tiny', 'regular'];\n  const label = 'Checkbox';\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((CheckboxSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-5\">\n            <div className=\"h-50\">\n              <Checkbox checked={true} disabled={false} size={CheckboxSize} label={label} />\n            </div>\n            <br />\n            <Text weight=\"strong\">{CheckboxSize.charAt(0).toUpperCase() + CheckboxSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Checkbox",
      "code": "import { Checkbox } from '@innovaccer/design-system';\n    () => {\n  const handleParentChange = (event) => {\n    return action(`onChange: ${event.target.checked}`)();\n  };\n\n  return (\n    <div>\n      <Checkbox defaultChecked={true} label={'Innovaccer'} onChange={handleParentChange} value={'Innovaccer'} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Checkbox With Help Text",
      "code": "import { Checkbox } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Checkbox\n      label={'Guardian'}\n      helpText={'A member legally responsible for the care of the patient.'}\n      className=\"w-50\"\n    />\n  );\n}\n    "
    }
  ],
  "chip": [
    {
      "query": "Chip All",
      "code": "import { Chip } from '@innovaccer/design-system';\n    () => {\n  const type = 'selection';\n\n  const label = 'Chip Label';\n\n  const icon = 'assessment';\n\n  const disabled = false;\n\n  let clearButton;\n  if (type !== 'action') {\n    clearButton = true;\n  }\n\n  let selected;\n  if (type === 'selection') {\n    selected = false;\n  }\n  return (\n    <Chip\n      icon={icon}\n      label={label}\n      clearButton={clearButton}\n      disabled={disabled}\n      type={type}\n      onClose={action(`onClose: ${label}`)}\n      onClick={action(`onClick: ${label}`)}\n      selected={selected}\n      name={'chip'}\n    />\n  );\n}\n    "
    },
    {
      "query": "Chip",
      "code": "import { Chip } from '@innovaccer/design-system';\n    () => (\n  <Chip\n    label=\"First Name\"\n    clearButton={false}\n    disabled={false}\n    type=\"action\"\n    name={'chip'}\n    onClick={action('on-click')}\n  />\n)\n    "
    },
    {
      "query": "Chip",
      "code": "import { Chip } from '@innovaccer/design-system';\n    () => (\n  <Chip\n    label=\"First Name\"\n    clearButton={true}\n    disabled={false}\n    type=\"input\"\n    name={'chip'}\n    onClick={action('on-click')}\n    onClose={action('on-close')}\n  />\n)\n    "
    },
    {
      "query": "Chip",
      "code": "import { Chip } from '@innovaccer/design-system';\n    () => {\n  const [selected, setSelected] = React.useState(false);\n\n  return (\n    <Chip\n      label=\"Yes\"\n      clearButton={false}\n      type=\"selection\"\n      selected={selected}\n      name={'chip'}\n      onClick={() => setSelected(!selected)}\n    />\n  );\n}\n    "
    },
    {
      "query": "Chip",
      "code": "import { Chip, Text } from '@innovaccer/design-system';\n    () => {\n  const icon = 'assessment';\n  const label = 'Action';\n  return (\n    <div className=\"d-flex\">\n      {BooleanValue.map((booleanvalue, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Chip\n              icon={icon}\n              label={label}\n              disabled={booleanvalue}\n              onClose={action(`onClose: ${label}`)}\n              onClick={action(`onClick: ${label}`)}\n              type=\"action\"\n              name={'chip'}\n            />\n            <br />\n            <Text weight=\"strong\">{`Disabled: ${booleanvalue}`}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Chip",
      "code": "import { Chip, Text } from '@innovaccer/design-system';\n    () => {\n  const icon = 'assessment';\n  const label = 'Input';\n  return (\n    <div className=\"d-flex\">\n      {BooleanValue.map((booleanvalue, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Chip\n              icon={icon}\n              label={label}\n              clearButton={true}\n              disabled={booleanvalue}\n              type=\"input\"\n              onClose={action(`onClose: ${label}`)}\n              onClick={action(`onClick: ${label}`)}\n              name={'chip'}\n            />\n            <br />\n            <Text weight=\"strong\">{`Disabled: ${booleanvalue}`}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Chip",
      "code": "import { Chip, Text } from '@innovaccer/design-system';\n    () => {\n  const icon = 'assessment';\n  const label = 'Selection';\n  return (\n    <div className=\"d-flex\">\n      {BooleanValue.map((booleanvalue, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Chip\n              icon={icon}\n              label={label}\n              clearButton={true}\n              disabled={booleanvalue}\n              type=\"selection\"\n              onClose={action(`onClose: ${label}`)}\n              onClick={action(`onClick: ${label}`)}\n              selected={false}\n              name={'chip'}\n            />\n            <br />\n            <Text weight=\"strong\">{`Disabled: ${booleanvalue}`}</Text>\n          </div>\n        );\n      })}\n      <div className=\"mr-9\">\n        <Chip\n          icon={icon}\n          label={label}\n          clearButton={true}\n          type=\"selection\"\n          onClose={action(`onClose: ${label}`)}\n          onClick={action(`onClick: ${label}`)}\n          selected={true}\n          name={'chip'}\n        />\n        <br />\n        <Text weight=\"strong\">Selected: true</Text>\n      </div>\n      <div className=\"mr-9\">\n        <Chip\n          icon={icon}\n          label={label}\n          clearButton={true}\n          type=\"selection\"\n          onClose={action(`onClose: ${label}`)}\n          onClick={action(`onClick: ${label}`)}\n          selected={true}\n          disabled={true}\n          name={'chip'}\n        />\n        <br />\n        <Text weight=\"strong\">Selected: true</Text>\n        <br></br>\n        <Text weight=\"strong\">Disabled: true</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Chip",
      "code": "import { Chip, Text } from '@innovaccer/design-system';\n    () => {\n  const types = ['action', 'selection', 'input'];\n  const icon = 'assessment';\n  const label = 'ChipLabel';\n  const clearButton = true;\n  const disabled = false;\n  const selected = false;\n  return (\n    <div className=\"d-flex\">\n      {types.map((type, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Chip\n              icon={icon}\n              label={label}\n              clearButton={clearButton}\n              disabled={disabled}\n              type={type}\n              onClose={action(`onClose: ${label}`)}\n              onClick={action(`onClick: ${label}`)}\n              selected={selected}\n              name={'chip'}\n            />\n            <br />\n            <Text weight=\"strong\">{type.charAt(0).toUpperCase() + type.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "chipgroup": [
    {
      "query": "ChipGroup All",
      "code": "import { ChipGroup } from '@innovaccer/design-system';\n    () => {\n  const type = ['action', 'input', 'selection'];\n  const list = [\n    {\n      label: 'Action',\n      icon: 'assessment',\n      disabled: false,\n      type: type[0],\n      name: '1',\n    },\n    {\n      label: 'Input',\n      icon: 'assessment',\n      clearButton: true,\n      disabled: false,\n      type: type[1],\n      name: '2',\n    },\n    {\n      label: 'Selection',\n      icon: 'assessment',\n      clearButton: true,\n      disabled: false,\n      type: type[2],\n      selected: true,\n      name: '3',\n    },\n    {\n      label: 'Selection',\n      icon: 'assessment',\n      clearButton: true,\n      disabled: false,\n      type: type[2],\n      name: '4',\n    },\n  ];\n\n  return <ChipGroup onClose={action(`onClose event`)} onClick={action(`onClick event`)} list={list} />;\n}\n    "
    }
  ],
  "chipinput": [
    {
      "query": "ChipInput All",
      "code": "import { ChipInput } from '@innovaccer/design-system';\n    () => {\n  const allowDuplicates = false;\n  const placeholder = 'Add value';\n  const disabled = false;\n\n  return (\n    <ChipInput\n      allowDuplicates={allowDuplicates}\n      placeholder={placeholder}\n      disabled={disabled}\n      chipOptions={{ clearButton: true }}\n    />\n  );\n}\n    "
    },
    {
      "query": "ChipInput Chips In Single Line",
      "code": "import { Label, ChipInput } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState(['Anyone', 'Person with disability']);\n\n  return (\n    <>\n      <Label withInput={true}>Population Focus</Label>\n      <ChipInput\n        value={value}\n        chipOptions={{ clearButton: true }}\n        onChange={setValue}\n      />\n    </>\n  );\n}\n    "
    },
    {
      "query": "ChipInput Chips Wrapped To Next Line",
      "code": "import { Row, Column, Label, ChipInput } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState(\n    ['Anyone', 'Person with disability', 'Retired person from the armed forces']\n  );\n\n  return (\n    <Row>\n      <Column size={4}>\n        <Label withInput={true}>Population Focus</Label>\n        <ChipInput\n          value={value}\n          chipOptions={{ clearButton: true }}\n          onChange={setValue}\n        />\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "ChipInput   Controlled",
      "code": "import { ChipInput } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState(['1024', '80']);\n\n  return (\n    <ChipInput\n      value={value}\n      placeholder=\"Add value\"\n      chipOptions={{ clearButton: true }}\n      onChange={setValue}\n    />\n  );\n}\n    "
    },
    {
      "query": "ChipInput   Disabled",
      "code": "import { ChipInput } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState(['1024', '80']);\n\n  return (\n    <ChipInput\n      value={value}\n      chipOptions={{ clearButton: true }}\n      onChange={setValue}\n      disabled={true}\n    />\n  );\n}\n    "
    }
  ],
  "choicelist": [
    {
      "query": "ChoiceList All",
      "code": "import { ChoiceList } from '@innovaccer/design-system';\n    () => {\n  const label = 'Gender';\n  const gender = [\n    { label: 'Male', name: 'gender', value: 'Male' },\n    { label: 'Female', name: 'gender', value: 'Female' },\n    { label: 'Other', name: 'gender', value: 'Other' },\n  ];\n\n  return <ChoiceList choices={gender} title={label} onChange={() => {}} />;\n}\n    "
    },
    {
      "query": "ChoiceList Alignment",
      "code": "import { ChoiceList } from '@innovaccer/design-system';\n    () => {\n  const label = 'Gender';\n  const alignmentHorizontal = 'horizontal';\n  const gender = [\n    { label: 'Male', name: 'gender', value: 'Male' },\n    { label: 'Female', name: 'gender', value: 'Female' },\n    { label: 'Other', name: 'gender', value: 'Other' },\n  ];\n  const alignmentVertical = 'vertical';\n  const allGender = [\n    { label: 'Male', name: 'allGender', value: 'Male' },\n    { label: 'Female', name: 'allGender', value: 'Female' },\n    { label: 'Other', name: 'allGender', value: 'Other' },\n  ];\n\n  return (\n    <>\n      <ChoiceList choices={gender} title={label} alignment={alignmentHorizontal} onChange={() => {}} />\n      <div className=\"mt-8\">\n        <ChoiceList choices={allGender} title={label} alignment={alignmentVertical} onChange={() => {}} />\n      </div>\n    </>\n  );\n}\n    "
    },
    {
      "query": "ChoiceList Allow Multiple",
      "code": "import { ChoiceList } from '@innovaccer/design-system';\n    () => {\n  const label = 'Days';\n  const alignment = 'horizontal';\n  const days = [\n    { label: 'Mon', name: 'days', value: 'mon' },\n    { label: 'Tue', name: 'days', value: 'tue' },\n    { label: 'Wed', name: 'days', value: 'wed' },\n    { label: 'Thu', name: 'days', value: 'thu' },\n    { label: 'Fri', name: 'days', value: 'fri' },\n    { label: 'Sat', name: 'days', value: 'sat' },\n    { label: 'Sun', name: 'days', value: 'sun' },\n  ];\n\n  return <ChoiceList choices={days} title={label} alignment={alignment} allowMultiple={true} onChange={() => {}} />;\n}\n    "
    },
    {
      "query": "ChoiceList Controlled",
      "code": "import { ChoiceList } from '@innovaccer/design-system';\n    () => {\n  const label = 'Gender';\n  const alignmentHorizontal = 'horizontal';\n  const days = [\n    { label: 'Mon', name: 'days', value: 'mon' },\n    { label: 'Tue', name: 'days', value: 'tue' },\n    { label: 'Wed', name: 'days', value: 'wed' },\n    { label: 'Thu', name: 'days', value: 'thu' },\n    { label: 'Fri', name: 'days', value: 'fri' },\n    { label: 'Sat', name: 'days', value: 'sat' },\n    { label: 'Sun', name: 'days', value: 'sun' },\n  ];\n\n  return (\n    <>\n      <ChoiceList\n        selected={['mon', 'wed', 'sat']}\n        choices={days}\n        allowMultiple={true}\n        title={label}\n        alignment={alignmentHorizontal}\n        onChange={() => {}}\n      />\n    </>\n  );\n}\n    "
    }
  ],
  "collapsible": [
    {
      "query": "Collapsible All",
      "code": "import { Collapsible, Icon, Text } from '@innovaccer/design-system';\n    () => {\n  const [expanded, setExpanded] = React.useState(false);\n  return (\n      <Collapsible\n        expanded={expanded}\n        height=\"100vh\"\n        onToggle={setExpanded}\n      >\n        <div className=\"d-flex pt-4\">\n          <Icon name=\"events\" className=\"d-flex align-items-center px-6 Text--regular\" />\n          {expanded && (\n            <Text className=\"mr-6\">Collapsible</Text>\n          )}\n        </div>\n      </Collapsible>\n  );\n}\n    "
    },
    {
      "query": "Collapsible Custom Trigger",
      "code": "import { Icon, Heading, Collapsible, Text } from '@innovaccer/design-system';\n    () => {\n  const [expanded, setExpanded] = React.useState(false);\n\n  return (\n    <div>\n      <div className='d-flex align-items-center mb-3'>\n        <Icon name=\"menu\" className=\"cursor-pointer\" onClick={() => setExpanded(!expanded) }></Icon>\n        <Heading size='s' className=\"ml-4\">Click to Open</Heading>\n      </div>\n      <Collapsible withTrigger={false} expanded={expanded} height=\"100vh\">\n        <div className=\"d-flex pt-4\">\n          <Icon name=\"events\" className=\"d-flex align-items-center px-6 Text--regular\" />\n          {expanded && <Text className=\"mr-6\">Collapsible</Text>}\n        </div>\n        </Collapsible>\n    </div>\n  );\n}\n    "
    }
  ],
  "datepicker": [
    {
      "query": "DatePicker All",
      "code": "import { DatePicker, Card } from '@innovaccer/design-system';\n    () => {\n  const withInput = false;\n\n  const open = false;\n\n  const closeOnSelect = true;\n\n  const inputFormat = 'dd-mm-yyyy';\n\n  const outputFormat = 'yyyy-mm-dd';\n\n  const dateValue = undefined;\n\n  const view = 'month';\n\n  const firstDayOfWeek = 'sunday';\n\n  const disabledBefore = new Date('Jan 20 2015');\n\n  const disabledAfter = new Date('Jan 20 2028');\n\n  const jumpView = true;\n\n  const yearNav = -1;\n\n  const monthNav = -1;\n\n  const attr = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  if (withInput) {\n    return (\n      <DatePicker\n        withInput={withInput}\n        closeOnSelect={closeOnSelect}\n        open={open}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        date={dateValue}\n        onDateChange={(currDate) => action(`on date change : ${currDate}`)()}\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        {...attr}\n      />\n    );\n  }\n  return (\n    <Card className=\"d-inline-flex\" shadow=\"light\">\n      <DatePicker\n        withInput={withInput}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        date={dateValue}\n        onDateChange={(currDate) => action(`on date change : ${currDate}`)()}\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        {...attr}\n      />\n    </Card>\n  );\n}\n    "
    },
    {
      "query": "DatePicker",
      "code": "import { Card, DatePicker } from '@innovaccer/design-system';\n    () => {\n  const values = ['year', 'month', 'date'];\n\n  return (\n    <div className=\"d-flex\">\n      {values.map((v, index) => (\n        <div key={index} className=\"mr-5\">\n          <Card className=\"d-inline-flex\" shadow=\"light\">\n            <DatePicker date={new Date(2020, 2, 1)} view={v} />\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "DatePicker   With Input",
      "code": "import { DatePicker } from '@innovaccer/design-system';\n    () => {\n  const dateValue = undefined;\n\n  const inputFormat = 'mm/dd/yyyy';\n\n  const outputFormat = 'yyyy/mm/dd';\n\n  const view = 'date';\n\n  const firstDayOfWeek = 'saturday';\n\n  const disabledBefore = new Date('Jan 20 2015');\n\n  const disabledAfter = new Date('Jan 20 2028');\n\n  const jumpView = true;\n\n  const yearNav = -1;\n\n  const monthNav = -1;\n\n  const closeOnSelect = true;\n\n  const attr = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  return (\n    <div className=\"w-25\">\n      <DatePicker\n        withInput={true}\n        closeOnSelect={closeOnSelect}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        date={dateValue}\n        onDateChange={(currDate, currValue) => {\n          action(`on date change : ${currDate} --- ${currValue}`)();\n        }}\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        inputOptions={{\n          required: true,\n        }}\n        {...attr}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Date and time picker",
      "code": "import { Label, DatePicker, Dropdown } from '@innovaccer/design-system';\n    \n\n() => {\n  class DateTimePicker extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        open: false,\n        date: undefined,\n        time: undefined\n      };\n    }\n\n    onDateChange(date, dateVal) {\n      this.setState({\n        date: dateVal,\n        open: !!date\n      });\n    }\n\n    onPopperToggle(val) {\n      this.setState({\n        open: val\n      });\n    }\n\n    onChangeHandler(selected) {\n      this.setState({\n        time: selected\n      });\n    }\n\n    render() {\n      const timeValues = ['10:00 AM', '10:30 AM', '11:00 AM', '11:30 AM', '12:00 PM', '12:30 PM', '01:00 PM', '01:30 PM'];\n      const {\n        open\n      } = this.state;\n\n      console.log(\"Date\", this.state.date, \"Time\", this.state.time);\n\n      return (\n        <div className=\"d-flex\">\n          <div className=\"d-flex flex-column\">\n            <Label withInput>Date</Label>\n            <DatePicker\n              withInput={true}\n              onDateChange={this.onDateChange.bind(this)}\n            />\n          </div>\n          <div className=\"d-flex flex-column ml-5\" style={{width: 'var(--spacing-8)'}}>\n            <Label withInput>Time</Label>\n            <Dropdown\n              open={open}\n              onPopperToggle={this.onPopperToggle.bind(this)}\n              options={timeValues.map(value => ({label: value, value}))}\n              onChange={this.onChangeHandler.bind(this)}\n            />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  return <DateTimePicker />\n}\n    "
    }
  ],
  "daterangepicker": [
    {
      "query": "DateRangePicker All",
      "code": "import { DateRangePicker, Card } from '@innovaccer/design-system';\n    () => {\n  const withInput = false;\n\n  const open = false;\n\n  const monthsInView = withInput ? 2 : 1;\n\n  const inputFormat = 'dd/mm/yyyy';\n\n  const outputFormat = 'mm/dd/yyyy';\n\n  const startDate = new Date('Jan 20 2015');\n\n  const endDate = new Date('Jan 27 2015');\n\n  const view = 'month';\n\n  const rangeLimit = 0;\n\n  const firstDayOfWeek = 'thursday';\n\n  const disabledBefore = new Date('Jan 20 2015');\n\n  const disabledAfter = new Date('Jan 20 2028');\n\n  const jumpView = true;\n\n  const yearNav = -1;\n\n  const monthNav = -1;\n\n  const attr = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (rangeLimit) attr.rangeLimit = rangeLimit;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  if (withInput) {\n    return (\n      <DateRangePicker\n        withInput={withInput}\n        open={open}\n        monthsInView={monthsInView}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        startDate={startDate}\n        endDate={endDate}\n        onRangeChange={(sDate, eDate, sValue, eValue) =>\n          action(`on range change: ${sDate} - ${eDate} ---- ${sValue} - ${eValue}`)()\n        }\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        {...attr}\n      />\n    );\n  }\n  return (\n    <Card className=\"d-inline-flex\" shadow=\"light\">\n      <DateRangePicker\n        withInput={withInput}\n        monthsInView={monthsInView}\n        jumpView={jumpView}\n        startDate={startDate}\n        endDate={endDate}\n        onRangeChange={(sDate, eDate, sValue, eValue) =>\n          action(`on range change: ${sDate} - ${eDate} ---- ${sValue} - ${eValue}`)()\n        }\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        {...attr}\n      />\n    </Card>\n  );\n}\n    "
    },
    {
      "query": "DateRangePicker",
      "code": "import { Card, DateRangePicker } from '@innovaccer/design-system';\n    () => {\n  // to freeze the object for typescript\n\n  return (\n    <div className=\"d-flex flex-column\">\n      {Array.from([1, 2, 3], (x, key) => (\n        <div key={key} className=\"mt-5 align-self-start\">\n          <Card className=\"d-inline-flex\" shadow=\"light\">\n            <DateRangePicker\n              monthsInView={x}\n              startDate={new Date(2019, 11, 3)}\n              endDate={new Date(2020, x - 2, 11)}\n              yearNav={2019}\n              monthNav={11}\n            />\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "DateRangePicker",
      "code": "import { Card, DateRangePicker } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex mr-9\">\n      <Card className=\"d-inline-flex\" shadow=\"light\">\n        <DateRangePicker\n          startDate={new Date(2020, 2, 3)}\n          endDate={new Date(2020, 2, 11)}\n          rangeLimit={7}\n          yearNav={2020}\n          monthNav={2}\n        />\n      </Card>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "DateRangePicker",
      "code": "import { Card, DateRangePicker } from '@innovaccer/design-system';\n    () => {\n  const values = ['year', 'month', 'date'];\n\n  return (\n    <div className=\"d-flex\">\n      {values.map((v, index) => (\n        <div className=\"mr-9\" key={index}>\n          <Card className=\"d-inline-flex\" shadow=\"light\">\n            <DateRangePicker\n              startDate={new Date(2020, 2, 3)}\n              endDate={new Date(2020, 2, 11)}\n              view={v}\n              yearNav={2020}\n              monthNav={2}\n            />\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "DateRangePicker   With Input",
      "code": "import { DateRangePicker } from '@innovaccer/design-system';\n    () => {\n  const monthsInView = 2;\n\n  const startDate = new Date('Jan 12 2017');\n\n  const endDate = new Date('Jan 20 2017');\n\n  const inputFormat = 'mm-dd-yyyy';\n\n  const outputFormat = 'yyyy-mm-dd';\n\n  const view = 'year';\n\n  const firstDayOfWeek = 'monday';\n\n  const disabledBefore = new Date('Jan 20 2015');\n\n  const disabledAfter = new Date('Jan 20 2028');\n\n  const jumpView = true;\n\n  const yearNav = -1;\n\n  const monthNav = -1;\n\n  const attr = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  return (\n    <div className=\"w-75\">\n      <DateRangePicker\n        withInput={true}\n        startDate={startDate}\n        endDate={endDate}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        onRangeChange={(sDate, eDate, sValue, eValue) =>\n          action(`on range change: ${sDate} - ${eDate} ---- ${sValue} - ${eValue}`)()\n        }\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        monthsInView={monthsInView}\n        startInputOptions={{\n          required: true,\n        }}\n        endInputOptions={{\n          required: true,\n        }}\n        {...attr}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "DateRangePicker   With Single Input",
      "code": "import { DateRangePicker } from '@innovaccer/design-system';\n    () => {\n  const monthsInView = 2;\n\n  const startDate = new Date('Jan 20 2016');\n\n  const endDate = new Date('Jan 28 2016');\n\n  const inputFormat = 'dd/mm/yyyy';\n\n  const outputFormat = 'mm-dd-yyyy';\n\n  const view = 'date';\n\n  const firstDayOfWeek = 'monday';\n\n  const disabledBefore = new Date('Jan 20 2015');\n\n  const disabledAfter = new Date('Jan 20 2028');\n\n  const jumpView = true;\n\n  const yearNav = -1;\n\n  const monthNav = -1;\n\n  const open = false;\n\n  const attr = {};\n  if (disabledBefore) attr.disabledBefore = disabledBefore;\n  if (disabledAfter) attr.disabledAfter = disabledAfter;\n  if (yearNav !== -1) attr.yearNav = yearNav;\n  if (monthNav !== -1) attr.monthNav = monthNav;\n\n  return (\n    <div className=\"w-50\">\n      <DateRangePicker\n        withInput={true}\n        singleInput={true}\n        startDate={startDate}\n        endDate={endDate}\n        inputFormat={inputFormat}\n        outputFormat={outputFormat}\n        jumpView={jumpView}\n        onRangeChange={(sDate, eDate, sValue, eValue) =>\n          action(`on range change: ${sDate} - ${eDate} ---- ${sValue} - ${eValue}`)()\n        }\n        view={view}\n        firstDayOfWeek={firstDayOfWeek}\n        monthsInView={monthsInView}\n        inputOptions={{\n          required: true,\n          label: 'Date',\n        }}\n        {...attr}\n        open={open}\n      />\n    </div>\n  );\n}\n    "
    }
  ],
  "dialog": [
    {
      "query": "Dialog All",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Basic',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    dimension: 'large',\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Basic',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    dimension: 'medium',\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Basic',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    dimension: 'small',\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Basic',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonAppearance: 'alert',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Basic',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonAppearance: 'basic',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Basic',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonAppearance: 'primary',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Basic',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonAppearance: 'success',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Basic',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    primaryButtonAppearance: 'transparent',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Basic',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    secondaryButtonAppearance: 'alert',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Secondary',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    secondaryButtonAppearance: 'basic',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Secondary',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    secondaryButtonAppearance: 'primary',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Secondary',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    secondaryButtonAppearance: 'success',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Secondary',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dialog",
      "code": "import { Paragraph, Button, Dialog } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    open,\n    onClose,\n    icon: 'pan_tool',\n    heading: 'Heading',\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    secondaryButtonAppearance: 'transparent',\n    primaryButtonLabel: 'Primary',\n    secondaryButtonLabel: 'Secondary',\n  };\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br />\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br />\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open</Button>\n      </Paragraph>\n      <Dialog {...options} />\n    </div>\n  );\n}\n    "
    }
  ],
  "divider": [
    {
      "query": "Divider All",
      "code": "import { Row, Column, Card, CardBody, Heading, Divider, Text } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Row>\n      <Column size=\"10\">\n        <Card shadow=\"none\">\n          <CardBody className=\"p-0\">\n            <Row className=\"py-4 px-6\">\n              <Heading>Assessment Report</Heading>\n            </Row>\n\n            <Divider appearance=\"header\" />\n            <Row>\n              <Column>\n                <div className=\"p-6\">\n                  <Heading size=\"s\">Select Assessment</Heading>\n                </div>\n                <Divider />\n                <div className=\"pl-6\">\n                  <div className=\"py-4\">\n                    <Text>Functional Assessment - Initial</Text>\n                  </div>\n                  <Divider />\n\n                  <div className=\"py-4\">\n                    <Text>Social Influence of Health</Text>\n                  </div>\n                  <Divider />\n\n                  <div className=\"py-4\">\n                    <Text>Social Determinants of Health</Text>\n                  </div>\n                  <Divider />\n\n                  <div className=\"py-4\">\n                    <Text>Functional Assessment - Discharge</Text>\n                  </div>\n                </div>\n              </Column>\n              <Divider vertical={true} />\n\n              <Column>\n                <div className=\"p-6\">\n                  <Text appearance=\"disabled\">MSSP - Track 3</Text>\n                  <br />\n                  <Text small={true}>Medicare</Text>\n                  <br />\n                  <div className=\"pt-6\">\n                    <Text appearance=\"disabled\" small={true}>\n                      Subscriber\n                    </Text>\n                    <br />\n                    <Text appearance=\"disabled\">LAWSON, JOY (Self)</Text>\n                    <br />\n                    <Text weight=\"medium\">ZGP123456789</Text>\n                  </div>\n                </div>\n                <Divider />\n                <Row className=\"p-6\">\n                  <Column>\n                    <Text appearance=\"disabled\" small={true}>\n                      Last attr:\n                    </Text>\n                    <Text className=\"ml-3\" small={true}>\n                      04/19\n                    </Text>\n                  </Column>\n                  <Column>\n                    <Text appearance=\"disabled\" small={true}>\n                      Plan ID:\n                    </Text>\n                    <Text className=\"ml-3\" small={true}>\n                      040\n                    </Text>\n                  </Column>\n                </Row>\n              </Column>\n            </Row>\n          </CardBody>\n        </Card>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Divider Basic Divider In Card",
      "code": "import { Row, Column, Card, CardBody, Text, Badge, Divider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Row>\n      <Column size=\"9\">\n        <Card className=\"pt-6\" shadow=\"none\">\n          <CardBody>\n            <Row>\n              <Column size={10}>\n                <Text appearance=\"disabled\">MSSP - Track 3</Text>\n              </Column>\n              <Column size={2}>\n                <Badge appearance=\"success\" subtle={true}>\n                  ACTIVE\n                </Badge>\n              </Column>\n            </Row>\n            <br />\n            <Text small={true}>Medicare</Text>\n            <br />\n            <div className=\"py-6\">\n              <Text appearance=\"disabled\" small={true}>\n                Subscriber\n              </Text>\n              <br />\n              <Text appearance=\"disabled\">LAWSON, JOY (Self)</Text>\n              <br />\n              <Text weight=\"medium\">ZGP123456789</Text>\n            </div>\n          </CardBody>\n\n          {/* Horizontal Divider */}\n          <Divider />\n\n          <CardBody className=\"py-4\">\n            <Row>\n              <Column>\n                <Text appearance=\"disabled\" small={true}>\n                  Last attr:\n                </Text>\n                <Text className=\"ml-3\" small={true}>\n                  04/19\n                </Text>\n              </Column>\n              <Column>\n                <Text appearance=\"disabled\" small={true}>\n                  Plan ID:\n                </Text>\n                <Text className=\"ml-3\" small={true}>\n                  040\n                </Text>\n              </Column>\n              <Column>\n                <Text appearance=\"disabled\" small={true}>\n                  Payer ID:\n                </Text>\n                <Text className=\"ml-3\" small={true}>\n                  001\n                </Text>\n              </Column>\n            </Row>\n          </CardBody>\n        </Card>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Divider Header Divider In Card",
      "code": "import { Row, Column, Card, CardBody, Heading, Divider, Radio } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Row>\n      <Column size=\"6\">\n        <Card className=\"pb-6\" shadow=\"none\">\n          <CardBody className=\"p-0\">\n            <Row className=\"p-4\">\n              <Heading size=\"s\">Section 1</Heading>\n            </Row>\n\n            <Divider appearance=\"header\" />\n\n            <div className=\"px-4 pt-4\">\n              <Heading size=\"s\">1. Little interest or pleasure in doing things.</Heading>\n              <br />\n              <Column className=\"px-4\">\n                <Radio defaultChecked={true} label=\"Not at all\" name=\"section\" size=\"regular\" value=\"Not at all\" />\n                <Radio label=\"Several Days\" name=\"section\" size=\"regular\" value=\"Several Days\" />\n                <Radio label=\"More than half the days\" name=\"section\" size=\"regular\" value=\"More than half days\" />\n              </Column>\n            </div>\n          </CardBody>\n        </Card>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Divider Indented Divider",
      "code": "import { Row, Column, Heading, Card, CardBody, Input, Divider, Text } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Row>\n      <Column size=\"8\">\n        <Heading size=\"m\">Select assessment</Heading>\n        <Card>\n          <CardBody className=\"p-0\">\n            <Row className=\"p-6\">\n              <Column size={8}>\n                <Input className=\"w-25\" icon=\"search\" name=\"input\" placeholder=\"Search\" />\n              </Column>\n            </Row>\n\n            <Divider appearance=\"header\" />\n\n            <div className=\"pl-6\">\n              <div className=\"py-6\">\n                <Text>Functional Assessment - Initial</Text>\n              </div>\n              <Divider />\n\n              <div className=\"py-6\">\n                <Text>Functional Assessment - Discharge</Text>\n              </div>\n              <Divider />\n\n              <div className=\"py-6\">\n                <Text>Social Influence of Health</Text>\n              </div>\n              <Divider />\n\n              <div className=\"py-6\">\n                <Text>Social Determinants of Health</Text>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Divider variants Horizontal Divider",
      "code": "import { Row, Column, Divider, Text } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <Row>\n        <Column className=\"p-6\">\n          <Divider />\n          <br />\n          <Text weight=\"strong\">Default Divider</Text>\n        </Column>\n\n        <Column className=\"p-6\">\n          <Divider appearance=\"header\" />\n          <br />\n          <Text weight=\"strong\">Header Divider</Text>\n        </Column>\n      </Row>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Divider Vertical Divider",
      "code": "import { Row, Column, Card, CardBody, Text, Divider, Heading, Radio } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Row>\n      <Column size=\"10\">\n        <Card shadow=\"none\">\n          <CardBody className=\"p-0\">\n            <Row>\n              <Column className=\"p-6\">\n                <Text appearance=\"disabled\">MSSP - Track 3</Text>\n                <br />\n                <Text small={true}>Medicare</Text>\n                <br />\n                <div className=\"pt-6\">\n                  <Text appearance=\"disabled\" small={true}>\n                    Subscriber\n                  </Text>\n                  <br />\n                  <Text appearance=\"disabled\">LAWSON, JOY (Self)</Text>\n                  <br />\n                  <Text weight=\"medium\">ZGP123456789</Text>\n                </div>\n              </Column>\n\n              <Divider vertical={true} />\n\n              <Column className=\"p-6\">\n                <div>\n                  <Heading size=\"s\">1. Little interest or pleasure in doing things.</Heading>\n                  <br />\n                  <Column className=\"px-4\">\n                    <Radio defaultChecked={true} label=\"Not at all\" name=\"section\" size=\"regular\" value=\"Not at all\" />\n                    <Radio label=\"Several Days\" name=\"section\" size=\"regular\" value=\"Several Days\" />\n                    <Radio label=\"More than half the days\" name=\"section\" size=\"regular\" value=\"More than half days\" />\n                  </Column>\n                </div>\n              </Column>\n            </Row>\n          </CardBody>\n        </Card>\n      </Column>\n    </Row>\n  );\n}\n    "
    }
  ],
  "dropdown": [
    {
      "query": "Dropdown All",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const dropdownOptions =  [];\n  for (let i = 1; i <= 100; i++) {\n    dropdownOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      group: i >= 1 && i <= 40 ? 'Group 1' : 'Group 2',\n      icon: 'events',\n      subInfo: 'subInfo',\n    });\n  }\n\n  const getSearchedOptions = (options, searchTerm) => {\n    const result = options.filter((option) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise(resolve => {\n      this.window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  return (\n    <div className='w-25 pb-14'>\n      <Dropdown\n        fetchOptions={fetchOptions}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Label, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Male',\n      value: 'Male',\n    },\n    {\n      label: 'Female',\n      value: 'Female',\n    },\n    {\n      label: 'Transgender',\n      value: 'Transgender',\n    },\n    {\n      label: 'Others',\n      value: 'Others',\n    },\n  ];\n  return (\n    <div className=\"mb-10 w-25\">\n      <Label withInput={true}>Gender</Label>\n      <Dropdown options={options} searchPlaceholder=\"Search Gender\" withSearch={true} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Edit',\n      value: 'edit',\n    },\n    {\n      label: 'Export',\n      value: 'export',\n    },\n    {\n      label: 'Delete',\n      value: 'delete',\n    },\n  ];\n  return (\n    <div className=\"d-flex w-50\">\n      <Dropdown options={options} menu={true} className=\"mr-5\" align=\"right\" maxWidth={130} />\n      <Dropdown options={options} menu={true} align=\"left\" className=\"mr-5\" maxWidth={130} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    { label: 'Below 18', subInfo: 'People below 18 years old', value: 'below_18', optionType: 'WITH_META' },\n    { label: '19 - 35', subInfo: 'People 19-35 years old', value: '19-35', optionType: 'WITH_META' },\n    { label: '36 - 55', subInfo: 'People 36-55 years old', value: '36-55', optionType: 'WITH_META' },\n    { label: '56 and above', subInfo: 'People above 56 years old', value: '56_above', optionType: 'WITH_META' },\n  ];\n  return (\n    <div className=\"d-flex w-50\">\n      <Dropdown options={options} menu={true} className=\"mr-5\" align=\"right\" />\n      <Dropdown options={options} menu={true} className=\"mr-5\" align=\"right\" />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Below 18',\n      value: 'below_18',\n    },\n    {\n      label: '19 - 35',\n      value: '19-35',\n    },\n    {\n      label: '36 - 55',\n      value: '36-55',\n    },\n    {\n      label: '56 and above',\n      value: '56_above',\n    },\n  ];\n  return <Dropdown options={options} withCheckbox={true} className=\"w-25\" placeholder=\"Select\" />;\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Below 18',\n      value: 'below_18',\n      subInfo: 'People below 18 years old',\n    },\n    {\n      label: '19 - 35',\n      value: '19-35',\n      subInfo: 'People 19-35 years old',\n    },\n    {\n      label: '36 - 55',\n      value: '36-55',\n      subInfo: 'People 36-55 years old',\n    },\n    {\n      label: '56 and above',\n      value: '56_above',\n      subInfo: 'People above 56 years old',\n    },\n  ];\n  return <Dropdown options={options} withCheckbox={true} className=\"w-25\" placeholder=\"Select\" />;\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Not yet helped',\n      value: 'not_yet_helped',\n      icon: 'more_horiz',\n    },\n    {\n      label: 'Eligible',\n      value: 'eligible',\n      icon: 'add',\n    },\n    {\n      label: 'Not Eligible',\n      value: 'not_eligible',\n      icon: 'horizontal_rule',\n    },\n    {\n      label: 'Got help',\n      value: 'got_help',\n      icon: 'check',\n    },\n  ];\n  return <Dropdown options={options} optionType=\"WITH_ICON\" className=\"w-25\" placeholder=\"Select status\" />;\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Lawson, Joy',\n      value: 'Lawson_Joy',\n      subInfo: 'Patient',\n    },\n    {\n      label: 'West, Sarah',\n      value: 'West_Sarah',\n      subInfo: 'Primary Care Physician',\n    },\n    {\n      label: 'Powell, Lauren',\n      value: 'Powell_Lauren',\n      subInfo: 'Care Manager',\n    },\n  ];\n\n  return <Dropdown options={options} optionType=\"WITH_META\" className=\"w-25\" placeholder=\"Select Recipient\" />;\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [];\n  for (let i=1; i <= 50; i++) {\n    options.push({\n      label: `Option ${i}`,\n      value: `Option${i}`\n    })\n  }\n\n  return (\n    <Dropdown\n      options={options}\n      withCheckbox={true}\n      withSearch={true}\n      className=\"w-25\"\n      placeholder=\"Select\"\n  />\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [];\n  for (let i=1; i <= 100; i++) {\n    options.push({\n      label: `Option ${i}`,\n      value: `Option${i}`\n    })\n  }\n\n  const getSearchedOptions = (options, searchTerm) => {\n    const result = options.filter((option) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(options, searchTerm) : options;\n    return new Promise(resolve => {\n      this.window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  return (\n    <Dropdown\n      fetchOptions={fetchOptions}\n      withCheckbox={true}\n      className=\"w-25\"\n      placeholder=\"Select\"\n  />\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Cardiovascular',\n      value: 'Cardiovascular',\n    },\n    {\n      label: 'Communication impediments: hearing and vision loss, low literacy',\n      value: 'Communication impediments: hearing and vision loss, low literacy',\n    },\n    {\n      label: 'Community resource availability',\n      value: 'Community resource availability',\n    },\n    {\n      label: 'Depression and anxiety screenings',\n      value: 'Depression and anxiety screenings',\n    },\n    {\n      label: 'Obesity',\n      value: 'Obesity',\n    },\n    {\n      label: 'Diabetes',\n      value: 'Diabetes',\n    },\n    {\n      label: 'Gastrointestinal system',\n      value: 'Gastrointestinal system',\n    },\n    {\n      label: 'Patient has suicidal thoughts',\n      value: 'Patient has suicidal thoughts',\n    },\n    {\n      label: 'LTSS needs',\n      value: 'LTSS needs',\n    },\n    {\n      label: 'Medication regimen',\n      value: 'Medication regimen',\n    },\n  ];\n  return (\n    <Dropdown\n      options={options}\n      withSearch={true}\n      className=\"w-25\"\n      placeholder=\"Select problem\"\n      withCheckbox={true}\n      showApplyButton={true}\n    />\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Label, Dropdown, HelpText } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Alabama (205)',\n      value: 'Alabama (205)',\n    },\n    {\n      label: 'Alabama (251)',\n      value: 'Alabama (251)',\n    },\n    {\n      label: 'Alabama (256)',\n      value: 'Alabama (256)',\n    },\n    {\n      label: 'Alabama (334)',\n      value: 'Alabama (334)',\n    },\n    {\n      label: 'Alabama (938)',\n      value: 'Alabama (938)',\n    },\n    {\n      label: 'Arizona (520)',\n      value: 'Arizona (520)',\n    },\n    {\n      label: 'California (209)',\n      value: 'California (209)',\n    },\n    {\n      label: 'California (408)',\n      value: 'California (408)',\n    },\n    {\n      label: 'Colorado (719)',\n      value: 'Colorado (719)',\n    },\n    {\n      label: 'Connecticut (860)',\n      value: 'Connecticut (860)',\n    },\n  ];\n  return (\n    <>\n      <Label withInput={true}>Area code</Label>\n      <div className=\"w-25\">\n        <Dropdown options={options} withSearch={true} placeholder=\"Select an area code\" />\n        <HelpText message={'If the number with this code is not available, we will use the next best match'} />\n      </div>\n    </>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Alabama',\n      value: 'AL',\n    },\n    {\n      label: 'Alaska',\n      value: 'AK',\n    },\n    {\n      label: 'Arizona',\n      value: 'AZ',\n    },\n    {\n      label: 'Arkansas',\n      value: 'AR',\n    },\n    {\n      label: 'California',\n      value: 'CO',\n    },\n    {\n      label: 'Connecticut',\n      value: 'CT',\n    },\n    {\n      label: 'Delaware',\n      value: 'DE',\n    },\n    {\n      label: 'Florida',\n      value: 'FL',\n    },\n    {\n      label: 'Georgia',\n      value: 'GA',\n    },\n    {\n      label: 'Hawaii',\n      value: 'HI',\n    },\n    {\n      label: 'Idaho',\n      value: 'ID',\n    },\n    {\n      label: 'Illinois',\n      value: 'IL',\n    },\n    {\n      label: 'Indiana',\n      value: 'IN',\n    },\n    {\n      label: 'Iowa',\n      value: 'IA',\n    },\n    {\n      label: 'Kansas',\n      value: 'KS',\n    },\n    {\n      label: 'Kentucky',\n      value: 'KY',\n    },\n    {\n      label: 'Louisiana',\n      value: 'LA',\n    },\n    {\n      label: 'Maine',\n      value: 'ME',\n    },\n    {\n      label: 'Maryland',\n      value: 'KY',\n    },\n    {\n      label: 'Massachusetts',\n      value: 'MA',\n    },\n    {\n      label: 'Michigan',\n      value: 'MI',\n    },\n    {\n      label: 'Minnesota',\n      value: 'MN',\n    },\n    {\n      label: 'Mississippi',\n      value: 'MS',\n    },\n    {\n      label: 'Missouri',\n      value: 'MO',\n    },\n    {\n      label: 'Montana',\n      value: 'MT',\n    },\n    {\n      label: 'Nebraska',\n      value: 'NE',\n    },\n    {\n      label: 'Nevada',\n      value: 'NV',\n    },\n    {\n      label: 'New Hampshire',\n      value: 'NT',\n    },\n    {\n      label: 'New Jersey',\n      value: 'NJ',\n    },\n    {\n      label: 'New Mexico',\n      value: 'NM',\n    },\n    {\n      label: 'New York',\n      value: 'NY',\n    },\n    {\n      label: 'North Carolina',\n      value: 'NC',\n    },\n    {\n      label: 'North Dakota',\n      value: 'ND',\n    },\n    {\n      label: 'Ohio',\n      value: 'OH',\n    },\n    {\n      label: 'Oklahoma',\n      value: 'OK',\n    },\n    {\n      label: 'Oregon',\n      value: 'OR',\n    },\n    {\n      label: 'Pennsylvania',\n      value: 'PA',\n    },\n    {\n      label: 'Rhode Island',\n      value: 'RI',\n    },\n    {\n      label: 'South Carolina',\n      value: 'SC',\n    },\n    {\n      label: 'South Dakota',\n      value: 'SD',\n    },\n    {\n      label: 'Tennessee',\n      value: 'TN',\n    },\n    {\n      label: 'Texas',\n      value: 'TX',\n    },\n    {\n      label: 'Utah',\n      value: 'UT',\n    },\n    {\n      label: 'Vermont',\n      value: 'VT',\n    },\n    {\n      label: 'Virginia',\n      value: 'VA',\n    },\n    {\n      label: 'Washington',\n      value: 'WA',\n    },\n    {\n      label: 'West Virginia',\n      value: 'WV',\n    },\n    {\n      label: 'Wisconsin',\n      value: 'WI',\n    },\n    {\n      label: 'Wyoming',\n      value: 'WY',\n    },\n  ];\n  return (\n    <Dropdown options={options} icon=\"location_on\" className=\"w-25\" placeholder=\"Select state\" staticLimit={100} />\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Label, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Male',\n      value: 'Male',\n      selected: true,\n    },\n    {\n      label: 'Female',\n      value: 'Female',\n    },\n  ];\n  return (\n    <div className=\"mb-10 w-25\">\n      <Label withInput={true}>Gender</Label>\n      <Dropdown options={options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'All',\n      value: 'all',\n      selected: true,\n    },\n    {\n      label: 'Draft',\n      value: 'draft',\n    },\n    {\n      label: 'In Progress',\n      value: 'in_progress',\n    },\n    {\n      label: 'Sent',\n      value: 'sent',\n    },\n    {\n      label: 'Scheduled',\n      value: 'scheduled',\n    },\n    {\n      label: 'Partially Failed',\n      value: 'partially_failed',\n    },\n    {\n      label: 'Completely Failed',\n      value: 'completely_failed',\n    },\n  ];\n  return (\n    <div>\n      <Dropdown options={options} className=\"w-25\" inlineLabel=\"Status\" withCheckbox={true} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Label, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'All',\n      value: 'all',\n      selected: true,\n    },\n    {\n      label: 'Draft',\n      value: 'draft',\n    },\n    {\n      label: 'In Progress',\n      value: 'in_progress',\n    },\n    {\n      label: 'Sent',\n      value: 'sent',\n    },\n    {\n      label: 'Scheduled',\n      value: 'scheduled',\n    },\n    {\n      label: 'Partially Failed',\n      value: 'partially_failed',\n    },\n    {\n      label: 'Completely Failed',\n      value: 'completely_failed',\n    },\n  ];\n  return (\n    <div>\n      <div className=\"w-25 mb-9\">\n        <Label withInput={true}>Status</Label>\n        <Dropdown options={options} className=\"w-100\" withCheckbox={true} />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Label, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Hindi',\n      value: 'Hindi',\n    },\n    {\n      label: 'English',\n      value: 'English',\n    },\n    {\n      label: 'French',\n      value: 'French',\n    },\n  ];\n  return (\n    <div className=\"mb-11 w-25\">\n      <Label withInput={true}>Select Language</Label>\n      <Dropdown options={options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Financial',\n      value: 'financial',\n    },\n    {\n      label: 'Homeless',\n      value: 'homeless',\n    },\n    {\n      label: 'Lack of Benefits',\n      value: 'lack_of_benefits',\n    },\n    {\n      label: 'Lack of Employment',\n      value: 'lack_of_employment',\n    },\n    {\n      label: 'Lack of Understanding',\n      value: 'lack_of_understanding',\n    },\n  ];\n  return <Dropdown options={options} withSearch={true} className=\"w-25\" placeholder=\"Select barriers\" />;\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Draft',\n      value: 'draft',\n    },\n    {\n      label: 'In Progress',\n      value: 'in_progress',\n    },\n    {\n      label: 'Sent',\n      value: 'sent',\n    },\n    {\n      label: 'Scheduled',\n      value: 'scheduled',\n    },\n    {\n      label: 'Partially Failed',\n      value: 'partially_failed',\n    },\n    {\n      label: 'Completely Failed',\n      value: 'completely_failed',\n    },\n  ];\n  return <Dropdown options={options} className=\"w-25\" placeholder=\"Status\" />;\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'All',\n      value: 'All',\n    },\n    {\n      label: 'Pending',\n      value: 'Pending',\n    },\n    {\n      label: 'Completed',\n      value: 'Completed',\n    },\n  ];\n  return (\n    <div className=\"mb-11 w-25\">\n      <Dropdown options={options} placeholder=\"All Categories\" />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const storyOptions = [];\n  for (let i = 1; i <= 10; i++) {\n    storyOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      icon: 'events',\n      subInfo: 'subInfo'\n    });\n  }\n\n  return (\n    <div className='d-flex'>\n      <div className='mr-12'>\n        <Text weight=\"strong\">Towards Right</Text> <br /><br />\n        <Dropdown menu={true} options={storyOptions} align='right'/>\n      </div>\n      <div>\n        <Text weight=\"strong\">Towards Left</Text> <br /><br />\n        <Dropdown menu={true} options={storyOptions} align='left'/>\n      </div>\n    </div>\n  )\n}\n    "
    },
    {
      "query": "Controlled Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const dropdownOptions =  [];\n  for (let i = 1; i <= 100; i++) {\n    dropdownOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      group: i >= 1 && i <= 40 ? 'Group 1' : 'Group 2',\n      icon: 'events',\n      subInfo: 'subInfo',\n    });\n  }\n\n  const [selected, setSelected] = React.useState([dropdownOptions[3]]);\n  const [open, setOpen] = React.useState(false);\n\n  const getSearchedOptions = (options, searchTerm) => {\n    const result = options.filter((option) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise(resolve => {\n      this.window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  const onChangeHandler = (selectedValues) => {\n    console.log(selectedValues);\n  };\n\n  const onPopperToggle = (popperIsOpen, type) => {\n    setOpen(popperIsOpen);\n    console.log(`type: ${type}`);\n  }\n\n  const onUpdate = (type, options, recentSelected) => {\n    switch (type) {\n      case 'apply-selected':\n        setSelected(recentSelected);\n        return;\n      case 'cancel-selected':\n        console.log('cancel-clicked');\n      default:\n        return;\n    }\n  };\n\n  const onClose = (values) => {\n    console.log(`dropdown closed with selected values: ${values}`)\n  };\n\n  return (\n    <div className=\"w-25\">\n      <Text weight=\"strong\">{'Options > 50'}</Text><br /><br />\n      <Dropdown\n        fetchOptions={fetchOptions}\n        onPopperToggle={onPopperToggle}\n        onUpdate={onUpdate}\n        selected={selected}\n        onChange={onChangeHandler}\n        withCheckbox={true}\n        showApplyButton={true}\n        open={open}\n        onClose={onClose}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Controlled Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const dropdownOptions =  [];\n  for (let i = 1; i <= 100; i++) {\n    dropdownOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      group: i >= 1 && i <= 40 ? 'Group 1' : 'Group 2',\n      icon: 'events',\n      subInfo: 'subInfo',\n    });\n  }\n\n  const [selected, setSelected] = React.useState([dropdownOptions[3]]);\n  const [open, setOpen] = React.useState(false);\n\n  const onChangeHandler = (selectedValues) => {\n    console.log(selectedValues);\n  };\n\n  const onUpdate = (type, options, recentSelected) => {\n    switch (type) {\n      case 'apply-selected':\n        setOpen(!open);\n        setSelected(recentSelected);\n        return;\n      case 'cancel-selected':\n        setOpen(!open);\n        return action('cancel event triggered')();\n      default:\n        return;\n    }\n  };\n\n  const onPopperToggle = (isPopperOpen) => {\n    setOpen(isPopperOpen);\n  };\n\n  return (\n    <div className=\"w-25\">\n      <Text weight=\"strong\">{'Options <= 50'}</Text><br /><br />\n      <Dropdown\n        options={dropdownOptions.slice(0, 50)}\n        onPopperToggle={onPopperToggle}\n        onUpdate={onUpdate}\n        selected={selected}\n        onChange={onChangeHandler}\n        withCheckbox={true}\n        showApplyButton={true}\n        open={open}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Controlled Dropdown",
      "code": "import { Dropdown } from '@innovaccer/design-system';\n    () => {\n  const dropdownOptions =  [];\n  for (let i = 1; i <= 100; i++) {\n    dropdownOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      group: i >= 1 && i <= 40 ? 'Group 1' : 'Group 2',\n      icon: 'events',\n      subInfo: 'subInfo',\n    });\n  }\n\n  const [selected, setSelected] = React.useState([dropdownOptions[3]]);\n  const [open, setOpen] = React.useState(false);\n\n  const getSearchedOptions = (options, searchTerm) => {\n    const result = options.filter((option) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise(resolve => {\n      this.window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  const onChangeHandler = (selectedValues) => {\n    console.log(selectedValues);\n  };\n\n  const onUpdate = (_type, option) => {\n    this.window.setTimeout(() => {\n      setSelected([option]);\n    }, 2000);\n  };\n\n  const onPopperToggle = (updatedOpen, type) => {\n    console.log(type)\n    setOpen(updatedOpen);\n  }\n\n  const onClose = (values) => {\n    console.log(values);\n  }\n\n  return (\n    <div className=\"w-25\">\n      <Dropdown\n        fetchOptions={fetchOptions}\n        onUpdate={onUpdate}\n        selected={selected}\n        onChange={onChangeHandler}\n        onPopperToggle={onPopperToggle}\n        onClose={onClose}\n        open={open}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown   Custom Option",
      "code": "import { Text, Icon, Checkbox, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const storyOptions = [];\n  for (let i = 1; i <= 10; i++) {\n    storyOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      icon: 'events',\n      subInfo: 'subInfo'\n    });\n  }\n\n  const customOptionRenderer = (props) => {\n    const { label, icon } = props.optionData;\n    return (\n      <div className=\"px-5 py-4 d-flex cursor-pointer justify-content-between\" onClick={props.onClick}>\n        <Text>{label}</Text>\n        <Icon name={props.selected ? 'done' : icon} />\n      </div>\n    );\n  };\n\n  const customCheckboxRenderer = (props) => {\n    const { label } = props.optionData;\n    return (\n      <div className=\"px-5 py-4 d-flex cursor-pointer justify-content-between\" onClick={props.onClick}>\n        <Checkbox checked={props.selected} onChange={props.onChange} label={label} />\n        {props.selected && <Icon name=\"done\" />}\n      </div>\n    );\n  };\n\n  return (\n    <div className='d-flex'>\n      <div className='mr-10 w-25'>\n        <Text weight=\"strong\">Without Checkbox</Text> <br /><br />\n        <Dropdown options={storyOptions} optionRenderer={customOptionRenderer} />\n      </div>\n      <div className='w-25'>\n        <Text weight=\"strong\">With Checkbox</Text> <br /><br />\n        <Dropdown options={storyOptions} optionRenderer={customCheckboxRenderer} withCheckbox={true} />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown   Custom Trigger",
      "code": "import { Input, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const storyOptions = [];\n  for (let i = 1; i <= 10; i++) {\n    storyOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      icon: 'events',\n      subInfo: 'subInfo'\n    });\n  }\n  const onChange = (e) => {\n    e.preventDefault();\n  };\n\n  const customTriggerFunc = (label) => {\n    return (\n      <div className=\"w-100\">\n        <Input\n          type=\"text\"\n          name=\"input\"\n          value={label}\n          onChange={onChange}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className='d-flex'>\n      <div>\n        <Dropdown options={storyOptions} customTrigger={customTriggerFunc} />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const storyOptions = [];\n  for (let i = 1; i <= 10; i++) {\n    storyOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      icon: 'events',\n      subInfo: 'subInfo'\n    });\n  }\n\n  return (\n    <div className='d-flex'>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Disabled</Text> <br /><br />\n        <Dropdown disabled={true} options={storyOptions} />\n      </div>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Enabled</Text> <br /><br />\n        <Dropdown disabled={false} options={storyOptions} />\n      </div>\n    </div>\n  )\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const disabledStoryOptions = [];\n  for (let i = 1; i <= 10; i++) {\n    disabledStoryOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      disabled: i===2\n    });\n  }\n\n  const onClose = (options) => {\n    console.log(options);\n  };\n\n  const onChangeHandler = (selectedValues) => {\n    console.log(selectedValues);\n  };\n\n  return (\n    <div className='d-flex'>\n      <div className='mr-9 w-25'>\n      <Text weight=\"strong\">{'With Checkbox'}</Text><br /><br />\n        <Dropdown\n          withCheckbox={true}\n          withSelectAll={false}\n          options={disabledStoryOptions}\n          placeholder={'Select'}\n          onChange={onChangeHandler}\n          onClose={onClose}\n        />\n      </div>\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'Without Checkbox'}</Text><br /><br />\n        <Dropdown\n          options={disabledStoryOptions}\n          placeholder={'Select'}\n          onChange={onChangeHandler}\n          onClose={onClose}\n        />\n      </div>\n    </div>\n  )\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const storyOptions = [];\n  for (let i = 1; i <= 10; i++) {\n    storyOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      icon: 'events',\n      subInfo: 'subInfo'\n    });\n  }\n\n  return (\n    <div className='d-flex'>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Default</Text><br /><br />\n        <Dropdown options={storyOptions} optionType={'DEFAULT'} loading={true}/>\n      </div>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Icon</Text><br /><br />\n        <Dropdown options={storyOptions} optionType={'WITH_ICON'} loading={true}/>\n      </div>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">SubInfo</Text><br /><br />\n        <Dropdown options={storyOptions} optionType={'WITH_META'} loading={true}/>\n      </div>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Icon with subInfo</Text><br /><br />\n        <Dropdown options={storyOptions} optionType={'ICON_WITH_META'} loading={true}/>\n      </div>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">{'Checkboxes'}</Text><br /><br />\n        <Dropdown options={storyOptions} withCheckbox={true} loading={true}/>\n      </div>\n    </div>\n  )\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const storyOptions = [];\n  for (let i = 1; i <= 10; i++) {\n    storyOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      icon: 'events',\n      subInfo: 'subInfo'\n    });\n  }\n\n  const onClose = (options) => {\n    console.log(options);\n  };\n\n  const onChangeHandler = (selectedValues) => {\n    console.log(selectedValues);\n  };\n\n  return (\n    <div className='d-flex'>\n      <div className='mr-9 w-25'>\n        <Text weight=\"strong\">{'With Apply Button'}</Text><br /><br />\n        <Dropdown\n          maxHeight={180}\n          withCheckbox={true}\n          showApplyButton={true}\n          options={storyOptions}\n          placeholder={'Select'}\n          onChange={onChangeHandler}\n          onClose={onClose}\n        />\n      </div>\n      <div className='mr-9 w-25'>\n        <Text weight=\"strong\">{'Without Apply Button'}</Text><br /><br />\n        <Dropdown\n          withCheckbox={true}\n          options={storyOptions}\n          placeholder={'Select'}\n          onChange={onChangeHandler}\n          onClose={onClose}\n        />\n      </div>\n      <div className='mr-9 w-25'>\n        <Text weight=\"strong\">{'Without Select All (Options <= 50)'}</Text><br /><br />\n        <Dropdown\n          withCheckbox={true}\n          withSelectAll={false}\n          options={storyOptions}\n          placeholder={'Select'}\n          onChange={onChangeHandler}\n          onClose={onClose}\n        />\n      </div>\n    </div>\n  )\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const optionTypes = ['DEFAULT', 'WITH_ICON', 'WITH_META', 'ICON_WITH_META'];\n\n  return (\n    <div className=\"d-flex\">\n      {optionTypes.map((type, ind) => {\n        return (\n          <div className=\"d-flex flex-column mr-9 w-25\" key={ind}>\n            <Text weight=\"strong\">{labelMapping[type]}</Text>\n            <br />\n            <Dropdown options={optionsMapping[type].slice(0, 3)} />\n          </div>\n        );\n      })}\n      <div className=\"d-flex flex-column w-25\">\n        <Text weight=\"strong\">{'Checkboxes'}</Text>\n        <br />\n        <Dropdown options={storyOptions.slice(0, 3)} withCheckbox={true} />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown   Options Wrap",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const storyWrapOptions = [\n    {\n      label: 'Design System Dropdown',\n      value: 'Design System Dropdown'\n    },\n    {\n      label: 'UI Kit Dropdown',\n      value: 'UI Kit Dropdown',\n    },\n    {\n      label: 'Innovaccer Analytics',\n      value: 'Innovaccer Analytics'\n    }\n  ];\n  return (\n    <div className='d-flex'>\n      <div className='mr-9'>\n        <Text weight=\"strong\">{'Options Trimmed'}</Text> <br /><br />\n        <Dropdown options={storyWrapOptions} placeholder={'Select'} />\n      </div>\n      <div className='mr-9'>\n        <Text weight=\"strong\">{'Options Wrapped'}</Text> <br /><br />\n        <Dropdown options={storyWrapOptions} placeholder={'Select'} truncateOption={false} />\n      </div>\n    </div>\n  )\n}\n    "
    },
    {
      "query": "Dropdown   Pre Selection",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const dropdownOptions = [];\n  for (let i = 1; i <= 100; i++) {\n    dropdownOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      selected: i === 2 || i === 3\n    });\n  }\n\n  const BooleanValue = [true, false];\n\n  const getSearchedOptions = (options, searchTerm) => {\n    const result = options.filter((option) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm, limit) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise(resolve => {\n      this.window.setTimeout(() => {\n        resolve({\n          options: searchedOptions.slice(0, limit),\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n  return (\n    <div className='d-flex'>\n      <div className='mr-10 w-25'>\n        <Text weight=\"strong\">{'Options > 50'}</Text> <br /><br />\n        <Dropdown withCheckbox={true} fetchOptions={fetchOptions}/>\n      </div>\n      <div className='mr-10 w-25'>\n        <Text weight=\"strong\">{'Options <= 50'}</Text> <br /><br />\n        <Dropdown withCheckbox={true} options={dropdownOptions.slice(0, 50)} />\n      </div>\n    </div>\n  )\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'Search'}</Text>\n        <br />\n        <br />\n        <Dropdown withSearch={true} options={storyOptions} />\n      </div>\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'Loading'}</Text>\n        <br />\n        <br />\n        <Dropdown withSearch={true} loading={true} />\n      </div>\n      <div className=\"mr-9 w-25\">\n        <Text weight=\"strong\">{'No Result'}</Text>\n        <br />\n        <br />\n        <Dropdown withSearch={true} noResultMessage={'No result found'} />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [];\n\n  for (let i = 1; i <= 10; i++) {\n    options.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      group: 'Group',\n    });\n  }\n  const BooleanValue = [true, false];\n\n  return (\n    <div className=\"d-flex\">\n      {BooleanValue.map((value, index) => {\n        return (\n          <div key={index} className=\"d-flex flex-column align-items-center\">\n            <Text weight=\"strong\">{value ? ' Multi Select' : 'Single Select'}</Text>\n            <br />\n            <div className=\"d-flex\">\n              <div className=\"d-flex flex-column align-items-center mr-7\">\n                <Text weight=\"strong\">{'With Sections'}</Text>\n                <br />\n                <Dropdown options={options} withCheckbox={value} />\n              </div>\n              <div className=\"d-flex flex-column align-items-center mr-7\">\n                <Text weight=\"strong\">{'Without Sections'}</Text> <br />\n                <Dropdown options={storyOptions} withCheckbox={value} />\n              </div>\n            </div>\n            <br />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const storyOptions = [];\n  for (let i = 1; i <= 10; i++) {\n    storyOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      icon: 'events',\n      subInfo: 'subInfo'\n    });\n  }\n\n  const disabled = [true, false];\n\n  return (\n    <div className='d-flex'>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Tiny</Text> <br /><br />\n        <Dropdown triggerSize={'tiny'} options={storyOptions} />\n      </div>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Regular</Text> <br /><br />\n        <Dropdown triggerSize={'regular'} options={storyOptions}/>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropdown   Static Limit",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const staticLimit = 50;\n  const dropdownOptions = [];\n  for (let i = 1; i <= 100; i++) {\n    dropdownOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      group: i <= 40 ? 'Group 1' : 'Group 2'\n    });\n  }\n  const BooleanValue = [true, false];\n\n  const getSearchedOptions = (options, searchTerm) => {\n    const result = options.filter((option) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise(resolve => {\n      this.window.setTimeout(() => {\n        resolve({\n          searchTerm,\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n  return (\n    <div className='d-flex'>\n      <div className='mr-10 w-25'>\n        <Text weight=\"strong\">{`Options > ${staticLimit}`}</Text> <br /><br />\n        <Dropdown\n          withCheckbox={true}\n          staticLimit={staticLimit}\n          fetchOptions={fetchOptions}\n        />\n      </div>\n      <div className='mr-10 w-25'>\n        <Text weight=\"strong\">{`Options <= ${staticLimit}`}</Text> <br /><br />\n        <Dropdown\n          withCheckbox={true}\n          staticLimit={staticLimit}\n          options={dropdownOptions.slice(0, staticLimit)}\n        />\n      </div>\n    </div>\n  )\n}\n    "
    },
    {
      "query": "Dropdown   Trigger Placeholder",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const storyOptions = [];\n  for (let i = 1; i <= 10; i++) {\n    storyOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      icon: 'events',\n      subInfo: 'subInfo'\n    });\n  }\n\n  return (\n    <div className='d-flex'>\n      <div className='mr-8'>\n        <Text weight=\"strong\">Without Placeholder</Text> <br /><br />\n        <Dropdown menu={true} options={storyOptions} />\n      </div>\n      <div className='mr-8'>\n        <Text weight=\"strong\">With Placeholder</Text> <br /><br />\n        <Dropdown menu={false} options={storyOptions} />\n      </div>\n    </div>\n  )\n}\n    "
    },
    {
      "query": "Dropdown   Trigger State",
      "code": "import { Text, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const storyOptions = [];\n  for (let i = 1; i <= 10; i++) {\n    storyOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      icon: 'events',\n      subInfo: 'subInfo'\n    });\n  }\n\n  const disabled = [true, false];\n\n  return (\n    <div className='d-flex'>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Icon Disabled</Text> <br /><br />\n        <Dropdown icon={'events'} disabled={true} options={storyOptions} />\n      </div>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Icon Enabled</Text> <br /><br />\n        <Dropdown icon={'events'} disabled={false} options={storyOptions} />\n      </div>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Label Disabled</Text> <br /><br />\n        <Dropdown inlineLabel={'label'} disabled={true} options={storyOptions} />\n      </div>\n      <div className='mr-8 w-25'>\n        <Text weight=\"strong\">Label Enabled</Text> <br /><br />\n        <Dropdown inlineLabel={'label'} disabled={false} options={storyOptions} />\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "dropzone": [
    {
      "query": "Dropzone All",
      "code": "import { Button, Dropzone, Link, FileList } from '@innovaccer/design-system';\n    () => {\n  const [files, setFiles] = React.useState([]);\n\n  const getSize = (size) => (\n    `${(size / (1024 * 1024)).toFixed(2)} MB`\n  );\n\n  const onDelete = (fileItem) => {\n    const updatedFiles = files.filter((file) => file.id !== fileItem.id);\n    setFiles(updatedFiles);\n  };\n\n  const onDropHandler = (event, acceptedFiles, rejectedFiles) => {\n    const acceptedFileDetailList = acceptedFiles.map((file, id) => (\n      {\n        file,\n        id: files.length + id,\n        fileSize: getSize(file.size),\n        networkError: false,\n      }\n    ));\n\n    const rejectedFilesDetailList = rejectedFiles.map((rejectedFile, id) => {\n      const { file, errors } = rejectedFile;\n      const errorMessageArray = errors.map((error) => error.message);\n      return {\n        file,\n        id: files.length + id,\n        fileSize: getSize(file.size),\n        status: 'error',\n        errorMessage: errorMessageArray.join(' and '),\n        networkError: false,\n      };\n    });\n    const updatedFiles = [...files, ...acceptedFileDetailList, ...rejectedFilesDetailList];\n    setFiles(updatedFiles);\n  };\n\n  const actionRenderer = (fileItem) => {\n    return (\n      <React.Fragment>\n        {fileItem.networkError && (\n          <Button\n            aria-label={`Remove ${fileItem.file.name}`}\n            appearance=\"transparent\"\n            icon=\"refresh\"\n            size=\"regular\"\n            onClick={() => onDelete(fileItem.id)}\n            className={'cursor-pointer'}\n          />\n        )}\n        <Button\n          aria-label={`Remove ${fileItem.file.name}`}\n          appearance=\"transparent\"\n          icon=\"close\"\n          size=\"regular\"\n          onClick={() => onDelete(fileItem)}\n          className={'cursor-pointer'}\n        />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Dropzone\n        accept=\"image/jpeg, image/png\"\n        formatLabel=\"Accepted formats: jpeg, png\"\n        sizeLabel=\"Maximum size: 25 MB\"\n        multiple={true}\n        onDrop={onDropHandler}\n        maxSize={26214400}\n        className=\"mb-5\"\n        sampleFileLink={(\n          <Link\n            href=\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\"\n            download=\"Test.pdf\"\n            target=\"_blank\"\n          >\n            Download sample file\n          </Link>\n        )}\n      />\n      <FileList\n        fileList={files}\n        actionRenderer={actionRenderer}\n      />\n    </React.Fragment>\n  );\n}\n    "
    },
    {
      "query": "Dropzone   Disabled",
      "code": "import { Dropzone, Text } from '@innovaccer/design-system';\n    () => {\n  const onDrop = (event, acceptedFiles, rejectedFiles) => {\n    console.log(acceptedFiles, rejectedFiles);\n  };\n\n  return (\n    <div className=\"w-50 d-flex flex-column align-items-center\">\n      <Dropzone\n        onDrop={onDrop}\n        disabled={true}\n        className=\"mb-3\"\n      />\n      <Text size=\"large\" weight=\"strong\">Standard</Text>\n      <Dropzone\n        onDrop={onDrop}\n        disabled={true}\n        type=\"compressed\"\n        className=\"mt-6 mb-3\"\n      />\n      <Text size=\"large\" weight=\"strong\">Compressed</Text>\n      <Dropzone\n        onDrop={onDrop}\n        disabled={true}\n        type=\"tight\"\n        className=\"mt-6 mb-3\"\n      />\n      <Text size=\"large\" weight=\"strong\">Tight</Text>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Dropzone   Format",
      "code": "import { Dropzone, Link } from '@innovaccer/design-system';\n    () => {\n  const onDrop = (event, acceptedFiles, rejectedFiles) => {\n    console.log(acceptedFiles, rejectedFiles);\n  };\n\n  return (\n    <Dropzone\n      accept=\"image/jpeg, image/png\"\n      formatLabel=\"Accepted formats: jpeg, png\"\n      onDrop={onDrop}\n      className=\"mb-3\"\n      sampleFileLink={(\n        <Link\n          href=\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\"\n          download=\"Test.pdf\"\n          target=\"_blank\"\n        >\n          Download sample file\n        </Link>\n      )}\n    />\n  );\n}\n    "
    },
    {
      "query": "Dropzone   Size",
      "code": "import { Dropzone, Link, Text } from '@innovaccer/design-system';\n    () => {\n  const onDrop = (event, acceptedFiles, rejectedFiles) => {\n    console.log(acceptedFiles, rejectedFiles);\n  };\n\n  return (\n    <div className=\"w-50 d-flex flex-column align-items-center\">\n      <Dropzone\n        onDrop={onDrop}\n        className=\"mb-3\"\n        sampleFileLink={(\n          <Link\n            href=\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\"\n            download=\"Test.pdf\"\n            target=\"_blank\"\n          >\n            Download sample file\n          </Link>\n        )}\n      />\n      <Text size=\"large\" weight=\"strong\">Standard</Text>\n      <Dropzone\n        onDrop={onDrop}\n        type=\"compressed\"\n        className=\"mt-6 mb-3\"\n        sampleFileLink={(\n          <Link\n            href=\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\"\n            download=\"Test.pdf\"\n            target=\"_blank\"\n          >\n            Download sample file\n          </Link>\n        )}\n      />\n      <Text size=\"large\" weight=\"strong\">Compressed</Text>\n      <Dropzone\n        onDrop={onDrop}\n        type=\"tight\"\n        className=\"mt-6 mb-3\"\n        sampleFileLink={(\n          <Link\n            href=\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\"\n            download=\"Test.pdf\"\n            target=\"_blank\"\n          >\n            Download sample file\n          </Link>\n        )}\n      />\n      <Text size=\"large\" weight=\"strong\">Tight</Text>\n    </div>\n  );\n}\n    "
    }
  ],
  "editablechipinput": [
    {
      "query": "EditableChipInput All",
      "code": "import { EditableChipInput } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState();\n\n  const onChange = (updatedValue) => {\n    setValue(updatedValue);\n  };\n  const onClick = (item) =>  console.log(item);\n\n  const placeholder ='Add Value';\n  const chipOptions = { onClick, clearButton:true };\n  const chipInputOptions = {\n    chipOptions,\n    allowDuplicates:false,\n    defaultValue:[],\n    autoFocus:true\n  };\n\n  const options = {\n    placeholder,\n    value,\n    onChange,\n    chipInputOptions\n  };\n  return (\n      <div className=\"w-25\">\n        <EditableChipInput\n          {...options}\n        />\n      </div>\n  );\n}\n    "
    },
    {
      "query": "EditableChipInput Uncontrolled",
      "code": "import { EditableChipInput } from '@innovaccer/design-system';\n    () => {\n  const onClick = (item) => console.log(`onClick: ${item}`);\n  const chipOptions = { onClick, clearButton: true };\n  const chipInputOptions = {\n    chipOptions,\n    allowDuplicates: false,\n    defaultValue: [],\n    autoFocus: true,\n  };\n\n  const options = {\n    chipInputOptions,\n    placeholder: 'Add Value',\n  };\n  return (\n    <div className=\"w-25\">\n      <EditableChipInput {...options} />\n    </div>\n  );\n}\n    "
    }
  ],
  "editabledropdown": [
    {
      "query": "EditableDropdown All",
      "code": "import { Label, EditableDropdown } from '@innovaccer/design-system';\n    () => {\n  const dropdownOptions = [];\n  for (let i = 1; i <= 100; i++) {\n    dropdownOptions.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      group: i >= 1 && i <= 40 ? 'Group 1' : 'Group 2',\n      selected: i === 2\n    });\n  };\n\n  const getSearchedOptions = (options, searchTerm) => {\n    const result = options.filter((option) => option.label.toLowerCase().includes(searchTerm.toLowerCase()));\n    return result;\n  };\n\n  const fetchOptions = (searchTerm) => {\n    const searchedOptions = searchTerm ? getSearchedOptions(dropdownOptions, searchTerm) : dropdownOptions;\n    return new Promise(resolve => {\n      this.window.setTimeout(() => {\n        resolve({\n          options: searchedOptions,\n          count: searchedOptions.length,\n        });\n      }, 1000);\n    });\n  };\n\n  const onChange = (selectedValues) => {\n    console.log(selectedValues);\n  };\n\n  return (\n    <div className=\"w-25\">\n      <Label withInput={true} className=\"ml-5\">Editable Dropdown</Label>\n      <EditableDropdown\n        placeholder=\"Select Option\"\n        dropdownOptions={{\n          fetchOptions,\n          onChange\n        }}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "EditableDropdown   Custom Render",
      "code": "import { StatusHint, Icon, Label, EditableDropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [];\n  for (let i = 1; i <= 10; i++) {\n    options.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n      group: i >= 1 && i <= 40 ? 'Group 1' : 'Group 2',\n      selected: i === 2\n    });\n  };\n\n  const onChange = (selectedValues) => {\n    console.log(selectedValues);\n  };\n\n  const customRenderer = (label) => {\n    return (\n      <StatusHint appearance=\"warning\">{label}</StatusHint>\n    );\n  };\n\n  const optionRenderer = (props) => {\n    const { label } = props.optionData;\n    return (\n      <StatusHint className=\"px-5 py-4 cursor-pointer\" appearance=\"warning\">{label}</StatusHint>\n    );\n  };\n\n  const customTrigger = (label) => {\n    return (\n      <div className=\"d-flex align-items-center justify-content-between pl-5 pr-4 bg-secondary cursor-pointer w-100\">\n        <StatusHint appearance=\"warning\">{label}</StatusHint>\n        <Icon name=\"keyboard_arrow_down\" className=\"m-4\"/>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"w-25\">\n      <Label withInput={true} className=\"ml-5\">Editable Dropdown</Label>\n      <EditableDropdown\n        customTriggerRenderer={customRenderer}\n        placeholder=\"Select Option\"\n        dropdownOptions={{\n          options,\n          onChange,\n          optionRenderer,\n          triggerOptions: { customTrigger },\n        }}\n      />\n    </div>\n  );\n}\n    "
    }
  ],
  "editableinput": [
    {
      "query": "EditableInput All",
      "code": "import { EditableInput } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState('');\n\n  const onChange = (updatedValue) => {\n    setValue(updatedValue);\n  };\n\n  const options = {\n    placeholder: 'First Name',\n    onChange,\n    value,\n  };\n\n  return (\n    <div className=\"vw-25\">\n      <EditableInput\n        {...options}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "EditableInput   Error",
      "code": "import { EditableInput } from '@innovaccer/design-system';\n    /*\n// style.css\n.EditableInput-wrapper--error {\n  width: var(--spacing-9);\n}\n\n*/\n() => {\n  const [value, setValue] = React.useState('');\n\n  const onChange = (value) => {\n    setValue(value);\n  }\n\n  return (\n    <div className='EditableInput-wrapper--error'>\n      <EditableInput\n        placeholder=\"First Name\"\n        value={value}\n        onChange={onChange}\n        error={true}\n        errorMessage={'Error Message'}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "EditableInput   Size",
      "code": "import { Row, Label, EditableInput, Column } from '@innovaccer/design-system';\n    () => {\n  const [name, setName] = React.useState('');\n  const [weight, setWeight] = React.useState('');\n\n  const onChangeName = (value) => {\n    setName(value);\n  };\n\n  const onChangeWeight = (value) => {\n    setWeight(value);\n  }\n\n  return (\n    <Row>\n      <div className=\"d-flex flex-column vw-25\">\n        <Label withInput={true} className=\"ml-5\">Regular</Label>\n        <EditableInput\n          placeholder=\"First Name\"\n          value={name}\n          onChange={onChangeName}\n          className=\"mr-5\"\n        />\n      </div>\n      <Column size={2}>\n        <div className=\"d-flex ml-8 flex-column\">\n          <Label withInput={true} className=\"ml-5\">Tiny</Label>\n          <EditableInput\n            placeholder=\"Add Weight\"\n            value={weight}\n            onChange={onChangeWeight}\n            size=\"tiny\"\n          />\n        </div>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "EditableInput   Uncontrolled",
      "code": "import { EditableInput } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"vw-25\">\n      <EditableInput placeholder=\"First Name\" />\n    </div>\n  );\n}\n    "
    }
  ],
  "emptystate": [
    {
      "query": "EmptyState All",
      "code": "import { EmptyState, Button } from '@innovaccer/design-system';\n    () => {\n  const title = 'Manage your outreach campaigns';\n  const description = 'Campaigns let you reach out to patients with text messages, emails and voice calls';\n  return (\n    <div className=\"h-100 bg-secondary-lightest\">\n      <EmptyState title={title} description={description} size=\"large\" imageSrc={noContent}>\n        <Button size=\"large\" appearance=\"primary\">\n          Add campaigns\n        </Button>\n      </EmptyState>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "EmptyState No Content Available",
      "code": "import { EmptyState, Button } from '@innovaccer/design-system';\n    () => {\n  const title = 'Manage your outreach campaigns';\n  const description = 'Campaigns let you reach out to patients with text messages, emails and voice calls';\n  return (\n    <div className=\"h-100 pb-5 bg-secondary-lightest\">\n      <EmptyState title={title} description={description} imageSrc={noContent} size=\"large\">\n        <Button size=\"large\" appearance=\"primary\">\n          Reload page\n        </Button>\n      </EmptyState>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "EmptyState No Search Results",
      "code": "import { Card, EmptyState, Button } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Card className=\"py-5\">\n      <EmptyState\n        title=\"We didn't find a match\"\n        description=\"Try adjusting your search to find what you are looking for.\"\n        size=\"small\"\n        imageSrc={noSearch}\n      >\n        <Button appearance=\"basic\">Try Again</Button>\n      </EmptyState>\n    </Card>\n  );\n}\n    "
    },
    {
      "query": "EmptyState Page Not Loaded",
      "code": "import { EmptyState, Button } from '@innovaccer/design-system';\n    () => (\n  <div className=\"h-100 pb-5 bg-secondary-lightest\">\n    <EmptyState\n      title=\"There's a problem loading this page.\"\n      description=\"A technical problem is preventing the page from loading. Try reloading this page.\"\n      imageSrc={noContent}\n      size=\"large\"\n    >\n      <Button size=\"large\" appearance=\"primary\">\n        Reload page\n      </Button>\n    </EmptyState>\n  </div>\n)\n    "
    }
  ],
  "filelist": [
    {
      "query": "FileList All",
      "code": "import { FileList, Button } from '@innovaccer/design-system';\n    () => {\n  const fileList = [\n    {\n      file:{\n        name: 'Audio File.mp3',\n        size: '3 MB',\n        type: 'audio',\n      },\n      status: 'uploading',\n      progress: 45,\n      id: 1,\n    },\n    {\n      file:{\n        name: 'Video File.mp4',\n        size: '3 MB',\n        type: 'video',\n      },\n      status: 'completed',\n      id: 2,\n    },\n    {\n      file:{\n        name: 'Image file name can be some times very long in size so it will get truncated File.jpeg',\n        size: '3 MB',\n        type: 'image',\n      },\n      status: 'error',\n      errorMessage: 'Network failure',\n      id: 3,\n    },\n    {\n      file:{\n        name: 'Document File.pdf',\n        size: '3 MB',\n        type: 'application',\n      },\n      status: 'completed',\n      id: 4,\n    },\n    {\n      file:{\n        name: 'Other File',\n        size: '3 MB',\n        type: 'others',\n      },\n      status: 'completed',\n      id: 5,\n    }\n  ];\n\n  const onClick = (file) => {\n    console.log(`Clicked: ${file}`);\n  };\n\n  return (\n    <div className=\"pt-6 w-50\">\n      <FileList\n        onClick={onClick}\n        fileList={fileList}\n        actionRenderer={fileItem => {\n          if (fileItem.id === 3) {\n            return(\n              <>\n              <Button\n                appearance=\"transparent\"\n                icon=\"refresh\"\n                size=\"regular\"\n                onClick={() => onClick(fileItem)}\n                className={'cursor-pointer'}\n              />\n              <Button\n                appearance=\"transparent\"\n                icon=\"close\"\n                size=\"regular\"\n                onClick={() => onClick(fileItem)}\n                className={'cursor-pointer ml-2'}\n              />\n            </>\n            );\n          }\n          return (\n            <Button\n              appearance=\"transparent\"\n              icon=\"close\"\n              size=\"regular\"\n              onClick={() => {}}\n              className={'cursor-pointer'}\n            />\n          );\n        }\n        }\n      />\n    </div>\n  );\n}\n    "
    }
  ],
  "fileuploader": [
    {
      "query": "FileUploader",
      "code": "import {  } from '@innovaccer/design-system';\n    () => <></>\n    "
    }
  ],
  "fullscreenmodal": [
    {
      "query": "FullscreenModal",
      "code": "import { Button, FullscreenModal, Text, Heading, Paragraph } from '@innovaccer/design-system';\n    \n() => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n\n  return (\n    <div>\n      <Button className=\"m-8\" appearance=\"primary\" onClick={openModal}>\n        Open Modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'This is modal Heading',\n          subHeading: 'This is modal subheading'\n        }}\n        footerOptions={{\n          actions: [\n            {\n              children: 'Basic',\n              appearance: 'basic',\n              onClick: ev => console.log('Basic button click', ev)\n            },\n            {\n              children: 'Primary',\n              appearance: 'primary',\n              className: 'ml-4',\n              onClick: ev => console.log('Primary button click', ev)\n            }\n          ]\n        }}\n      >\n        <Text>Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Description Title</Heading>\n        <Paragraph>\n          Adding a subheading clearly indicates the hierarchy of the information.\n        </Paragraph>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "FullscreenModal",
      "code": "import { Button, FullscreenModal, Heading, Text, Paragraph } from '@innovaccer/design-system';\n    \n() => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n\n  return (\n    <div>\n      <Button className=\"m-8\" appearance=\"primary\" onClick={openModal}>\n        Open Modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        dimension=\"medium\"\n        onClose={onClose}\n        header={(\n          <>\n            <Heading>Custom Heading component</Heading>\n            <Text appearance=\"subtle\">This is subheading</Text>\n          </>\n        )}\n        footer={(\n          <>\n            <Button appearance=\"basic\" onClick={ev => console.log('Basic button click', ev)}>\n              Basic\n            </Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={ev => console.log('Primary button click', ev)}>\n              Primary\n            </Button>\n          </>\n        )}\n      >\n        <Text>Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Description Title</Heading>\n        <Paragraph>\n          Adding a subheading clearly indicates the hierarchy of the information.\n        </Paragraph>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "FullscreenModal",
      "code": "import { Button, FullscreenModal, Label, Input, Textarea } from '@innovaccer/design-system';\n    () => {\n    const [open, setOpen] = React.useState(false);\n\n    const onClose = () => {\n      setOpen(!open);\n    };\n\n    return (\n      <div>\n        <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n        <FullscreenModal\n          open={open}\n          dimension=\"medium\"\n          onClose={onClose}\n          headerOptions={{\n            heading: 'New group',\n          }}\n          footer={(\n            <>\n              <Button  onClick={console.log('Cancel button click')}>Cancel</Button>\n              <Button appearance=\"primary\" className=\"ml-4\" onClick={console.log('Next button click')}>Create</Button>\n            </>\n          )}\n        >\n          <Label withInput={true} required={true}>Name</Label>\n          <Input placeholder=\"Admin\" className=\"mb-5\"/>\n          <Label withInput={true}>Description</Label>\n          <Textarea placeholder=\"Write a description\"/>\n        </FullscreenModal>\n      </div>\n    );\n}\n    "
    },
    {
      "query": "FullscreenModal",
      "code": "import { Button, FullscreenModal, Label, Radio, Input, Card, Icon, Text } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const data = [{ iconName: 'message', textMessage: 'Text Message' }, { iconName: 'chat_bubble', textMessage: 'Portal Message' }, { iconName: 'email', textMessage: 'E-mail' }, { iconName: 'markunread_mailbox', textMessage: 'Letter' }, { iconName: 'mic', textMessage: 'Voice Recording' }];\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <FullscreenModal\n        open={open}\n        dimension=\"large\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'New outreach',\n        }}\n        footer={(\n          <>\n            <Button onClick={console.log('Cancel button click')}>Cancel</Button>\n            <Button appearance=\"primary\" className=\"ml-3\" onClick={console.log('Next button click')}>Create</Button>\n          </>\n        )}\n      >\n        <Label withInput={true}>Type</Label>\n        <div className=\"d-flex\">\n          <Radio\n            defaultChecked={true}\n            label=\"Message outreach\"\n            name=\"Outreach\"\n            size=\"regular\"\n            value=\"Message outreach\"\n          />\n          <Radio label=\"Surevey outreach\" name=\"Outreach\" size=\"regular\" value=\"Surevey outreach\" className=\"ml-8\" />\n        </div>\n        <Label withInput={true} className=\"mt-6\">Name</Label>\n        <Input placeholder=\"e.g. Annual Welness Visit outreach, etc.\" className=\"mb-5 w-50\" />\n        <Label withInput={true}>Medium</Label>\n        <div className=\"d-flex\">\n          {\n            data.map((obj, index) => {\n              return(\n                <Card key={index} shadow=\"none\" className=\"mr-4 d-flex flex-column align-items-center justify-content-center w-25 py-4\">\n                  <Icon name={obj.iconName} size={25}/>\n                  <Text className=\"pt-5\" size=\"small\" weight=\"strong\">\n                    {obj.textMessage}\n                  </Text>\n                </Card>\n              );\n            })\n          }\n        </div>\n      </FullscreenModal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "FullscreenModal",
      "code": "import { Button, FullscreenModal, Text, Heading, Paragraph } from '@innovaccer/design-system';\n    \n() => {\n  const [open, setOpen] = React.useState(false);\n  const [openSecondOverlay, setOpenSecondOverlay] = React.useState(false);\n\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n  const onCloseSecondOverlay = () => {\n    setOpenSecondOverlay(!openSecondOverlay);\n  };\n\n  const openSecondModal = () => {\n    setOpenSecondOverlay(true);\n  };\n\n\n  return (\n    <div>\n\n      <Button className=\"m-8\" appearance=\"primary\" onClick={openModal}>\n        Open Modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        closeOnEscape={true}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'This is modal Heading',\n          subHeading: 'This is modal subheading'\n        }}\n        footerOptions={{\n          actions: [\n            {\n              children: 'Basic',\n              appearance: 'basic',\n              onClick: ev => console.log('Basic button click', ev)\n            },\n            {\n              children: 'Open',\n              appearance: 'primary',\n              className: 'ml-4',\n              onClick: ev => openSecondModal()\n            }\n          ]\n        }}\n      >\n        <Text>Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Description Title</Heading>\n        <Paragraph>\n          Adding a subheading clearly indicates the hierarchy of the information.\n        </Paragraph>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n\n      <FullscreenModal\n        closeOnEscape={true}\n        open={openSecondOverlay}\n        onClose={onCloseSecondOverlay}\n        headerOptions={{\n          heading: 'This is Second modal Heading',\n          subHeading: 'This is Second modal subheading'\n        }}\n        footerOptions={{\n          actions: [\n            {\n              children: 'Basic',\n              appearance: 'basic',\n              onClick: ev => console.log('Basic button click', ev)\n            }\n          ]\n        }}\n      >\n        <Text>Second Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Second Description Title</Heading>\n      </FullscreenModal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "FullscreenModal",
      "code": "import { Button, FullscreenModal, Text, Heading, Paragraph } from '@innovaccer/design-system';\n    \n() => {\n  const [open, setOpen] = React.useState(false);\n  const [page, setPage] = React.useState(0);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n  return (\n    <div>\n\n      <Button className=\"m-8\" appearance=\"primary\" onClick={openModal}>\n        Open Modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        dimension=\"medium\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'This is modal Heading',\n          subHeading: 'This is modal subheading',\n          backButton: !!page,\n          backButtonCallback: () => setPage(0)\n        }}\n        footer={(\n          <>\n            {page === 0 && (\n              <Button appearance=\"primary\" onClick={() => setPage(1)}>\n                Next\n              </Button>\n            )}\n            {page === 1 && (\n              <>\n                <Button appearance=\"primary\" onClick={() => console.log(\"Submit button clicked\")}>\n                  Submit\n                </Button>\n                <Button appearance=\"basic\" onClick={() => setPage(0)} className=\"ml-4\">\n                  Back\n                </Button>\n              </>\n            )}\n          </>\n        )}\n      >\n        {page === 0 && (\n          <>\n            <Text>Fullscreen Modal Body</Text>\n            <Heading size=\"s\">Description Title</Heading>\n            <Paragraph>Adding a subheading clearly indicates the hierarchy of the information.</Paragraph>\n            <Paragraph>Card Sections include supporting text like an article summary or a restaurant description.</Paragraph>\n          </>\n        )}\n        {page === 1 && (\n          <>\n            <Text>This is some info</Text>\n            <Heading size=\"s\">Second screen</Heading>\n            <Paragraph>\n              This screen may be used as info screen or read more, for multiple step forms please use steppers.\n            </Paragraph>\n            <Paragraph>Card Sections include supporting text like an article summary or a restaurant description.</Paragraph>\n          </>\n        )}\n      </FullscreenModal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "FullscreenModal",
      "code": "import { Button, FullscreenModal, Text, Input, Card, List, Label } from '@innovaccer/design-system';\n    \n() => {\n  const [open, setOpen] = React.useState(false);\n  const [page, setPage] = React.useState(0);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n  const headerOptions = () => {\n    if (page === 0) {\n      return(\n      {\n        heading:'New Care Plan',\n      }\n      );\n    }\n    return(\n    {\n      heading: 'Name the care Plan',\n      backButton: true,\n      backButtonCallback: () => setPage(0)\n    }\n    );\n  };\n\n  const data = [{ name:'Cultural and language barriers', icon: 'cancel' }, { name:'Patient does not show Emotion', icon: 'cancel' }];\n\n  const schema = [\n    {\n      name: 'name',\n      displayName: 'name',\n      width: '80%',\n    },\n    {\n      name: 'icon',\n      displayName: 'icon',\n      width: '20%',\n      minWidth:'10',\n      cellType:'ICON',\n      align:'right'\n    },\n  ];\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={openModal}>\n        Open Modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        dimension=\"medium\"\n        onClose={onClose}\n        headerOptions={headerOptions()}\n        footer={(\n          <>\n            {page === 0 && (\n              <>\n                <Button>\n                  Cancel\n                </Button>\n                <Button appearance=\"primary\" onClick={() => setPage(1)} className=\"ml-4\">\n                  Continue\n                </Button>\n              </>\n            )}\n            {page === 1 && (\n            <>\n                <Button>\n                  Cancel\n                </Button>\n                <Button appearance=\"primary\" className=\"ml-4\">\n                  Continue\n                </Button>\n              </>\n            )}\n          </>\n        )}\n\n      >\n        {page === 0 && (\n          <>\n            <Text weight=\"strong\" size=\"regular\">Identify patient needs</Text><br/>\n            <Text  size=\"small\">Identify the patient needs to create a care plan for the patient</Text>\n            <Input placeholder=\"Add patient needs\" size=\"tiny\" className=\"my-5\"/>\n            <Text weight=\"strong\" size=\"regular\">2 Selected</Text><br/>\n            <Card className=\"w-100\" shadow=\"none\">\n              <List\n                data={data}\n                schema={schema}\n                size=\"tight\"\n              />\n            </Card>\n          </>\n        )}\n        {page === 1 && (\n          <>\n            <Text size=\"small\">Give a meaningful and easy to understand name to the care plan.</Text><br/>\n            <Label required={true} className=\"mt-5\">Name</Label>\n            <Input placeholder=\"Name\" size=\"tiny\" className=\"mt-2\"/>\n          </>\n        )}\n      </FullscreenModal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "FullscreenModal",
      "code": "import { Button, FullscreenModal, Text, Heading, Paragraph } from '@innovaccer/design-system';\n    \n() => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n\n  return (\n    <div>\n      <Button className=\"m-8\" appearance=\"primary\" onClick={openModal}>\n        Open Modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        dimension=\"large\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'This is modal Heading',\n          subHeading: 'This is modal subheading'\n        }}\n        footerOptions={{\n          actions: [\n            {\n              children: 'Basic',\n              appearance: 'basic',\n              onClick: ev => console.log('Basic button click', ev)\n            },\n            {\n              children: 'Primary',\n              appearance: 'primary',\n              className: 'ml-4',\n              onClick: ev => console.log('Primary button click', ev)\n            }\n          ]\n        }}\n      >\n        <Text>Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Description Title</Heading>\n        <Paragraph>\n          Adding a subheading clearly indicates the hierarchy of the information.\n        </Paragraph>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "FullscreenModal",
      "code": "import { Button, FullscreenModal, Text, Heading, Paragraph } from '@innovaccer/design-system';\n    \n() => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const openModal = () => {\n    setOpen(true);\n  };\n\n\n  return (\n    <div>\n\n      <Button className=\"m-8\" appearance=\"primary\" onClick={openModal}>\n        Open Modal\n      </Button>\n\n      <FullscreenModal\n        open={open}\n        dimension=\"medium\"\n        onClose={onClose}\n        headerOptions={{\n          heading: 'This is modal Heading',\n          subHeading: 'This is modal subheading'\n        }}\n        footerOptions={{\n          actions: [\n            {\n              children: 'Basic',\n              appearance: 'basic',\n              onClick: ev => console.log('Basic button click', ev)\n            },\n            {\n              children: 'Primary',\n              appearance: 'primary',\n              className: 'ml-4',\n              onClick: ev => console.log('Primary button click', ev)\n            }\n          ]\n        }}\n      >\n        <Text>Fullscreen Modal Body</Text>\n        <Heading size=\"s\">Description Title</Heading>\n        <Paragraph>\n          Adding a subheading clearly indicates the hierarchy of the information.\n        </Paragraph>\n        <Paragraph>\n          Card Sections include supporting text like an article summary or a restaurant description.\n        </Paragraph>\n      </FullscreenModal>\n    </div>\n  );\n}\n    "
    }
  ],
  "grid": [
    {
      "query": "Grid All",
      "code": "import { Card, Grid } from '@innovaccer/design-system';\n    () => {\n  const applyLoaderSchema = true;\n\n  const loading = false;\n\n  const error = false;\n\n  const applySchema = true;\n\n  const applyData = true;\n\n  const totalRecords = data.length;\n\n  const type = 'resource';\n\n  const size = 'comfortable';\n\n  const draggable = true;\n\n  const nestedRows = false;\n\n  const withCheckbox = false;\n\n  const showMenu = true;\n\n  const withPagination = false;\n\n  const page = 1;\n\n  const pageSize = 12;\n\n  const headCellTooltip = false;\n\n  const separator = false;\n\n  return (\n    <div className=\"Grid-outerWrapper\">\n      <Card className=\"h-100 overflow-hidden\">\n        <Grid\n          schema={applySchema ? schema : undefined}\n          data={applyData ? data : undefined}\n          loading={loading}\n          error={error}\n          errorTemplate={errorTemplate}\n          totalRecords={totalRecords}\n          withCheckbox={withCheckbox}\n          showMenu={showMenu}\n          type={type}\n          size={size}\n          headCellTooltip={headCellTooltip}\n          separator={separator}\n          draggable={draggable}\n          nestedRows={nestedRows}\n          nestedRowRenderer={nestedRowRenderer}\n          withPagination={withPagination}\n          page={page}\n          pageSize={pageSize}\n          loaderSchema={applyLoaderSchema ? loaderSchema : undefined}\n          onRowClick={(rowData, rowIndex) =>\n            action(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)()\n          }\n          onSelect={(rowIndex, selected) => action(`on-select:- rowIndex: ${rowIndex} selected: ${selected}`)()}\n          onSelectAll={(selected, selectedAll) => {\n            action(`on-select:- selected: ${selected} selectedAll: ${selectedAll}`)();\n          }}\n          sortingList={[{ name: 'name', type: 'desc' }]}\n          filterList={{\n            name: ['h-r', 's-z'],\n          }}\n        />\n      </Card>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Grid Grid Cell",
      "code": "import { GridCell } from '@innovaccer/design-system';\n    () => {\n  const schema = {\n    name: 'name',\n    displayName: 'Name',\n  };\n\n  const size = 'comfortable';\n\n  const width = 250;\n\n  const cellType = 'STATUS_HINT';\n\n  const align = 'left';\n\n  const tooltip = true;\n\n  const loading = false;\n\n  return (\n    <div className=\"Grid-cell Grid-cell--body border w-25\">\n      <div className=\"Grid-cellContent\">\n        <GridCell\n          size={size}\n          rowIndex={1}\n          colIndex={1}\n          loading={loading}\n          data={{\n            name: {\n              title: 'Schreiber Brynn',\n              metaList: ['Meta Item 1', 'Meta Item 2'],\n              icon: 'events',\n            },\n          }}\n          schema={{\n            ...schema,\n            width,\n            cellType,\n            align,\n            tooltip,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Grid In Modal",
      "code": "import { Button, Modal, Grid, Text } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const backdropClose = false;\n  const onClose = () => {\n    setOpen(!open);\n  };\n  const gridData = [\n    {\n      fullname: 'Wadsworth Seden',\n      gender: 'Male',\n    },\n    {\n      fullname: 'Jakie Hapke',\n      gender: 'Male',\n    },\n    {\n      fullname: 'Louella Veneur',\n      gender: 'Female',\n    },\n  ];\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>\n        Open Modal\n      </Button>\n      <Modal\n        open={open}\n        dimension=\"large\"\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Patients',\n        }}\n        footer={\n          <React.Fragment>\n            <Button>Cancel</Button>\n            <Button className=\"ml-4\">Next</Button>\n          </React.Fragment>\n        }\n        seperator={true}\n      >\n        <Grid\n          data-test=\"modal-in-grid\"\n          totalRecords={5}\n          pageSize={5}\n          schema={[\n            {\n              name: 'fullName',\n              displayName: 'Name',\n              width: '50%',\n              cellRenderer: ({ data }) => {\n                return (\n                  <div className=\"w-100\">\n                    <Text className=\"d-block\">{data.fullname}</Text>\n                    <Text className=\"d-block\" size=\"small\" appearance=\"subtle\">\n                      {data.fullname}\n                    </Text>\n                  </div>\n                );\n              },\n            },\n            {\n              name: 'gender',\n              displayName: 'Gender',\n              width: '50%',\n              cellRenderer: ({ data }) => {\n                return (\n                  <div className=\"w-100\">\n                    <Text className=\"d-block\">{data.gender}</Text>\n                    <Text className=\"d-block\" size=\"small\" appearance=\"subtle\">\n                      {data.gender}\n                    </Text>\n                  </div>\n                );\n              },\n            },\n          ]}\n          data={gridData}\n          showHead={true}\n          showMenu={false}\n          loading={false}\n        />\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Grid   Grid Loading State",
      "code": "import { Grid } from '@innovaccer/design-system';\n    () => {\n  const schema = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '50%'\n    },\n    {\n      name: 'gender',\n      displayName: 'Gender',\n      width: '50%'\n    }\n  ];\n\n  return (\n    <Grid\n      totalRecords={10}\n      pageSize={5}\n      schema={schema}\n      loading={true}\n    />\n  );\n}\n\n    "
    }
  ],
  "heading": [
    {
      "query": "Heading",
      "code": "import { Heading } from '@innovaccer/design-system';\n    () => {\n  const appearance = 'white';\n  const size = 'xxl';\n\n  return (\n    <div className={appearance === 'white' ? 'bg-dark' : 'bg-transparent'}>\n      <Heading appearance={appearance} size={size}>\n        Heading component have different varients, look for options in knobs tab.\n      </Heading>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Heading",
      "code": "import { Heading, Text } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['default', 'subtle', 'disabled', 'white'];\n  return (\n    <div className=\"Row\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-7\">\n            <div className={appear === 'white' ? 'bg-dark' : 'bg-transparent'}>\n              <Heading appearance={appear}>Heading</Heading>\n            </div>\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Heading",
      "code": "import { Heading, Text } from '@innovaccer/design-system';\n    () => {\n  const sizes = ['s', 'm', 'l', 'xl', 'xxl'];\n\n  return (\n    <div className=\"Row\">\n      {sizes.map((HeadingSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-7\">\n            <div className=\"h-50\">\n              <Heading size={HeadingSize}>Heading</Heading>\n            </div>\n            <br />\n            <Text weight=\"strong\">{HeadingSize}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "horizontalnav": [
    {
      "query": "HorizontalNav All",
      "code": "import { HorizontalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'menu_1',\n      label: 'Menu 1',\n      icon: 'event',\n    },\n    {\n      name: 'menu_2',\n      label: 'Menu 2',\n      count: 10\n    },\n    {\n      name: 'menu_3',\n      label: 'Menu 3',\n      disabled: true\n    }\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'menu_1'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"bg-secondary-lightest pb-13\">\n      <div className=\"bg-light border-top border-bottom p-3\">\n        <HorizontalNav\n          className=\"w-100 justify-content-center\"\n          menus={data}\n          active={active}\n          onClick={onClickHandler}\n        />\n      </div>\n  </div>\n  );\n}\n    "
    },
    {
      "query": "HorizontalNav Default Horizontal Navigation",
      "code": "import { HorizontalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'engagements',\n      label: 'Engagements',\n    },\n    {\n      name: 'no_linked_activities',\n      label: 'No Linked Activities',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'engagements'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"d-flex align-items-center py-6 bg-secondary-lightest\">\n      <HorizontalNav\n        className=\"w-100 justify-content-center\"\n        menus={data}\n        active={active}\n        onClick={onClickHandler}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "HorizontalNav Horizontal Navigation With Count",
      "code": "import { HorizontalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'to-dos',\n      label: 'To-dos',\n      count: 15\n    },\n    {\n      name: 'activity_received',\n      label: 'Activity received',\n      count: 7\n    },\n    {\n      name: 'activity_sent',\n      label: 'Activity sent',\n      count: 9\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'to-dos'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"d-flex align-items-center py-6 bg-secondary-lightest\">\n      <HorizontalNav\n        className=\"w-100 justify-content-center\"\n        menus={data}\n        active={active}\n        onClick={onClickHandler}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "HorizontalNav Horizontal Navigation With Icon",
      "code": "import { HorizontalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'text',\n      label: 'Text',\n      icon: 'message'\n    },\n    {\n      name: 'voice',\n      label: 'Voice',\n      icon: 'mic'\n    },\n    {\n      name: 'mail',\n      label: 'Mail',\n      icon: 'email'\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'text'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"d-flex align-items-center py-6 bg-secondary-lightest\">\n      <HorizontalNav\n        className=\"w-100 justify-content-center\"\n        menus={data}\n        active={active}\n        onClick={onClickHandler}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "HorizontalNav Left Aligned Navigation Tabs",
      "code": "import { HorizontalNav, Heading, Paragraph, Button, Modal, Label, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [];\n  for (let i = 1; i <= 10; i++) {\n    options.push({\n      label: `Option ${i}`,\n      value: `Option ${i}`,\n    });\n  }\n\n  const data = [\n    {\n      name: 'medicine',\n      label: 'Medicine',\n    },\n    {\n      name: 'period',\n      label: 'Period',\n    },\n    {\n      name: 'alias',\n      label: 'Alias',\n    },\n    {\n      name: 'priority',\n      label: 'Priority',\n    },\n  ];\n\n  const [open, setOpen] = React.useState(false);\n  const [active, setActive] = React.useState({\n    name: 'medicine'\n  });\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const onClickHandler = (menu) => {\n    setActive(menu);\n  };\n\n  const subHeading = (\n    <HorizontalNav\n      align=\"left\"\n      menus={data}\n      active={active}\n      onClick={onClickHandler}\n      className=\"ml-5 mt-4\"\n    />\n  );\n\n  const header = (\n    <div>\n      <Heading className=\"ml-7 mb-3\">Medication</Heading>\n      {subHeading}\n    </div>\n  );\n\n  return (\n    <div>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.<br />\n        Ut enim ad minim veniam,\n        quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.<br />\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n        Excepteur sint occaecat cupidatat non proident,\n        sunt in culpa qui officia deserunt mollit anim id est laborum.<br />\n      </Paragraph>\n      <Button appearance=\"primary\" className=\"mt-3\" onClick={() => { setOpen(true) }}>Open</Button>\n      <Modal\n        open={open}\n        dimension=\"large\"\n        onClose={onClose}\n        header={header}\n        footer={(\n          <>\n            <Button appearance=\"basic\">Discard</Button>\n            <Button appearance=\"primary\" className=\"ml-4\">Create</Button>\n          </>\n        )}\n        seperator={true}\n      >\n        <div className=\"py-5 w-50\">\n          <Label withInput={true} required={true}>Type</Label>\n          <Dropdown\n            options={options}\n          />\n          <Label withInput={true} className=\"mt-6\">Active Date</Label>\n          <Dropdown\n            options={options}\n          />\n          <Label withInput={true} className=\"mt-6\" required={true}>Diagnosis Diseases</Label>\n          <Dropdown\n            options={options}\n          />\n        </div>\n      </Modal>\n    </div>\n  );\n}\n    "
    }
  ],
  "icon": [
    {
      "query": "Icon All",
      "code": "import { Icon } from '@innovaccer/design-system';\n    () => {\n  return(\n    <Icon size={50} name='place'/>\n    );\n}\n    "
    },
    {
      "query": "Icon",
      "code": "import { Icon, Text } from '@innovaccer/design-system';\n    () => {\n  const appearances = [\n    ['primary', 'primary_dark', 'primary_lighter'],\n    ['alert', 'alert_dark', 'alert_lighter'],\n    ['success', 'success_dark', 'success_lighter'],\n    ['warning', 'warning_dark', 'warning_lighter'],\n    ['accent1', 'accent1_dark', 'accent1_lighter'],\n    ['accent2', 'accent2_dark', 'accent2_lighter'],\n    ['accent3', 'accent3_dark', 'accent3_lighter'],\n    ['accent4', 'accent4_dark', 'accent4_lighter'],\n    ['inverse', 'subtle', 'disabled'],\n  ];\n\n  const name = 'events';\n  return (\n    <div>\n      {appearances.map((appearance, ind) => {\n        return (\n          <>\n            <div key={ind} className=\"d-flex mb-5\">\n              <div>\n                <div className=\"mr-12\">\n                  <Icon appearance={appearance[0]} size={50} name={name} />\n                </div>\n                <br />\n                <Text weight=\"strong\">{appearance[0]}</Text>\n              </div>\n              <div>\n                <div className=\"mr-12\">\n                  <Icon appearance={appearance[1]} size={50} name={name} />\n                </div>\n                <br />\n                <Text weight=\"strong\">{appearance[1]}</Text>\n              </div>\n              <div>\n                <div className=\"mr-12\">\n                  <Icon appearance={appearance[2]} size={50} name={name} />\n                </div>\n                <br />\n                <Text weight=\"strong\">{appearance[2]}</Text>\n              </div>\n            </div>\n          </>\n        );\n      })}\n      <div>\n        <Icon appearance=\"white\" size={50} name={name} className=\"bg-dark\" />\n      </div>\n      <br />\n      <Text weight=\"strong\">white</Text>\n      <div className=\"mt-5\">\n        <Icon appearance=\"destructive\" size={50} name={name} />\n      </div>\n      <br />\n      <Text weight=\"strong\">destructive</Text>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Icon",
      "code": "import { Icon } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Icon size={50}>\n      <img alt=\"Innovaccer logo\" src=\"https://design.innovaccer.com/images/withoutType.png\" width=\"50\" height=\"50\" />\n    </Icon>\n  );\n}\n    "
    },
    {
      "query": "Icon",
      "code": "import { Icon, Text } from '@innovaccer/design-system';\n    () => {\n  const types = ['filled', 'outlined', 'round', 'two-tone', 'sharp'];\n\n  const name = 'assignment';\n  return (\n    <div className=\"d-flex\">\n      {types.map((IconShape, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <div>\n              <Icon type={IconShape} size={50} name={name} />\n            </div>\n            <br />\n            <Text weight=\"strong\">{IconShape.charAt(0).toUpperCase() + IconShape.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "inlinemessage": [
    {
      "query": "InlineMessage Inline Message Within Table",
      "code": "import { InlineMessage, Card, Table } from '@innovaccer/design-system';\n    \n() => {\n  const data = [\n    {\n        \"name\": \"Asthma Outreach\",\n        \"firstName\": \"Brooke\",\n        \"lastName\": \"Heeran\",\n        \"lastUpdated\": \"June 20, 2020\",\n        \"recipients\": 11846\n    },\n    {\n        \"firstName\": \"Frazer\",\n        \"lastName\": \"Cathro\",\n        \"lastUpdated\": \"June 19, 2020\",\n        \"name\": \"HbA1c Test due\",\n        \"recipients\": 12846\n    },\n    {\n        \"firstName\": \"Lemmie\",\n        \"name\": \"ER Education\",\n        \"lastName\": \"Ciric\",\n        \"lastUpdated\": \"May 19, 2020\",\n        \"recipients\": 118467\n    }\n];\n\n  const schema = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '30%',\n      cellType: 'WITH_META_LIST',\n      sorting: false,\n      translate: (a) => ({\n        title: a.name,\n        metaList: [`${a.recipients} recipients`]\n      }),\n    },\n    {\n      name: 'lastUpdated',\n      displayName: 'Last Updated on',\n      width: '30%',\n      sorting: false,\n    },\n    {\n      name: 'user',\n      displayName: 'Message',\n      sorting: false,\n      width: '40%',\n      cellRenderer: (props) => {\n        const { data } = props;\n        return (\n          <InlineMessage appearance='info' description='Patient profile updated.' />\n        );\n      }\n    }\n  ];\n\n  return (\n    <Card>\n      <Table\n        showMenu={false}\n        type=\"data\"\n        data={data}\n        schema={schema}\n        withHeader={false}\n        headerOptions={{\n          withSearch: false\n        }}\n      />\n    </Card>\n  );\n};\n\n    "
    },
    {
      "query": "InlineMessage Size",
      "code": "import { InlineMessage, Text } from '@innovaccer/design-system';\n    () => {\n  const sizes = ['small', 'regular'];\n\n  return (\n    <div className=\"d-flex align-items-center\">\n      {sizes.map((size, key) => {\n        return (\n          <div className=\"mr-9\" key={key}>\n            <div className=\"h-50\">\n              <InlineMessage size={size} appearance=\"info\" description=\"There are two new referral requests.\" />\n            </div>\n            <br />\n            <Text weight=\"strong\">{size}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "InlineMessage   Alert Message",
      "code": "import { InlineMessage } from '@innovaccer/design-system';\n    () => <InlineMessage appearance=\"alert\" description=\"Inline message goes here.\" />\n    "
    },
    {
      "query": "InlineMessage   Default Message",
      "code": "import { InlineMessage } from '@innovaccer/design-system';\n    () => <InlineMessage description=\"Create a strong, unique password.\" />\n    "
    },
    {
      "query": "InlineMessage   Info Message",
      "code": "import { InlineMessage } from '@innovaccer/design-system';\n    () => <InlineMessage appearance=\"info\" description=\"There are two new referral requests.\" />\n    "
    },
    {
      "query": "InlineMessage   Success Message",
      "code": "import { InlineMessage } from '@innovaccer/design-system';\n    () => <InlineMessage appearance=\"success\" description=\"Inline message goes here.\" />\n    "
    },
    {
      "query": "InlineMessage   Warning Message",
      "code": "import { InlineMessage } from '@innovaccer/design-system';\n    () => <InlineMessage appearance=\"warning\" description=\"Inline message goes here.\" />\n    "
    }
  ],
  "input": [
    {
      "query": "Input",
      "code": "import { Input } from '@innovaccer/design-system';\n    () => {\n  const inputType = 'url';\n\n  const value = '';\n\n  const size = 'large';\n\n  const placeholder = 'Placeholder';\n\n  const disabled = false;\n\n  const readOnly = false;\n\n  const icon = '';\n\n  const required = false;\n\n  const inlineLabel = '';\n\n  const error = false;\n\n  const info = 'sample info popover';\n\n  const pattern = '';\n\n  const min = 1;\n\n  const max = 30;\n\n  const minLength = 1;\n\n  const maxLength = 30;\n\n  return (\n    <div className=\"w-25\">\n      <Input\n        name=\"input\"\n        type={inputType}\n        value={value}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={action('on-change')}\n        onClick={action('on-click')}\n        onClear={action('on-clear')}\n        placeholder={placeholder}\n        inlineLabel={inlineLabel}\n        size={size}\n        icon={icon}\n        required={required}\n        error={error}\n        info={info}\n        pattern={pattern}\n        min={min}\n        max={max}\n        minLength={minLength}\n        maxLength={maxLength}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Input } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState('Joy Lawson');\n\n  const onChange = React.useCallback((e) => {\n    setValue(e.target.value);\n  }, []);\n\n  const onClear = React.useCallback(() => {\n    setValue('');\n  }, []);\n\n  return (\n    <Input\n      placeholder=\"Name\"\n      name=\"input\"\n      className=\"w-25\"\n      value={value}\n      onChange={onChange}\n      onClear={onClear}\n    />\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Input } from '@innovaccer/design-system';\n    () => (\n  <Input name=\"input\" placeholder=\"Search\" className=\"w-25\" onChange={action('on-change')} icon={'search'} />\n)\n    "
    },
    {
      "query": "Input",
      "code": "import { Label, Input, Icon, HelpText } from '@innovaccer/design-system';\n    () => {\n  const [visibility, setVisibility] = React.useState(false);\n  const [visibility2, setVisibility2] = React.useState(false);\n  const [inputValue, setInputValue] = React.useState('Value');\n  const [secondInputValue, setSecondInputValue] = React.useState('Value');\n  return (\n    <div className=\"d-flex\">\n      <div>\n        <Label htmlFor=\"password-1\" withInput={true}>\n          Password\n        </Label>\n        <Input\n          id=\"password-1\"\n          placeholder=\"Password\"\n          value={inputValue}\n          type={visibility ? 'text' : 'password'}\n          onChange={(ev) => {\n            ev.persist();\n            setInputValue(ev.target.value);\n          }}\n          actionIcon={\n            <Icon\n              aria-label={visibility ? 'Show Password' : 'Hide Password'}\n              onClick={() => setVisibility((x) => !x)}\n              name={visibility ? 'visibility_on' : 'visibility_off'}\n              className=\"cursor-pointer\"\n            />\n          }\n        />\n        <HelpText message={'Create a string, unique password'} />\n      </div>\n      <div className=\"ml-6\">\n        <Label htmlFor=\"password-2\" withInput={true}>\n          Password\n        </Label>\n        <Input\n          id=\"password-2\"\n          placeholder=\"Password\"\n          value={secondInputValue}\n          type={visibility2 ? 'text' : 'password'}\n          onChange={(ev) => {\n            ev.persist();\n            setSecondInputValue(ev.target.value);\n          }}\n          actionIcon={\n            <Icon\n              aria-label={visibility ? 'Show Password' : 'Hide Password'}\n              onClick={() => setVisibility2((x) => !x)}\n              name={visibility2 ? 'visibility_on' : 'visibility_off'}\n              className=\"cursor-pointer\"\n            />\n          }\n        />\n        <HelpText error={true} message={'Create a password with at least 8 characters'} />\n      </div>\n    </div>\n  );\n};\n    "
    },
    {
      "query": "Input",
      "code": "import { Label, Input } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState('lawsonjoy@gmail.com');\n\n  const onChange = React.useCallback((e) => {\n    setValue(e.target.value)\n  }, []);\n\n  return (\n    <>\n      <Label \n        withInput={true}\n        htmlFor=\"email\"\n      >\n        Email\n      </Label>\n      <Input\n        name=\"input\"\n        className=\"w-25\"\n        value={value}\n        onChange={onChange}\n        placeholder=\"Email\"\n      />\n    </>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Label, Input } from '@innovaccer/design-system';\n    () => {\n  const [inputValue, setInputValue] = React.useState('Joy Lawson');\n  const [secondInputValue, setSecondInputValue] = React.useState('Joy Lawson');\n  return (\n    <div className=\"d-flex align-items-end\">\n      <div>\n        <Label htmlFor=\"fullName\" withInput={true}>\n          Full Name\n        </Label>\n        <Input\n          placeholder=\"Full name\"\n          id=\"fullName\"\n          value={inputValue}\n          onChange={(ev) => {\n            ev.persist();\n            setInputValue(ev.target.value);\n          }}\n        />\n      </div>\n      <div className=\"d-flex align-items-center ml-9\">\n        <Label htmlFor=\"fullName2\" className=\"mr-6\">\n          Full Name\n        </Label>\n        <Input\n          placeholder=\"Full name\"\n          id=\"fullName2\"\n          value={secondInputValue}\n          onChange={(ev) => {\n            ev.persist();\n            setSecondInputValue(ev.target.value);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n    "
    },
    {
      "query": "Input",
      "code": "import { Label, Input, Text } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <div className=\"d-flex\">\n        <div>\n          <Label htmlFor=\"email\" withInput={true} required={true}>\n            Email\n          </Label>\n          <Input id=\"email\" required placeholder=\"e.g lawsonjoy@gmail.com\" />\n          <div className=\"d-flex align-items-center justify-content-center mt-5\">\n            <Text weight=\"medium\">Required Field</Text>\n          </div>\n        </div>\n        <div className=\"ml-9\">\n          <Label htmlFor=\"email2\" withInput={true}>\n            Email\n          </Label>\n          <Input id=\"email2\" placeholder=\"e.g lawsonjoy@gmail.com\" />\n          <div className=\"d-flex align-items-center justify-content-center mt-5\">\n            <Text weight=\"medium\">Optional Field</Text>\n          </div>\n        </div>\n      </div>\n      <div className=\"d-flex mt-9\">\n        <div>\n          <Label htmlFor=\"email3\" withInput={true}>\n            Email\n          </Label>\n          <Input id=\"email3\" placeholder=\"e.g lawsonjoy@gmail.com\" />\n          <div className=\"d-flex align-items-center justify-content-center mt-5\">\n            <Text weight=\"medium\">Required Field</Text>\n          </div>\n        </div>\n        <div className=\"ml-9\">\n          <Label htmlFor=\"email4\" withInput={true} optional={true}>\n            Email\n          </Label>\n          <Input id=\"email4\" placeholder=\"e.g lawsonjoy@gmail.com\" />\n          <div className=\"d-flex align-items-center justify-content-center mt-5\">\n            <Text weight=\"medium\">Optional Field</Text>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Input   Action Icon",
      "code": "import { Icon, Input } from '@innovaccer/design-system';\n    () => {\n  const actionIcon = (\n    <Icon name=\"events\" onClick={() => console.log(\"custom action icon\")} />\n  );\n\n  return (\n    <Input\n      name=\"input\"\n      actionIcon={actionIcon}\n    />\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Input, Icon } from '@innovaccer/design-system';\n    () => {\n  const [visibility, setVisibility] = React.useState(false);\n  const [value, setValue] = React.useState('Value');\n  const handleParentChange = (event) => {\n    const updatedValue = event.target.value;\n      setValue(updatedValue);\n  };\n  const [value1, setValue1] = React.useState('Value');\n  const onChangeHandler = (event) => {\n    const updatedValue = event.target.value;\n      setValue1(updatedValue);\n  };\n  const onClearHandler = () => {\n    const updatedValue = '';\n      setValue1(updatedValue);\n  };\n  return (\n    <div className=\"d-flex\">\n      <Input\n        name=\"input\"\n        value={value}\n        type={visibility ? 'text' : 'password'}\n        placeholder=\"Placeholder\"\n        actionIcon={\n          <Icon\n            onClick={() => setVisibility((x) => !x)}\n            name={visibility ? 'visibility_on' : 'visibility_off'}\n            aria-label={visibility ? 'Show Password' : 'Hide Password'}\n            className=\"cursor-pointer\"\n          />\n        }\n        onChange={handleParentChange}\n      />\n      <Input\n        name=\"input\"\n        value={value1}\n        type=\"text\"\n        placeholder=\"PlaceHolder\"\n        onChange={onChangeHandler}\n        onClear={onClearHandler}\n      />\n    </div>\n  );\n};\n    "
    },
    {
      "query": "Input",
      "code": "import { Input, Text } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <div className=\"w-25\">\n        <Input name=\"input\" type=\"number\" size=\"regular\" onChange={action('on-change')} />\n        <br />\n        <Text weight=\"strong\">Regular</Text>\n      </div>\n      <br />\n      <div className=\"w-25\">\n        <Input name=\"input\" type=\"number\" size=\"large\" onChange={action('on-change')} />\n        <br />\n        <Text weight=\"strong\">Large</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Text, Input } from '@innovaccer/design-system';\n    () => {\n  const value = '';\n\n  const sizes = ['tiny', 'regular', 'large'];\n\n  const placeholder = 'Placeholder';\n\n  return (\n    <div>\n      {sizes.map((InputSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-9 mb-8 w-25\">\n            <Text weight=\"strong\">{InputSize.charAt(0).toUpperCase() + InputSize.slice(1)}</Text>\n            <Input\n              name=\"input\"\n              value={value}\n              onChange={action('on-change')}\n              onClick={action('on-click')}\n              onClear={action('on-clear')}\n              placeholder={placeholder}\n              size={InputSize}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Input, Text } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"Row\">\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" onChange={action('on-change')} onClear={action('on-clear')} />\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input\n          name=\"input\"\n          value=\"\"\n          placeholder=\"Placeholder\"\n          onChange={action('on-change')}\n          onClear={action('on-clear')}\n          info=\"sample info popover\"\n        />\n        <br />\n        <Text weight=\"strong\">Placeholder</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" onChange={action('on-change')} onClear={action('on-clear')} error={true} />\n        <br />\n        <Text weight=\"strong\">Error</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" onChange={action('on-change')} disabled={true} />\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" />\n        <br />\n        <Text weight=\"strong\">Read Only</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Input, Text } from '@innovaccer/design-system';\n    () => {\n  const icon = 'search';\n  return (\n    <div className=\"Row\">\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" onChange={action('on-change')} onClear={action('on-clear')} icon={icon} />\n        <br />\n        <Text weight=\"strong\">Default</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input\n          name=\"input\"\n          placeholder=\"Placeholder\"\n          onChange={action('on-change')}\n          onClear={action('on-clear')}\n          info=\"sample info popover\"\n          icon={icon}\n        />\n        <br />\n        <Text weight=\"strong\">Placeholder</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" onChange={action('on-change')} onClear={action('on-clear')} error={true} icon={icon} />\n        <br />\n        <Text weight=\"strong\">Error</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" onChange={action('on-change')} disabled={true} icon={icon} />\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Input name=\"input\" value=\"Value\" icon={icon} />\n        <br />\n        <Text weight=\"strong\">Read Only</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Input, Text } from '@innovaccer/design-system';\n    () => {\n  const label = 'USD';\n  return (\n    <div>\n      <div className=\"w-25\">\n        <Input name=\"input\" type=\"number\" size=\"regular\" inlineLabel={label} onChange={action('on-change')} />\n        <br />\n        <Text weight=\"strong\">Regular</Text>\n      </div>\n      <br />\n      <div className=\"w-25\">\n        <Input name=\"input\" type=\"number\" size=\"large\" inlineLabel={label} onChange={action('on-change')} />\n        <br />\n        <Text weight=\"strong\">Large</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Text, Label, Input, HelpText } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"Row\">\n      <div className=\"mr-9 mb-8 w-25\">\n        <div>\n          <Text weight=\"strong\">No Help Text</Text>\n          <br />\n          <br />\n          <Label withInput={true} required={true}>\n            Full Name\n          </Label>\n          <Input name=\"input\" onChange={action('on-change')} onClear={action('on-clear')} required={true} />\n        </div>\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Text weight=\"strong\">Help Text Default</Text>\n        <br />\n        <br />\n        <Label withInput={true} required={true}>\n          Password\n        </Label>\n        <Input\n          name=\"input\"\n          type=\"password\"\n          onChange={action('on-change')}\n          onClear={action('on-clear')}\n          required={true}\n        />\n        <HelpText message={'Pick a strong, unique password'} />\n      </div>\n      <div className=\"mr-9 mb-8 w-25\">\n        <Text weight=\"strong\">Help Text Error</Text>\n        <br />\n        <br />\n        <Label withInput={true} required={true}>\n          Password\n        </Label>\n        <Input\n          name=\"input\"\n          type=\"password\"\n          onChange={action('on-change')}\n          onClear={action('on-clear')}\n          required={true}\n          error={true}\n        />\n        <HelpText error={true} message={'Pick a strong, unique password'} />\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "inputmask": [
    {
      "query": "InputMask All",
      "code": "import { InputMask } from '@innovaccer/design-system';\n    // import { Utils } from '@innovaccer/design-system';\n\n() => {\n  const dateMask = Utils.masks.date['mm/dd/yyyy'];\n  const dateValidator = (val) => Utils.validators.date(val, 'mm/dd/yyyy');\n\n  return (\n    <div className=\"w-25\">\n      <InputMask\n        mask={dateMask}\n        validators={dateValidator}\n      />\n    </div>\n  );\n};\n\n    "
    },
    {
      "query": "InputMask Card Number",
      "code": "import { Label, InputMask } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"w-25\">\n      <Label className=\"mb-3\">Card Number</Label>\n      <InputMask\n        mask={[\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          ' ',\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          ' ',\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          ' ',\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n        ]}\n        placeholder=\"____ ____ ____ ____\"\n        name=\"card_number\"\n        icon=\"credit_card\"\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "InputMask Help Text",
      "code": "import { Row, Label, InputMask } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Row className=\"w-25 d-flex\">\n      <div>\n        <Label withInput={true}>Phone Number</Label>\n        <InputMask\n          icon=\"call\"\n          name=\"primary_phone\"\n          placeholder=\"(___) ___-____\"\n          helpText=\"Enter Your Phone number\"\n          mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n        />\n      </div>\n\n      <div className=\"mt-8\">\n        <Label withInput={true}>Phone Number</Label>\n        <InputMask\n          icon=\"call\"\n          error={true}\n          name=\"primary_phone\"\n          placeholder=\"(000) 0__-____\"\n          caption=\"Please Enter Correct Phone number\"\n          mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n        />\n      </div>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "InputMask Phone Number",
      "code": "import { Label, InputMask } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"w-25\">\n      <Label withInput={true}>Phone Number</Label>\n      <InputMask\n        mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n        placeholder=\"(___) ___-____\"\n        name=\"primary_phone\"\n        icon=\"call\"\n      />\n    </div>\n  );\n}\n    "
    }
  ],
  "label": [
    {
      "query": "Label",
      "code": "import { Label } from '@innovaccer/design-system';\n    () => {\n  const disabled = false;\n  const required = false;\n  const optional = false;\n\n  const options = {\n    disabled,\n    required,\n    optional,\n  };\n\n  return <Label {...options}>Label</Label>;\n}\n    "
    },
    {
      "query": "Label",
      "code": "import { Label } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <div className=\"mr-5 mb-8\">\n        <Label optional={true}>Not required</Label>\n      </div>\n      <div>\n        <Label required={true}>Required</Label>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Label",
      "code": "import { Label } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-5\">\n        <Label>Enabled Label</Label>\n      </div>\n      <div>\n        <Label disabled={true}>Disabled Label</Label>\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "legend": [
    {
      "query": "Legend All",
      "code": "import { Legend } from '@innovaccer/design-system';\n    () => {\n  return(\n    <Legend iconAppearance=\"inverse\" iconSize={14}>\n    Legend\n  </Legend>\n    );\n}\n    "
    },
    {
      "query": "Legend",
      "code": "import { Legend } from '@innovaccer/design-system';\n    () => {\n  const appearances = [\n    'primary',\n    'secondary',\n    'success',\n    'alert',\n    'warning',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n    'inverse',\n  ];\n\n  return (\n    <div>\n      {appearances.map((appearance, i) => {\n        return (\n          <div key={i} className=\"mb-4\">\n            <Legend iconAppearance={appearance}>{appearance}</Legend>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Legend",
      "code": "import { Legend } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['default', 'white', 'destructive', 'subtle', 'disabled'];\n  return (\n    <div>\n      {appearances.map((appearance, i) => {\n        return (\n          <div key={i} className={`${appearance === 'white' ? 'bg-dark' : 'bg-transparent'} mb-4 w-25 `}>\n            <Legend labelAppearance={appearance} iconAppearance={appearance === 'white' ? 'secondary' : 'inverse'}>\n              {appearance}\n            </Legend>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Legend",
      "code": "import { Legend } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-5\">\n        <Legend labelWeight={'strong'}>Strong</Legend>\n      </div>\n      <div>\n        <Legend labelWeight={'medium'}>Medium</Legend>\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "link": [
    {
      "query": "Link",
      "code": "import { Link } from '@innovaccer/design-system';\n    () => {\n  const href = 'http://innovaccer.com';\n  const target = '_blank';\n  const size = 'regular';\n  const appearance = 'subtle';\n  const disabled = false;\n\n  const options = {\n    href,\n    target,\n    size,\n    appearance,\n    disabled,\n  };\n\n  return (\n    <Link {...options} onClick={action('link click')}>\n      Click this link.\n    </Link>\n  );\n}\n    "
    },
    {
      "query": "Link",
      "code": "import { Link } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <Link appearance=\"default\" href=\"http://innovaccer.com\">\n        Default Link.\n      </Link>\n      <Link appearance=\"subtle\" href=\"http://innovaccer.com\" className=\"ml-7\">\n        Subtle Link.\n      </Link>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Link",
      "code": "import { Link } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <Link href=\"http://innovaccer.com\" disabled={false}>\n        Link Enabled.\n      </Link>\n      <Link href=\"http://innovaccer.com\" disabled={true} className=\"ml-7\">\n        Link Disabled.\n      </Link>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Link",
      "code": "import { Link } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <Link href=\"http://innovaccer.com\" size=\"regular\">\n        Regular Link.\n      </Link>\n      <Link href=\"http://innovaccer.com\" size=\"tiny\" className=\"ml-7\">\n        Tiny Link.\n      </Link>\n    </div>\n  );\n}\n    "
    }
  ],
  "list": [
    {
      "query": "List All",
      "code": "import { Card, List } from '@innovaccer/design-system';\n    () => {\n  const async = true;\n\n  const applyLoaderSchema = true;\n\n  const type = 'resource';\n\n  const size = 'comfortable';\n\n  const withHeader = false;\n\n  const withCheckbox = false;\n\n  const withPagination = true;\n\n  const page = 1;\n\n  const paginationType = 'jump';\n\n  const pageSize = 12;\n\n  const multipleSorting = false;\n\n  const separator = false;\n\n  let dataAttr = {};\n  if (async) {\n    dataAttr = {\n      fetchData,\n    };\n  } else {\n    dataAttr = {\n      schema,\n      data,\n    };\n  }\n\n  return (\n    <div className=\"List-wrapper\">\n      <Card className=\"h-100 overflow-hidden\">\n        <List\n          {...dataAttr}\n          withHeader={withHeader}\n          headerOptions={{\n            withSearch: true,\n          }}\n          withCheckbox={withCheckbox}\n          type={type}\n          size={size}\n          separator={separator}\n          withPagination={withPagination}\n          paginationType={paginationType}\n          page={page}\n          pageSize={pageSize}\n          loaderSchema={applyLoaderSchema ? loaderSchema : undefined}\n          onRowClick={(rowData, rowIndex) =>\n            action(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)()\n          }\n          onSelect={(rowIndex, selected, selectedList) =>\n            action(\n              `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(selectedList)}`\n            )()\n          }\n          onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n          multipleSorting={multipleSorting}\n          sortingList={[{ name: 'name', type: 'desc' }]}\n          filterList={{\n            name: ['h-r', 's-z'],\n          }}\n        />\n      </Card>\n    </div>\n  );\n}\n    "
    }
  ],
  "loaders": [
    {
      "query": "Loaders Placeholder All",
      "code": "import { Placeholder, PlaceholderParagraph } from '@innovaccer/design-system';\n    () => {\n  const withImage = false;\n  const round = false;\n  const imageSize = 'large';\n\n  const options = {\n    withImage,\n    round,\n    imageSize,\n  };\n\n  return (\n    <Placeholder {...options}>\n      <PlaceholderParagraph length=\"small\" />\n      <PlaceholderParagraph length=\"medium\" />\n    </Placeholder>\n  );\n}\n    "
    },
    {
      "query": "PlaceholderImage",
      "code": "import { PlaceholderImage } from '@innovaccer/design-system';\n    () => {\n  const round = false;\n  const size = 'small';\n\n  const options = {\n    round,\n    size,\n  };\n\n  return <PlaceholderImage {...options} />;\n}\n    "
    },
    {
      "query": "PlaceholderImage",
      "code": "import { PlaceholderImage, Text } from '@innovaccer/design-system';\n    () => {\n  const size = 'medium';\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-6\">\n        <PlaceholderImage size={size} round={false} />\n        <br />\n        <Text weight=\"strong\">Square</Text>\n      </div>\n      <div>\n        <PlaceholderImage size={size} round={true} />\n        <br />\n        <Text weight=\"strong\">Round</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PlaceholderImage",
      "code": "import { Text, PlaceholderImage } from '@innovaccer/design-system';\n    () => {\n  const round = false;\n  const sizes = ['small', 'medium', 'large'];\n  const options = {\n    round,\n  };\n\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((PlaceholderSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-7\">\n            <Text weight=\"strong\">{PlaceholderSize.charAt(0).toUpperCase() + PlaceholderSize.slice(1)}</Text>\n            <PlaceholderImage size={PlaceholderSize} {...options} className=\"mt-5\" />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Loaders Placeholder Skeleton Loaders",
      "code": "import { Card, Placeholder, PlaceholderParagraph } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Card>\n      <div className=\"px-6 py-5\">\n        <Placeholder round={true} imageSize=\"large\">\n          <PlaceholderParagraph length=\"large\" size=\"m\" />\n          <PlaceholderParagraph size=\"m\" />\n        </Placeholder>\n      </div>\n      <div className=\"px-6 py-5 border-top\">\n        <Placeholder round={true} imageSize=\"large\">\n          <PlaceholderParagraph length=\"large\" size=\"m\" />\n          <PlaceholderParagraph size=\"m\" />\n        </Placeholder>\n      </div>\n      <div className=\"px-6 py-5 border-top\">\n        <Placeholder round={true} imageSize=\"large\">\n          <PlaceholderParagraph length=\"large\" size=\"m\" />\n          <PlaceholderParagraph size=\"m\" />\n        </Placeholder>\n      </div>\n      <div className=\"px-6 py-5 border-top\">\n        <Placeholder round={true} imageSize=\"large\">\n          <PlaceholderParagraph length=\"large\" size=\"m\" />\n          <PlaceholderParagraph size=\"m\" />\n        </Placeholder>\n      </div>\n    </Card>\n  );\n}\n    "
    },
    {
      "query": "Loaders Placeholder   Image",
      "code": "import { Placeholder, PlaceholderParagraph, Text } from '@innovaccer/design-system';\n    () => (\n  <div className='d-flex'>\n      <div className='w-25 mr-8'>\n        <Placeholder withImage={true}>\n          <PlaceholderParagraph length=\"large\" />\n        </Placeholder>\n        <Text weight=\"strong\">With Image</Text>\n      </div>\n      <div className='w-25'>\n        <Placeholder withImage={false}>\n          <PlaceholderParagraph length=\"large\" />\n        </Placeholder>\n        <Text weight=\"strong\">Without Image</Text>\n      </div>\n    </div>\n)\n    "
    },
    {
      "query": "Loaders Placeholder   Image Shape",
      "code": "import { Placeholder, PlaceholderParagraph, Text } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"w-25 mr-8\">\n        <Placeholder withImage={true} round={true}>\n          <PlaceholderParagraph length=\"large\" />\n        </Placeholder>\n        <Text weight=\"strong\">Round</Text>\n      </div>\n      <div className=\"w-25\">\n        <Placeholder withImage={true}>\n          <PlaceholderParagraph length=\"large\" />\n        </Placeholder>\n        <Text weight=\"strong\">Square</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Loaders Placeholder   Image Size",
      "code": "import { Placeholder, PlaceholderParagraph, Text } from '@innovaccer/design-system';\n    () => {\n  const sizes = ['small', 'medium', 'large'];\n\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((size, ind) => {\n        return (\n          <div key={ind} className=\"w-25 mr-8\">\n            <Placeholder imageSize={size} withImage={true}>\n              <PlaceholderParagraph length=\"large\" />\n            </Placeholder>\n            <Text weight=\"strong\">{size.charAt(0).toUpperCase() + size.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Loaders Spinner All",
      "code": "import { Spinner } from '@innovaccer/design-system';\n    () => {\n  const appearance = 'white';\n\n  const size = 'small';\n\n  const options = {\n    appearance,\n    size,\n  };\n\n  return (\n    <div className={appearance === 'white' ? 'bg-dark' : 'bg-transparent'}>\n      <Spinner {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Loaders Spinner Inline Loader",
      "code": "import { Spinner, Text } from '@innovaccer/design-system';\n    () => (\n  <div className=\"d-flex\">\n    <Spinner appearance=\"primary\" size=\"small\" className=\"mr-3\" />\n    <Text>uploading...</Text>\n  </div>\n)\n    "
    },
    {
      "query": "Loaders Spinner Modal Loader",
      "code": "import { Spinner } from '@innovaccer/design-system';\n    () => <Spinner appearance=\"primary\" size=\"medium\" />\n    "
    },
    {
      "query": "Spinner",
      "code": "import { Spinner, Text } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['primary', 'secondary', 'white'];\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-8\">\n            <div className={appear === 'white' ? 'bg-dark' : 'bg-transparent'}>\n              <Spinner appearance={appear} />\n            </div>\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Spinner",
      "code": "import { Spinner, Text } from '@innovaccer/design-system';\n    () => {\n  const sizes = ['small', 'medium', 'large'];\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((SpinnerSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-8\">\n            <div className=\"h-75\">\n              <Spinner size={SpinnerSize} />\n            </div>\n            <Text weight=\"strong\">{SpinnerSize.charAt(0).toUpperCase() + SpinnerSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PlaceholderParagraph",
      "code": "import { PlaceholderParagraph } from '@innovaccer/design-system';\n    () => {\n  const length = 'medium';\n  const size = 'l';\n\n  return <PlaceholderParagraph size={size} length={length} />;\n}\n    "
    },
    {
      "query": "PlaceholderParagraph",
      "code": "import { PlaceholderParagraph, Text } from '@innovaccer/design-system';\n    () => {\n  const lengths = ['small', 'medium', 'large'];\n\n  return (\n    <div>\n      {lengths.map((len, ind) => {\n        return (\n          <div key={ind} className=\"mb-7\">\n            <PlaceholderParagraph length={len} />\n            <Text weight=\"strong\">{len.charAt(0).toUpperCase() + len.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PlaceholderParagraph",
      "code": "import { PlaceholderParagraph, Text } from '@innovaccer/design-system';\n    () => {\n  const sizes = ['xxs', 'xs', 's', 'm', 'l', 'xl', 'xxl', 'xxxl'];\n\n  return (\n    <div>\n      {sizes.map((s, ind) => {\n        return (\n          <div key={ind} className=\"mb-7\">\n            <PlaceholderParagraph size={s} />\n            <Text weight=\"strong\">{s}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "message": [
    {
      "query": "Message All",
      "code": "import { Message, Text } from '@innovaccer/design-system';\n    () => {\n  const appearance = 'warning';\n  const title = 'Design System';\n  const description = 'Design System is a library of reusable components';\n\n  return (\n    <Message\n      appearance={appearance}\n      title={title}\n      description={description}\n      actions={\n        <>\n          <Text className=\"cursor-pointer\" appearance=\"link\">\n            Action 1\n          </Text>\n          <Text className=\"ml-5 cursor-pointer\" appearance=\"link\">\n            Action 2\n          </Text>\n        </>\n      }\n    />\n  );\n}\n    "
    },
    {
      "query": "Message Alert Message",
      "code": "import { Row, Column, Message } from '@innovaccer/design-system';\n    () => (\n  <Row>\n    <Column size=\"8\">\n      <Message appearance=\"alert\" description=\"Could not start verification. Please try again later.\" />\n    </Column>\n  </Row>\n)\n    "
    },
    {
      "query": "Message Custom Description",
      "code": "import { Row, Column, Message, Text } from '@innovaccer/design-system';\n    () => (\n  <Row>\n    <Column size=\"8\">\n      <Message\n        actions={\n          <>\n            <Text className=\"cursor-pointer\" appearance=\"link\">\n              Try again\n            </Text>\n          </>\n        }\n      >\n        <Text appearance=\"default\">Sorry we couldn't subscribe you. Please try again.</Text>\n      </Message>\n    </Column>\n  </Row>\n)\n    "
    },
    {
      "query": "Message Info Message",
      "code": "import { Row, Column, Message } from '@innovaccer/design-system';\n    () => (\n  <Row>\n    <Column size=\"8\">\n      <Message appearance=\"info\" description=\"Patient profile has been updated with new records.\" />\n    </Column>\n  </Row>\n)\n    "
    },
    {
      "query": "Message Message With Actions",
      "code": "import { Row, Column, Message, Text } from '@innovaccer/design-system';\n    () => (\n  <Row>\n    <Column size=\"8\">\n      <Message\n        appearance=\"alert\"\n        description=\"Sorry we couldn't subscribe you. Please try again.\"\n        actions={\n          <>\n            <Text className=\"cursor-pointer\" appearance=\"link\">\n              Try again\n            </Text>\n          </>\n        }\n      />\n    </Column>\n  </Row>\n)\n    "
    },
    {
      "query": "Message Message With Title",
      "code": "import { Row, Column, Message, Text } from '@innovaccer/design-system';\n    () => (\n  <Row>\n    <Column size=\"8\">\n      <Message\n        appearance=\"warning\"\n        title=\"Sender 'Alta Wells' already exists \"\n        description=\"Based on the details you've entered, we found that this sender might already be on our platform.\"\n        actions={\n          <>\n            <Text className=\"cursor-pointer\" appearance=\"link\">\n              Edit details\n            </Text>\n          </>\n        }\n      />\n    </Column>\n  </Row>\n)\n    "
    },
    {
      "query": "Message Success Message",
      "code": "import { Row, Column, Message } from '@innovaccer/design-system';\n    () => (\n  <Row>\n    <Column size=\"8\">\n      <Message appearance=\"success\" description=\"Password updated. Login with your updated credentials.\" />\n    </Column>\n  </Row>\n)\n    "
    },
    {
      "query": "Message",
      "code": "import { Row, Column, Message, Text } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['alert', 'info', 'success', 'warning'];\n  return (\n    <Row>\n      {appearances.map((appear, ind) => {\n        return (\n          <Column sizeM=\"4\" className=\"p-4\" key={ind}>\n            <Message\n              actions={\n                <>\n                  <Text appearance=\"link\" className=\"cursor-pointer\">\n                    Action 1\n                  </Text>\n                  <Text appearance=\"link\" className=\"ml-5 cursor-pointer\">\n                    Action 2\n                  </Text>\n                </>\n              }\n              appearance={appear}\n              description=\"Patient record has been updated with new records.\"\n              title=\"Outreach was not saved\"\n            />\n            <br />\n            <Text weight=\"strong\" className=\"d-flex flex-column align-items-center\">\n              {appear.charAt(0).toUpperCase() + appear.slice(1)}\n            </Text>\n          </Column>\n        );\n      })}\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Message",
      "code": "import { Row, Column, Message, Text } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['alert', 'info', 'success', 'warning'];\n  return (\n    <Row>\n      {appearances.map((appear, ind) => {\n        return (\n          <Column sizeM=\"4\" className=\"p-4\" key={ind}>\n            <Message\n              actions={\n                <>\n                  <Text appearance=\"link\" className=\"cursor-pointer\">\n                    Action 1\n                  </Text>\n                  <Text appearance=\"link\" className=\"ml-5 cursor-pointer\">\n                    Action 2\n                  </Text>\n                </>\n              }\n              appearance={appear}\n              description=\"Patient record has been updated with new records.\"\n            />\n            <br />\n            <Text weight=\"strong\" className=\"d-flex flex-column align-items-center\">\n              {appear.charAt(0).toUpperCase() + appear.slice(1)}\n            </Text>\n          </Column>\n        );\n      })}\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Message Warning Message",
      "code": "import { Row, Column, Message } from '@innovaccer/design-system';\n    () => (\n  <Row>\n    <Column size=\"8\">\n      <Message appearance=\"warning\" description=\"Try to save again. If it continues to fail, please raise a ticket.\" />\n    </Column>\n  </Row>\n)\n    "
    }
  ],
  "metalist": [
    {
      "query": "MetaList All",
      "code": "import { MetaList } from '@innovaccer/design-system';\n    () => {\n  const list = [\n    {\n      label: 'Meta data',\n      icon: 'assessment',\n    },\n    {\n      label: 'Meta data',\n      icon: 'assessment',\n    },\n  ];\n\n  return (\n    <div>\n      <MetaList list={list} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "MetaList With Separator",
      "code": "import { MetaList } from '@innovaccer/design-system';\n    () => {\n  const seperator = true;\n\n  const list = [\n    {\n      label: 'Meta data',\n      icon: 'assessment',\n    },\n    {\n      label: 'Meta data',\n      icon: 'assessment',\n    },\n  ];\n\n  return (\n    <div>\n      <MetaList list={list} seperator={seperator} />\n    </div>\n  );\n}\n    "
    }
  ],
  "metricinput": [
    {
      "query": "Input",
      "code": "import { MetricInput } from '@innovaccer/design-system';\n    () => {\n  const size = 'large';\n\n  const placeholder = 'Placeholder';\n\n  const disabled = false;\n\n  const readOnly = false;\n\n  const icon = '';\n\n  const prefix = '';\n\n  const suffix = '';\n\n  const error = false;\n\n  return (\n    <div className=\"w-25\">\n      <MetricInput\n        name=\"input\"\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={action('on-change')}\n        onClick={action('on-click')}\n        placeholder={placeholder}\n        aria-label=\"Metric input example\"\n        prefix={prefix}\n        suffix={suffix}\n        size={size}\n        icon={icon}\n        error={error}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Row, Label, Column, MetricInput } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState(15);\n\n  return (\n    <Row className=\"align-items-center\">\n      <Label htmlFor=\"metric-input\" className=\"mr-5\">  No. of Days </Label>\n      <Column size={1}>\n        <MetricInput\n          id=\"metric-input\"\n          name=\"metric-input\"\n          size=\"regular\"\n          value={value}\n          onChange={e => { setValue(e.target.value); }}\n        />\n        </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Row, Column, MetricInput } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState(10);\n\n  return (\n    <Row>\n      <Column size={1}>\n        <MetricInput\n          aria-label=\"Metric Input Label\"\n          value={value}\n          onChange={(e) => { setValue(e.target.value) }}\n        />\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Row, Column, MetricInput, Text } from '@innovaccer/design-system';\n    () => (\n  <Row>\n    <Column size={2} className=\"d-flex\">\n      <div className=\"flex-column align-items-center mr-8\">\n        <MetricInput aria-label=\"Metric input regular size\" size=\"regular\" className=\"mb-3\" />\n        <Text>Regular</Text>\n      </div>\n      <div className=\"flex-column align-items-center\">\n        <MetricInput aria-label=\"Metric input large size\" size=\"large\" className=\"mb-3\" />\n        <Text>Large</Text>\n      </div>\n    </Column>\n  </Row>\n)\n    "
    },
    {
      "query": "Input",
      "code": "import { Row, Label, Column, MetricInput } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState(625);\n\n  return (\n    <Row className=\"align-items-center\">\n      <Label htmlFor=\"metric-input\" className=\"mr-5\">Cost</Label>\n      <Column size={2}>\n        <MetricInput\n          id=\"metric-input\"\n          prefix=\"USD\"\n          value={value}\n          onChange={e => { setValue(e.target.value); }}\n        />\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Row, Label, Column, MetricInput } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState(65);\n\n  return (\n    <Row className=\"align-items-center\">\n      <Label htmlFor=\"metric-input\" className=\"mr-5\">Body Height</Label>\n      <Column size={1}>\n        <MetricInput\n          id=\"metric-input\"\n          suffix=\"in\"\n          value={value}\n          onChange={e => { setValue(e.target.value); }}\n        />\n      </Column>\n    </Row>\n  );\n}\n    "
    }
  ],
  "modal": [
    {
      "query": "Modal",
      "code": "import { Button, Modal, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const dimension = 'medium';\n  const backdropClose = true;\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading'\n        }}\n        footer={(\n          <>\n            <Button appearance=\"basic\" onClick={()=>console.log('Basic button click')}>Basic</Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={()=>console.log('Primary button click')}>Primary</Button>\n          </>\n        )}\n      >\n        <Text>Modal Body</Text>\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription\n          description=\"Card Sections include supporting text like an article summary or a restaurant description.\"\n        />\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Button, Modal, Paragraph } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const backdropClose = false;\n  const dimension = 'small';\n\n  const onClose = () => {\n    setOpen(!open);\n    console.log('on close triggered');\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Discard Changes',\n        }}\n        footer={(\n          <>\n            <Button appearance=\"basic\" onClick={console.log('Cancel button click')}>Cancel</Button>\n            <Button appearance=\"alert\" className=\"ml-3\" onClick={console.log('Discard button click')}>Discard</Button>\n          </>\n        )}\n      >\n        <Paragraph>\n            You are about to discard all the saved filters.\n            Once discarded, this action cannot be undone.\n            Please be sure of it.\n        </Paragraph>\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Button, Modal, Paragraph, Text } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const backdropClose = false;\n  const dimension = 'small';\n\n  const onClose = () => {\n    setOpen(!open);\n    console.log('on close triggered');\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Edit filters',\n        }}\n        footer={(\n          <>\n            <Button appearance=\"basic\" onClick={console.log('Cancel button click')}>Cancel</Button>\n            <Button appearance=\"primary\" className=\"ml-3\" onClick={console.log('Discard button click')}>\n                Create version\n            </Button>\n          </>\n        )}\n      >\n        <Paragraph>\n          Currently, Version 1.0 is published.\n          This will create a new version of the registry which will be saved as draft untill published.<br />\n        </Paragraph><br/>\n        <Text>Do you want to continue?</Text>\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Text, Button, Modal, Message, List } from '@innovaccer/design-system';\n    /*\n// styles.css\n.Modal-list {\n    height: var(--spacing-8);\n}\n*/\n\n() => {\n  const [open, setOpen] = React.useState(false);\n  const backdropClose = true;\n  const dimension = 'medium';\n  const onClose = () => {\n    setOpen(!open);\n    console.log('on close triggered');\n  };\n\n  const data = [{ Name:'ER Education' }, { Name:'HbA1c Test Due' } , { Name:'Flu Vaccination' }  , { Name:'Well-Child Visit' }, { Name:'Cervical Screening' }, { Name:'HbA1c Test Due' } , { Name:'Flu Vaccination' }  , { Name:'Well-Child Visit' }, { Name:'Cervical Screening' }, { Name:'HbA1c Test Due' } , { Name:'Flu Vaccination' }  , { Name:'Well-Child Visit' }];\n\n  const schema = [\n    {\n      name: 'info',\n      displayName: 'Info',\n      cellRenderer: (props) => {\n        return (\n          <Text className=\" ml-4\">{`${props.data.Name}`}</Text>\n        );\n      }\n    },\n  ];\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Cannot delete Leona Lucas',\n        }}\n        footer={(\n          <>\n            <Button className=\"ml-4\" onClick={console.log('Close button click')}>Close</Button>\n          </>\n        )}\n      >\n        <div>\n          <Message\n            appearance=\"warning\"\n            description=\"Following 11 outreaches are currently scheduled using this sender's details.\"\n          />\n        </div>\n        <div className=\"my-5 overflow-auto border Modal-list\">\n          <List\n            data={data}\n            schema={schema}\n            size=\"compressed\"\n          />\n        </div>\n        <Text weight=\"strong\" className=\"mt-2\">What to do next?</Text><br/>\n        <Text>\n          You cannot delete this sender until the scheduled outreaches have been completed or cancelled.\n        </Text>\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Navigation, Heading, Button, Modal, Label, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const backdropClose =false;\n\n  const onClose = () => {\n    setOpen(!open);\n    console.log('on close triggered');\n  };\n\n  const options = [\n    {\n      label: 'Option1',\n      value: 'Option1',\n    },\n    {\n      label: 'Option2',\n      value: 'Option2',\n    }\n  ];\n\n  const data = [\n    {\n      label: 'Medicine',\n      name: 'Tab1'\n    },\n    {\n      label: 'Period',\n      name: 'Tab2'\n    },\n    {\n      label: 'Alias',\n      name: 'Tab3'\n    },\n    {\n      label: 'Priority',\n      name: 'Tab4'\n    }\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'Tab1'\n  });\n\n  const onClickHandler = (menu) => {\n    setActive(menu);\n  };\n\n  const subHeading = (\n    <Navigation\n      align=\"left\"\n      menus={data}\n      active={active}\n      onClick={onClickHandler}\n      className=\"ml-5 mt-4\"\n    />\n  );\n\n  const header = (\n    <div>\n      <Heading className=\"ml-7 mb-3\">Medication</Heading>\n      {subHeading}\n    </div>\n  );\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        open={open}\n        dimension=\"large\"\n        backdropClose={backdropClose}\n        onClose={onClose}\n        header={header}\n        footer={(\n          <>\n            <Button appearance=\"basic\" onClick={console.log('Cancel button click')}>Discard</Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={console.log('Discard button click')}>\n                Create operand\n            </Button>\n          </>\n        )}\n        seperator={true}\n      >\n        <div className=\"my-5\">\n          <Label withInput={true} required={true}>Type</Label>\n          <Dropdown\n              options={options}\n              className=\"w-50\"\n          />\n          <Label withInput={true} className=\"mt-5\">Active Date</Label>\n          <Dropdown\n              options={options}\n              className=\"w-50\"\n          />\n          <div className=\"d-flex pb-4\">\n            <div className=\"d-block w-75\">\n              <Label withInput={true} required={true} className=\"mt-5\">Diagnosis Diseases</Label>\n              <Dropdown\n                  options={options}\n              />\n            </div>\n            <div className=\"ml-5 d-block w-25\">\n              <Label withInput={true} required={true} className=\"mt-5\">Version</Label>\n              <Dropdown\n                  options={options}\n              />\n            </div>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Button, Modal, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const [openSecondOverlay, setOpenSecondOverlay] = React.useState(false);\n  const dimension = 'medium';\n  const backdropClose = true;\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const onCloseSecondOverlay = () => {\n    setOpenSecondOverlay(!openSecondOverlay);\n  }\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        closeOnEscape={true}\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading'\n        }}\n        footer={(\n          <>\n            <Button appearance=\"basic\" onClick={()=>console.log('Basic button click')}>Basic</Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={()=> setOpenSecondOverlay(true)}>Open</Button>\n          </>\n        )}\n      >\n        <Text>Modal Body</Text>\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription\n          description=\"Card Sections include supporting text like an article summary or a restaurant description.\"\n        />\n      </Modal>\n\n      <Modal\n        closeOnEscape={true}\n        open={openSecondOverlay}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onCloseSecondOverlay}\n        headerOptions={{\n          heading: 'Heading Part Two',\n          subHeading: 'Subheading Part Two',\n        }}\n        footer={\n          <>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={() => console.log('Primary button click')}>\n              Primary\n            </Button>\n          </>\n        }\n      >\n        <Text>Modal Part Two Body</Text>\n        <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Button, Modal, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const dimension = 'medium';\n  const backdropClose = true;\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading'\n        }}\n      >\n        <Text>Modal Body</Text>\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription\n          description=\"Card Sections include supporting text like an article summary or a restaurant description.\"\n        />\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Button, Modal, ModalHeader, ModalBody, Text, ModalDescription, ModalFooter } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const dimension = 'medium';\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={onClose}\n      >\n        <ModalHeader\n          onClose={onClose}\n          heading=\"Heading\"\n          subHeading=\"Subheading\"\n        />\n        <ModalBody>\n          <Text>Modal Body</Text>\n          <ModalDescription\n            title=\"Description Title\"\n            description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n          />\n          <ModalDescription\n            description=\"Card Sections include supporting text like an article summary or a restaurant description.\"\n          />\n        </ModalBody>\n        <ModalFooter open={open}>\n          <Button appearance=\"basic\" onClick={()=>console.log('Basic button click')}>Basic</Button>\n          <Button appearance=\"primary\" className=\"ml-4\" onClick={()=>console.log('Primary button click')}>Primary</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Button, Modal, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const dimension = 'large';\n  const backdropClose = true;\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading'\n        }}\n        footer={(\n          <>\n            <Button appearance=\"basic\" onClick={()=>console.log('Basic button click')}>Basic</Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={()=>console.log('Primary button click')}>Primary</Button>\n          </>\n        )}\n      >\n        <Text>Modal Body</Text>\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription\n          description=\"Card Sections include supporting text like an article summary or a restaurant description.\"\n        />\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Button, Modal, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const dimension = 'medium';\n  const backdropClose = true;\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading'\n        }}\n        footer={(\n          <>\n            <Button appearance=\"basic\" onClick={()=>console.log('Basic button click')}>Basic</Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={()=>console.log('Primary button click')}>Primary</Button>\n          </>\n        )}\n      >\n        <Text>Modal Body</Text>\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription\n          description=\"Card Sections include supporting text like an article summary or a restaurant description.\"\n        />\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Button, Modal, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const dimension = 'small';\n  const backdropClose = true;\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Modal</Button>\n      <Modal\n        open={open}\n        dimension={dimension}\n        backdropClose={backdropClose}\n        onClose={onClose}\n        headerOptions={{\n          heading: 'Heading',\n          subHeading: 'Subheading'\n        }}\n        footer={(\n          <>\n            <Button appearance=\"basic\" onClick={()=>console.log('Basic button click')}>Basic</Button>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={()=>console.log('Primary button click')}>Primary</Button>\n          </>\n        )}\n      >\n        <Text>Modal Body</Text>\n        <ModalDescription\n          title=\"Description Title\"\n          description=\"Adding a subheading clearly indicates the hierarchy of the information.\"\n        />\n        <ModalDescription\n          description=\"Card Sections include supporting text like an article summary or a restaurant description.\"\n        />\n      </Modal>\n    </div>\n  );\n}\n    "
    }
  ],
  "navigation": [
    {
      "query": "Navigation",
      "code": "import {  } from '@innovaccer/design-system';\n    () => <></>\n    "
    }
  ],
  "pageheader": [
    {
      "query": "PageHeader Level 0   With Navigation",
      "code": "import { Navigation, Text, Button, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const title = 'Page title';\n\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Menu 1',\n      icon: 'event',\n    },\n    {\n      name: 'menu_2',\n      label: 'Menu 2'\n    },\n    {\n      name: 'menu_3',\n      label: 'Menu 3',\n      disabled: true\n    }\n  ];\n\n  const options = {\n    title,\n    navigation: <Navigation menus={navigationData} onClick={(menu) => console.log(menu)} active={{ name: 'menu_1' }} />,\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <span className=\"mr-4\"><Text appearance=\"subtle\">Meta data</Text></span>\n        <Button appearance=\"primary\">Primary</Button>\n      </div>\n    )\n  };\n\n  return (\n    <div className=\"w-100 py-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 0   With Stepper",
      "code": "import { Stepper, Text, Button, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const title = 'Page title';\n\n   const stepperData = [\n    {\n      value: 'step_1',\n      label: 'Step 1',\n    },\n    {\n      value: 'step_2',\n      label: 'Step 2'\n    },\n    {\n      value: 'step_3',\n      label: 'Step 3',\n    }\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(-1);\n\n  const onChangeHandler = (activeStep) => {\n    setActive(activeStep)\n  };\n\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  }\n\n  const options = {\n    title,\n    seperator: true,\n    stepper: <Stepper steps={stepperData} onChange={onChangeHandler} active={active} completed={completed} />,\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <span className=\"mr-4\"><Text appearance=\"subtle\">Meta data</Text></span>\n        <Button appearance=\"primary\" onClick={onClickHandler}>Primary</Button>\n      </div>\n    )\n  };\n\n  return (\n    <div className=\"w-100 py-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 0   With Tabs",
      "code": "import { TabsWrapper, Tab, Pills, Text, Button, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const active = 1;\n\n  const title = 'Page title';\n\n  const onTabChangeHandler = (tabIndex) => {\n    console.log(tabIndex);\n  };\n\n  const options = {\n    title,\n    tabs: (\n      <TabsWrapper\n        active={active}\n        onTabChange={onTabChangeHandler}\n      >\n        <Tab\n          label={(\n            <>\n              <div className=\"Tab-count\">\n                <Pills appearance=\"secondary\">2</Pills>\n              </div>\n              <Text appearance={active !== 0 ? 'subtle' : undefined}>Tab 1</Text>\n            </>\n          )}\n        >\n          {null}\n        </Tab>\n        <Tab\n          label={(\n            <>\n              <div className=\"Tab-count\">\n                <Pills appearance=\"secondary\">12</Pills>\n              </div>\n              <Text appearance={active !== 1 ? 'subtle' : undefined}>Tab 2</Text>\n            </>\n          )}\n        >\n          {null}\n        </Tab>\n        <Tab\n          label={(\n            <>\n              <div className=\"Tab-count\">\n                <Pills appearance=\"secondary\">5</Pills>\n              </div>\n              <Text appearance={active !== 2 ? 'subtle' : undefined}>Tab 3</Text>\n            </>\n          )}\n        >\n          {null}\n        </Tab>\n      </TabsWrapper>\n    ),\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <span className=\"mr-4\"><Text appearance=\"subtle\">Meta data</Text></span>\n        <Button appearance=\"primary\">Primary</Button>\n      </div>\n    )\n  };\n\n  return (\n    <div className=\"w-100 py-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 0 With Filter",
      "code": "import { Tabs, Button, Row, Column, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const tabs = [\n    {\n      count: 4,\n      label: 'Current'\n    },\n    {\n      count: 4,\n      label: 'Invited'\n    },\n    {\n      count: 4,\n      label: 'Inactive'\n    }\n  ];\n\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  const tab = (\n    <Tabs\n      tabs={tabs}\n      activeIndex={activeIndex}\n      onTabChange={setActiveIndex}\n    />\n  );\n\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <Button icon=\"get_app\" className=\"mr-4\">Download Records</Button>\n      <Button appearance=\"primary\">Invite users</Button>\n    </div>\n  );\n\n  return (\n    <Row>\n      <Column size={11}>\n        <div className=\"py-6 bg-secondary-lightest\">\n          <PageHeader\n            title=\"Users\"\n            separator={true}\n            tabs={tab}\n            actions={actions}\n          />\n        </div>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 0 With Navigation",
      "code": "import { Navigation, Button, Row, Column, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Virtual Visits',\n    },\n    {\n      name: 'menu_2',\n      label: 'Assesments'\n    }\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'menu_1'\n  });\n\n  const onClickHandler = (menu) => {\n    setActive(menu);\n  };\n\n  const navigation = <Navigation menus={navigationData} onClick={onClickHandler} active={active}/>;\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <Button className=\"mr-4\">Reorganize</Button>\n      <Button icon=\"get_app\">Export to PDF</Button>\n    </div>\n  );\n\n  return (\n    <Row>\n      <Column size={11}>\n        <div className=\"py-6 bg-secondary-lightest\">\n          <PageHeader\n            title=\"Dashboard\"\n            separator={true}\n            navigation={navigation}\n            actions={actions}\n          />\n        </div>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 1   With Navigation",
      "code": "import { Navigation, Button, Breadcrumbs, Badge, StatusHint, MetaList, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const navigationPosition = 'center';\n\n  const title = 'Page title';\n\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Menu 1',\n      icon: 'event',\n    },\n    {\n      name: 'menu_2',\n      label: 'Menu 2'\n    },\n    {\n      name: 'menu_3',\n      label: 'Menu 3',\n      disabled: true\n    }\n  ];\n\n  const breadcrumbData = [\n    {\n      label: 'Level 0',\n      link: '/level0'\n    },\n    {\n      label: 'Level 1',\n      link: '/level1'\n    }\n  ];\n\n  const options = {\n    navigationPosition,\n    title,\n    navigation: (\n      <Navigation\n        menus={navigationData}\n        onClick={menu => console.log(menu)}\n        active={{ name: 'menu_1' }}\n        align={navigationPosition === 'bottom' ? 'left' : 'center'}\n      />\n    ),\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <Button appearance=\"primary\">Primary</Button>\n      </div>\n    ),\n    breadcrumbs: (\n      <Breadcrumbs\n        list={breadcrumbData}\n        onClick={link => console.log(link)}\n      />\n    ),\n    badge: (\n      <Badge appearance=\"secondary\">Badge</Badge>\n    ),\n    status: (\n      <StatusHint appearance=\"alert\">Alert</StatusHint>\n    ),\n    meta: (\n      <MetaList\n        list={[{ label: 'Meta data' }]}\n        seperator={true}\n      />\n    )\n  };\n  return (\n    <div className=\"w-100 py-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 1   With Stepper",
      "code": "import { Stepper, Button, Breadcrumbs, Badge, StatusHint, MetaList, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const navigationPosition = 'center';\n\n  const title = 'Page title';\n\n  const stepperData = [\n    {\n      value: 'step_1',\n      label: 'Step 1',\n    },\n    {\n      value: 'step_2',\n      label: 'Step 2'\n    },\n    {\n      value: 'step_3',\n      label: 'Step 3',\n    }\n  ];\n\n  const breadcrumbData = [\n    {\n      label: 'Level 0',\n      link: '/level0'\n    },\n    {\n      label: 'Level 1',\n      link: '/level1'\n    }\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(-1);\n\n  const onChangeHandler = (activeStep) => {\n    setActive(activeStep)\n  };\n\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  };\n\n   const options = {\n    navigationPosition,\n    title,\n    seperator: true,\n    stepper: <Stepper steps={stepperData} onChange={onChangeHandler} active={active} completed={completed} />,\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <Button appearance=\"primary\" onClick={onClickHandler}>Next</Button>\n      </div>\n    ),\n    breadcrumbs: (\n      <Breadcrumbs\n        list={breadcrumbData}\n      />\n    ),\n    badge: (\n      <Badge appearance=\"secondary\">Badge</Badge>\n    ),\n    status: (\n      <StatusHint appearance=\"alert\">Alert</StatusHint>\n    ),\n    meta: (\n      <MetaList\n        list={[{ label: 'Meta data' }]}\n        seperator={true}\n      />\n    )\n  };\n\n  return (\n    <div className=\"w-100 py-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 1   With Tabs",
      "code": "import { TabsWrapper, Tab, Badge, Text, Button, Breadcrumbs, StatusHint, MetaList, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const activeTab = 1;\n\n  const title = 'Page title';\n\n  const onTabChangeHandler = (tabIndex) => {\n    console.log(tabIndex);\n  };\n\n  const breadcrumbData = [\n    {\n      label: 'Level 0',\n      link: '/level0'\n    },\n    {\n      label: 'Level 1',\n      link: '/level1'\n    }\n  ];\n\n  const options = {\n    title,\n    tabs: (\n      <TabsWrapper\n        activeTab={activeTab}\n        onTabChange={onTabChangeHandler}\n      >\n        <Tab\n          label={(\n            <>\n              <div className=\"Tab-count\">\n                <Badge appearance=\"secondary\">2</Badge>\n              </div>\n              <Text appearance={activeTab !== 0 ? 'subtle' : undefined}>Tab 1</Text>\n            </>\n          )}\n        >\n          {null}\n        </Tab>\n        <Tab\n          label={(\n            <>\n              <div className=\"Tab-count\">\n                <Badge appearance=\"secondary\">12</Badge>\n              </div>\n              <Text appearance={activeTab !== 1 ? 'subtle' : undefined}>Tab 2</Text>\n            </>\n          )}\n        >\n          {null}\n        </Tab>\n        <Tab\n          label={(\n            <>\n              <div className=\"Tab-count\">\n                <Badge appearance=\"secondary\">5</Badge>\n              </div>\n              <Text appearance={activeTab !== 2 ? 'subtle' : undefined}>Tab 3</Text>\n            </>\n          )}\n        >\n          {null}\n        </Tab>\n      </TabsWrapper>\n    ),\n    actions: (\n      <div className=\"d-flex justify-content-end align-items-center\">\n        <Button appearance=\"primary\">Primary</Button>\n      </div>\n    ),\n    breadcrumbs: (\n      <Breadcrumbs\n        list={breadcrumbData}\n        onClick={link => console.log(link)}\n      />\n    ),\n    badge: (\n      <Badge appearance=\"secondary\">Badge</Badge>\n    ),\n    status: (\n      <StatusHint appearance=\"alert\">Alert</StatusHint>\n    ),\n    meta: (\n      <MetaList\n        list={[{ label: 'Meta data' }]}\n        seperator={true}\n      />\n    )\n  };\n  return (\n    <div className=\"w-100 py-6 bg-secondary-lightest\">\n      <PageHeader {...options} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 1 With Filter",
      "code": "import { Tabs, Breadcrumbs, Row, Column, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const tabs = [\n    {\n      count: 32,\n      label: 'New'\n    },\n    {\n      count: 4,\n      label: 'Invalid'\n    },\n    {\n      count: 2,\n      label: 'Duplicate'\n    }\n  ];\n\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  const tab = (\n    <Tabs\n      tabs={tabs}\n      activeIndex={activeIndex}\n      onTabChange={setActiveIndex}\n    />\n  );\n\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[{\n        label: 'Senders',\n        link: '/Senders'\n      }]}\n      onClick={link => console.log(`on-click: ${link}`)}\n    />\n  );\n\n  return (\n    <Row>\n      <Column size={11}>\n        <div className=\"py-6 bg-secondary-lightest\">\n          <PageHeader\n            title=\"Sender creation report\"\n            separator={true}\n            tabs={tab}\n            breadcrumbs={breadcrumbs}\n          />\n        </div>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 1 With Navigation",
      "code": "import { Navigation, Breadcrumbs, Badge, MetaList, StatusHint, Row, Column, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Performance',\n    },\n    {\n      name: 'menu_2',\n      label: 'Recipients'\n    }\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'menu_1'\n  });\n\n  const onClickHandler = (menu) => {\n    setActive(menu);\n  };\n\n  const navigation = (\n    <Navigation\n      menus={navigationData}\n      onClick={onClickHandler}\n      active={active}\n      align=\"center\"\n    />\n  );\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\"/>\n  );\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[{\n        label: 'Outreach',\n        link: '/Outreach'\n      }]}\n      onClick={link => console.log(`on-click: ${link}`)}\n    />\n  );\n  const badge = (\n    <Badge subtle={true} appearance=\"success\">Sent</Badge>\n  );\n  const meta = (\n    <MetaList\n      list={[{ label: 'Text' }, { label: 'Email' }]}\n    />\n  );\n\n  const status = <StatusHint appearance=\"info\">Ongoing</StatusHint>;\n\n  return (\n    <Row>\n      <Column size={11}>\n        <div className=\"py-5 bg-secondary-lightest\">\n          <PageHeader\n            title=\"Covid-19\"\n            separator={true}\n            navigationPosition=\"center\"\n            navigation={navigation}\n            actions={actions}\n            breadcrumbs={breadcrumbs}\n            badge={badge}\n            status={status}\n            meta={meta}\n          />\n        </div>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 1 With Stepper",
      "code": "import { Stepper, Text, Avatar, Dropdown, Button, Breadcrumbs, Badge, MetaList, PageHeader } from '@innovaccer/design-system';\n    /*\n// style.css\n.Pageheader-longWrapper {\n    width: 1200px;\n}\n\n*/\n\n() => {\n  const stepperData = [\n    {\n      value: 'step_1',\n      label: 'Recipients',\n    },\n    {\n      value: 'step_2',\n      label: 'Message'\n    },\n    {\n      value: 'step_3',\n      label: 'Schedule',\n    }\n  ];\n\n  const options = [\n    {\n      label: 'Option 1',\n      value: 'Option 1',\n    },\n    {\n      label: 'Option 2',\n      value: 'Option 2',\n    },\n    {\n      label: 'Option 3',\n      value: 'Option 3',\n    }\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(-1);\n\n  const onChangeHandler = (activeStep) => {\n    setActive(activeStep);\n  };\n\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  };\n\n  const stepper = <Stepper steps={stepperData} onChange={onChangeHandler} active={active} completed={completed} />;\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <Text className=\"mr-4\">few minutes ago</Text>\n      <Avatar className=\"mr-4\" firstName=\"John\" lastName=\"Doe\" appearance=\"accent2\"/>\n      <div className=\"mr-4\">\n        <Dropdown\n          menu={true}\n          icon=\"more_horiz\"\n          options={options}\n        />\n      </div>\n      <Button className=\"mr-4\">Finish Later</Button>\n      <Button className=\"mr-4\" appearance=\"primary\" onClick={onClickHandler}>Next</Button>\n    </div>\n  );\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[{\n        label: 'Campaigns',\n        link: '/Campaigns'\n      }]}\n      onClick={link => console.log(`on-click: ${link}`)}\n    />\n  );\n  const badge = (\n    <Badge appearance=\"secondary\">Message</Badge>\n  );\n  const meta = (\n    <MetaList\n      list={[{ label: 'Draft' }]}\n      seperator={false}\n    />\n  );\n\n  return (\n    <div className=\"py-6 bg-secondary-lightest Pageheader-longWrapper\">\n      <PageHeader\n        title=\"Annual Wellness Visit\"\n        separator={true}\n        navigationPosition=\"center\"\n        stepper={stepper}\n        actions={actions}\n        breadcrumbs={breadcrumbs}\n        badge={badge}\n        meta={meta}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Level 2 And Beyond",
      "code": "import { Stepper, Dropdown, Button, Breadcrumbs, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const stepperData = [\n    {\n      value: 'Upload',\n      label: 'Upload',\n    },\n    {\n      value: 'configure',\n      label: 'configure'\n    },\n  ];\n\n  const breadcrumbData = [\n    {\n      label: 'Care Management',\n      link: '/Care Management'\n    },\n    {\n      label: 'Care Potential',\n      link: '/Care Potential'\n    }\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(-1);\n\n  const onChangeHandler = (activeStep) => {\n    setActive(activeStep);\n  };\n\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  };\n  const options = [\n    {\n      label: 'Option 1',\n      value: 'Option 1',\n    },\n    {\n      label: 'Option 2',\n      value: 'Option 2',\n    },\n    {\n      label: 'Option 3',\n      value: 'Option 3',\n    }\n  ];\n\n  const stepper = <Stepper steps={stepperData} onChange={onChangeHandler} active={active} completed={completed} />;\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <div className=\"mr-4\">\n        <Dropdown\n          menu={true} icon=\"more_horiz\"\n          options={options}\n        />\n      </div>\n      <Button className=\"mr-4\">Cancel</Button>\n      <Button className=\"mr-4\" appearance=\"primary\" onClick={onClickHandler}>Next</Button>\n    </div>\n  );\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={breadcrumbData}\n      onClick={link => console.log(`on-click: ${link}`)}\n    />\n  );\n\n  return (\n    <div className=\"w-100 p-6 bg-secondary-lightest\">\n      <PageHeader\n        title=\"Upload\"\n        navigationPosition=\"center\"\n        separator={false}\n        stepper={stepper}\n        actions={actions}\n        breadcrumbs={breadcrumbs}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "PageHeader Responsiveness",
      "code": "import { Text, AvatarGroup, Dropdown, Breadcrumbs, StatusHint, Navigation, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Interventions',\n    },\n    {\n      name: 'menu_2',\n      label: 'No Linked Activites'\n    }\n  ];\n\n  const list = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      appearance: 'accent2',\n    },\n    {\n      firstName: 'Steven',\n      lastName: 'Packton',\n      appearance: 'accent3',\n    }\n  ];\n\n  const options = [\n    {\n      icon: 'print',\n      label: 'Edit',\n      value: 'Edit',\n    },\n    {\n      icon: 'assignment_turned_in',\n      label: 'Complete',\n      value: 'Complete',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'menu_1'\n  });\n\n  const onClickHandler = (menu) => {\n    setActive(menu);\n  };\n\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n    <Text className=\"mr-4\">Updated 1 day ago</Text>\n    <AvatarGroup className=\"mr-5\" list={list}/>\n    <div className=\"mr-4\">\n      <Dropdown\n        menu={true}\n        optionType=\"WITH_ICON\"\n        icon=\"more_horiz\"\n        options={options}\n        align=\"left\"\n      />\n    </div>\n    </div>\n  );\n\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[{\n        label: 'Care potential',\n        link: '/Care potential'\n      }]}\n      onClick={link => console.log(`on-click: ${link}`)}\n    />\n  );\n\n  const status = (\n    <StatusHint appearance=\"info\">Ongoing</StatusHint>\n  );\n\n  const navigation = (\n    <Navigation\n      menus={navigationData}\n      onClick={onClickHandler}\n      active={active}\n    />\n  );\n\n  return (\n    <div className=\"py-6 bg-secondary-lightest\">\n      <PageHeader\n        navigationPosition=\"bottom\"\n        title=\"Pac Follow-Up Protocol\"\n        separator={true}\n        navigation={navigation}\n        actions={actions}\n        breadcrumbs={breadcrumbs}\n        status={status}\n      />\n    </div>\n  );\n}\n    "
    }
  ],
  "pagination": [
    {
      "query": "Pagination All",
      "code": "import { Pagination } from '@innovaccer/design-system';\n    () => {\n  const paginationType = 'jump';\n\n  const page = 1;\n\n  const totalPages = 50;\n\n  return (\n    <Pagination\n      type={paginationType}\n      page={page}\n      totalPages={totalPages}\n      onPageChange={(pageNo) => action(`No-change-action: ${pageNo}`)()}\n    />\n  );\n}\n    "
    },
    {
      "query": "Pagination",
      "code": "import { Pagination } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Pagination\n      type= \"basic\"\n      page= {1}\n      totalPages={50}\n      onPageChange={pageNo => console.log(pageNo)}\n    />\n  );\n}\n    "
    },
    {
      "query": "Pagination",
      "code": "import { Pagination } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"d-flex flex-column align-items-center\">\n        <Pagination\n          type=\"jump\"\n          page={1}\n          totalPages={50}\n          onPageChange={(pageNo) => console.log(pageNo) }\n        />\n      </div>\n     </div>\n  );\n}\n    "
    },
    {
      "query": "Pagination",
      "code": "import { Text, Pagination } from '@innovaccer/design-system';\n    () => {\n  const paginationTypes = ['basic', 'jump'];\n\n  const page = 1;\n\n  const totalPages = 50;\n\n  return (\n    <div className=\"d-flex\">\n      {paginationTypes.map((displayType, ind) => {\n        return (\n          <div key={ind} className=\"d-flex flex-column align-items-center\">\n            <Text weight=\"strong\">{displayType}</Text>\n            <br />\n            <Pagination\n              type={displayType}\n              page={page}\n              totalPages={totalPages}\n              onPageChange={(pageNo) => action(`No-change-action: ${pageNo}`)()}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "paragraph": [
    {
      "query": "Paragraph",
      "code": "import { Paragraph } from '@innovaccer/design-system';\n    () => {\n  const appearance = 'white';\n  const options = {\n    appearance,\n  };\n\n  return (\n    <div className={appearance === 'white' ? 'bg-dark' : 'bg-transparent'}>\n      <Paragraph {...options}>\n        Paragraph <b>component</b> have different varients, look for options in knobs tab.\n      </Paragraph>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Paragraph",
      "code": "import { Paragraph, Text } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['default', 'white', 'destructive', 'subtle', 'disabled'];\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-6\">\n            <div className={appear === 'white' ? 'bg-dark' : 'bg-transparent'}>\n              <Paragraph appearance={appear}>Paragraph</Paragraph>\n            </div>\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "pills": [
    {
      "query": "Pills All",
      "code": "import { Pills } from '@innovaccer/design-system';\n    () => {\n  const appearance = 'warning';\n  const subtle = false;\n  const children = 10;\n\n  return (\n    <Pills appearance={appearance} subtle={subtle}>\n      {children}\n    </Pills>\n  );\n}\n    "
    },
    {
      "query": "Pills",
      "code": "import { Pills } from '@innovaccer/design-system';\n    () => (\n  <Pills appearance=\"alert\" subtle={false}>\n    10\n  </Pills>\n)\n    "
    },
    {
      "query": "Pills",
      "code": "import { Pills } from '@innovaccer/design-system';\n    () => (\n  <Pills appearance=\"secondary\" subtle={false}>\n    10\n  </Pills>\n)\n    "
    },
    {
      "query": "Pills",
      "code": "import { Pills } from '@innovaccer/design-system';\n    () => (\n  <Pills appearance=\"primary\" subtle={false}>\n    10\n  </Pills>\n)\n    "
    },
    {
      "query": "Pills",
      "code": "import { Pills } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Pills appearance=\"alert\" subtle={true}>\n      10\n    </Pills>\n  );\n}\n    "
    },
    {
      "query": "Pills",
      "code": "import { Pills } from '@innovaccer/design-system';\n    () => (\n  <Pills appearance=\"warning\" subtle={true}>\n    10\n  </Pills>\n)\n    "
    },
    {
      "query": "Pills",
      "code": "import { Pills, Text } from '@innovaccer/design-system';\n    () => {\n  const subtle = false;\n  const weight = 'strong';\n  const children = 10;\n  const appearances = [\n    'primary',\n    'secondary',\n    'alert',\n    'warning',\n    'success',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n  ];\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Pills appearance={appear} subtle={subtle}>\n              {children}\n            </Pills>\n            <br />\n            <Text weight={weight}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Pills",
      "code": "import { Pills, Text } from '@innovaccer/design-system';\n    () => {\n  const ButtonSubtle = true;\n  const weight = 'strong';\n  const children = 10;\n  const appearances = [\n    'primary',\n    'secondary',\n    'alert',\n    'warning',\n    'success',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n  ];\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Pills appearance={appear} subtle={ButtonSubtle}>\n              {children}\n            </Pills>\n            <br />\n            <Text weight={weight}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "popover": [
    {
      "query": "Popover All",
      "code": "import { Popover, Button, Text } from '@innovaccer/design-system';\n    () => {\n  return(\n    <div className='mb-11'>\n      <Popover\n        position=\"bottom-start\"\n        on=\"click\"\n        trigger={<Button appearance=\"basic\">Open Popover</Button>}\n      >\n        <div className='m-6 pr-9'>\n          <Text>Popup</Text>\n          <Button appearance=\"primary\" className=\"mt-4\">Click</Button>\n        </div>\n      </Popover>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Popover Dark Popover",
      "code": "import { Popover, Button } from '@innovaccer/design-system';\n    () => (\n  <div className=\"mb-9\">\n    <Popover\n      position=\"bottom\"\n      on=\"click\"\n      trigger={<Button appearance=\"basic\">Open Popover</Button>}\n      dark={true}\n      open={false}\n    >\n      <div className=\"p-10\" />\n    </Popover>\n  </div>\n)\n    "
    },
    {
      "query": "Popover Layering",
      "code": "import { Popover, Button, Dropdown } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"mb-9\">\n      <Popover position=\"bottom\" on=\"click\" trigger={<Button appearance=\"basic\">Open Popover</Button>} open={false}>\n        <div className=\"pb-11 pr-10\">\n          <Dropdown\n            className=\"p-6 w-100\"\n            options={[\n              { label: 'Draft', value: 'draft' },\n              { label: 'In Progress', value: 'in_progress' },\n              { label: 'Sent', value: 'sent' },\n              { label: 'Scheduled', value: 'scheduled' },\n              { label: 'Partially Failed', value: 'partially_failed' },\n              { label: 'Completely Failed', value: 'completely_failed' },\n            ]}\n            placeholder=\"Status\"\n          />\n        </div>\n      </Popover>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Popover Light Popover",
      "code": "import { Popover, Button } from '@innovaccer/design-system';\n    () => (\n  <div className=\"mb-9\">\n    <Popover position=\"bottom\" on=\"click\" trigger={<Button appearance=\"basic\">Open Popover</Button>} open={false}>\n      <div className=\"p-10\" />\n    </Popover>\n  </div>\n)\n    "
    },
    {
      "query": "Popover Popover With Action",
      "code": "import { Popover, Button, Text } from '@innovaccer/design-system';\n    () => (\n  <div className=\"mb-10\">\n    <Popover\n      position=\"bottom-start\"\n      on=\"click\"\n      trigger={<Button appearance=\"basic\">Open Popover</Button>}\n      open={false}\n      className=\"w-25\"\n    >\n      <div className=\"m-6\">\n        <Text>You have some edits saved in draft state.You can resume editing or discard those changes.</Text>\n        <div className=\"d-flex\">\n          <Button className=\"mt-4\" appearance=\"primary\">\n            Edit Registry\n          </Button>\n          <Button className=\"mt-4 ml-5\" appearance=\"basic\">\n            Discard Changes\n          </Button>\n        </div>\n      </div>\n    </Popover>\n  </div>\n)\n    "
    },
    {
      "query": "Popover Popover With Input",
      "code": "import { Popover, Link, Label, Input, Textarea, Button } from '@innovaccer/design-system';\n    () => (\n  <div className=\"mb-13\">\n    <Popover position=\"bottom-start\" on=\"click\" trigger={<Link>Open Popover</Link>} open={false}>\n      <div className=\"m-6\">\n        <Label required={true} withInput={true}>\n          Name\n        </Label>\n        <Input name=\"input\" required={true} placeholder=\"Name\" />\n        <Label className=\"mt-4\" withInput={true}>\n          Description\n        </Label>\n        <Textarea name=\"Textarea\" placeholder=\"Write a description\" />\n        <div className=\"d-flex justify-content-end\">\n          <Button className=\"mt-5\" appearance=\"primary\">\n            Save Filter\n          </Button>\n        </div>\n      </div>\n    </Popover>\n  </div>\n)\n    "
    },
    {
      "query": "Popover Popover With Menu",
      "code": "import { Avatar, Text, Button, Popover } from '@innovaccer/design-system';\n    () => {\n  const trigger = (\n    <div className=\"d-flex\">\n      <Avatar firstName=\"John\" lastName=\"Doe\" />\n      <Text className=\"ml-4 mt-4\" size=\"large\">\n        Open Popover\n      </Text>\n      <Button appearance=\"transparent\" icon=\"arrow_drop_down\" />\n    </div>\n  );\n\n  return (\n    <div className=\"mb-12\">\n      <Popover position=\"bottom-start\" on=\"click\" trigger={trigger} open={false} className=\"w-25\">\n        <div className=\"m-6\">\n          <div className=\"d-flex\">\n            <Avatar firstName=\"John\" lastName=\"Doe\" />\n            <div className=\"Option-label\">\n              <Text className=\"ml-4\">James Donovan</Text>\n              <Text className=\"ml-4\" appearance=\"subtle\">\n                jdonovan @two.health\n              </Text>\n            </div>\n          </div>\n          <div className=\"Dropdown-wrapper\">\n            <div className=\"Option OptionWrapper\">Account Overview</div>\n            <div className=\"Option OptionWrapper\">Sign Out</div>\n          </div>\n        </div>\n      </Popover>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Popover   Boundary Element",
      "code": "import { Popover, Button, Text } from '@innovaccer/design-system';\n    /*\n// style.css\n.custom-boundaryWrapper {\n    height: var(--spacing-8);\n    border: 1px dashed;\n}\n\n*/\n\n() => {\n  const ref = React.useRef(null);\n\n  return(\n    <div ref={ref} className=\"overflow-auto p-7 custom-boundaryWrapper\">\n      <Popover\n        position=\"bottom-start\"\n        on=\"click\"\n        open={true}\n        trigger={<Button appearance=\"basic\">Open Popup</Button>}\n        boundaryElement={ref}\n        closeOnScroll={true}\n      >\n        <div className='m-6 pr-9'>\n          <Text>Popup</Text>\n          <Button appearance=\"primary\" className=\"mt-4\">Click</Button>\n        </div>\n      </Popover>\n      <div className=\"pb-14\" />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Popover",
      "code": "import { Button, Popover, Text } from '@innovaccer/design-system';\n    () => {\n  const positions = ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'right'];\n  const getTrigger = (pos) => <Button appearance=\"basic\">{pos}</Button>;\n\n  return (\n    <div className=\"d-flex flex-wrap\">\n      {positions.map((pos, ind) => {\n        return (\n          <div key={ind} className={`mr-13 ml-12 ${ind < 3 ? 'mt-11' : 'mt-5 mb-11'}`}>\n            <Popover trigger={getTrigger(pos)} position={pos} open={true}>\n              <div className=\"m-6 pr-9\">\n                <Text>Popup</Text>\n                <Button appearance=\"primary\" className=\"mt-4\">\n                  Click\n                </Button>\n              </div>\n            </Popover>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Popover",
      "code": "import { Button, Popover, Text } from '@innovaccer/design-system';\n    () => {\n  const trigger = <Button appearance=\"basic\">Light Theme</Button>;\n  const triggerDark = <Button appearance=\"basic\">Dark Theme</Button>;\n\n  const options = {\n    open: true,\n  };\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mb-11 mr-14\">\n        <Popover trigger={triggerDark} dark={true} {...options}>\n          <div className=\"m-6 pr-9\">\n            <Text appearance={'white'}>Popup</Text>\n            <Button appearance=\"primary\" className=\"mt-4\">\n              Click\n            </Button>\n          </div>\n        </Popover>\n      </div>\n      <div>\n        <Popover trigger={trigger} dark={false} {...options}>\n          <div className=\"m-6 pr-9\">\n            <Text>Popup</Text>\n            <Button appearance=\"primary\" className=\"mt-4\">\n              Click\n            </Button>\n          </div>\n        </Popover>\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "progressbar": [
    {
      "query": "ProgressBar All",
      "code": "import { ProgressBar } from '@innovaccer/design-system';\n    () => {\n  const value = 10;\n  const max = 100;\n\n  return (\n    <div className=\"w-50\">\n      <ProgressBar value={value} max={max} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "ProgressBar Fifty Percent",
      "code": "import { ProgressBar } from '@innovaccer/design-system';\n    () => <ProgressBar value={50} max={100} />\n    "
    },
    {
      "query": "ProgressBar",
      "code": "import { ProgressBar } from '@innovaccer/design-system';\n    () => {\n  const [progress, setProgress] = React.useState(0);\n  \n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setProgress(progress + 25);\n    }, 1000);\n  });\n\n  return <ProgressBar value={progress} max={100} />;\n}\n    "
    }
  ],
  "progressring": [
    {
      "query": "ProgressRing All",
      "code": "import { ProgressRing } from '@innovaccer/design-system';\n    () => {\n  const size = 'small';\n  const value = 30;\n  const max = 100;\n\n  return <ProgressRing value={value} size={size} max={max} />;\n}\n    "
    },
    {
      "query": "ProgressRing",
      "code": "import { ProgressRing, Text } from '@innovaccer/design-system';\n    () => {\n  const sizes = ['small', 'regular'];\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((ProgressRingSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-6\">\n            <div className=\"h-50\">\n              <ProgressRing size={ProgressRingSize} value={30} />\n            </div>\n            <Text weight=\"strong\">{ProgressRingSize.charAt(0).toUpperCase() + ProgressRingSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "ProgressRing",
      "code": "import { ProgressRing } from '@innovaccer/design-system';\n    () => {\n  const [progress, setProgress] = React.useState(0);\n  \n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setProgress(progress + 25);\n    }, 1000);\n  });\n\n  return <ProgressRing value={progress} max={100} />;\n}\n    "
    }
  ],
  "radio": [
    {
      "query": "Radio All",
      "code": "import { Radio } from '@innovaccer/design-system';\n    () => {\n  const size = 'tiny';\n\n  const label = 'Radio';\n\n  const disabled = false;\n\n  const defaultChecked = false;\n\n  const checked = undefined;\n\n  const name = 'gender';\n\n  const onChangeHandler = (event) => {\n    return action(`onChange: ${event.target.value}: ${event.target.checked}`)();\n  };\n\n  return (\n    <div>\n      <Radio\n        disabled={disabled}\n        size={size}\n        label={label}\n        name={name}\n        value={label}\n        defaultChecked={defaultChecked}\n        checked={checked}\n        onChange={onChangeHandler}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Radio Alignment Of Radio Group",
      "code": "import { Row, Column, Text, Radio } from '@innovaccer/design-system';\n    () => (\n  <Row>\n    <Column>\n      <div className=\"pb-5\">\n        <Text>Horizontal alignment</Text>\n      </div>\n      <div className=\"d-flex\">\n        <div className=\"mr-9 \">\n          <Radio size={'regular'} label={'Male'} name={'Gender'} value={'Male'} defaultChecked={true} />\n        </div>\n\n        <div className=\"mr-9 \">\n          <Radio size={'regular'} label={'Female'} name={'Gender'} value={'Female'} />\n        </div>\n\n        <div className=\"mr-9 \">\n          <Radio size={'regular'} label={'Other'} name={'Gender'} value={'Other'} />\n        </div>\n      </div>\n    </Column>\n    <Column>\n      <div className=\"pb-5\">\n        <Text>Vertical alignment</Text>\n      </div>\n\n      <Radio size={'regular'} label={'Male'} name={'gender'} value={'Male'} defaultChecked={true} />\n\n      <Radio size={'regular'} label={'Female'} name={'gender'} value={'Female'} />\n\n      <Radio size={'regular'} label={'Other'} name={'gender'} value={'Other'} />\n    </Column>\n  </Row>\n)\n    "
    },
    {
      "query": "Radio Default Radio",
      "code": "import { Radio } from '@innovaccer/design-system';\n    () => <Radio label={'Survey Outreach'} name={'Radio'} value={'Radio'} />\n    "
    },
    {
      "query": "Radio Error Radio",
      "code": "import { Radio } from '@innovaccer/design-system';\n    () => <Radio label={'Error label'} name={'Radio'} value={'Radio'} error={true} />\n    "
    },
    {
      "query": "Radio Overflow Content",
      "code": "import { Radio } from '@innovaccer/design-system';\n    () => (\n  <div className=\"w-25\">\n    <Radio label=\"Share both your healthcare data and some personal information.\" name=\"options\" value=\"Option 1\" />\n  </div>\n)\n    "
    },
    {
      "query": "Radio Radio Group",
      "code": "import { Text, Radio } from '@innovaccer/design-system';\n    () => (\n  <>\n    <Text weight=\"strong\">Priority</Text>\n    <div className=\"mt-4\">\n      <Radio size={'regular'} label={'High'} name={'Priority'} value={'High'} defaultChecked={true} />\n      <Radio size={'regular'} label={'Medium'} name={'Priority'} value={'Medium'} />\n      <Radio size={'regular'} label={'Low'} name={'Priority'} value={'Low'} />\n    </div>\n  </>\n)\n    "
    },
    {
      "query": "Radio   Controlled Radio Group",
      "code": "import { Radio } from '@innovaccer/design-system';\n    () => {\n  const [selected, setSelected] = React.useState('Option 2');\n\n  const onChangeHandler = (event) => {\n    setSelected(event.target.value);\n  };\n\n  return (\n    <div>\n      <Radio\n        label={'Option 1'}\n        name={'options'}\n        value={'Option 1'}\n        checked={selected === 'Option 1'}\n        onChange={onChangeHandler}\n      />\n      <Radio\n        label={'Option 2'}\n        name={'options'}\n        value={'Option 2'}\n        checked={selected === 'Option 2'}\n        onChange={onChangeHandler}\n      />\n      <Radio\n        label={'Option 3'}\n        name={'options'}\n        value={'Option 3'}\n        checked={selected === 'Option 3'}\n        onChange={onChangeHandler}\n      />\n    </div>\n  );\n};\n\n    "
    },
    {
      "query": "Radio   Size",
      "code": "import { Radio } from '@innovaccer/design-system';\n    () => {\n  const sizes = ['tiny', 'regular'];\n\n  const name = 'gender';\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((RadioSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <Radio\n              size={RadioSize}\n              label={RadioSize.charAt(0).toUpperCase() + RadioSize.slice(1)}\n              name={name}\n              value={RadioSize}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Radio   State",
      "code": "import { Radio } from '@innovaccer/design-system';\n    () => {\n  const name = 'state';\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9\">\n        <Radio label={'Disabled'} name={name} value={'Disabled'} disabled={true} />\n      </div>\n      <div>\n        <Radio label={'Enabled'} name={name} value={'Enabled'} disabled={false} />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Radio   Uncontrolled Radio Group",
      "code": "import { Radio } from '@innovaccer/design-system';\n    () => {\n  const onChangeHandler = (event) => {\n    return action(`onChange: ${event.target.value}: ${event.target.checked}`)();\n  };\n\n  return (\n    <div>\n      <Radio label={'Option 1'} name={'options'} value={'Option 1'} onChange={onChangeHandler} />\n      <Radio label={'Option 2'} name={'options'} value={'Option 2'} defaultChecked={true} onChange={onChangeHandler} />\n      <Radio label={'Option 3'} name={'options'} value={'Option 3'} onChange={onChangeHandler} />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Radio With Help Text",
      "code": "import { Radio } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Radio\n      label={'Share all your data'}\n      value={'accepted'}\n      name={'consent'}\n      helpText={'This app will have access to both your healthcare data and some personal information.'}\n      className=\"w-50\"\n    />\n  );\n}\n    "
    }
  ],
  "rangeslider": [
    {
      "query": "RangeSlider All",
      "code": "import { RangeSlider } from '@innovaccer/design-system';\n    () => {\n  const min = 0;\n  const max = 10;\n  const stepSize = 0.1;\n  const labelStepSize = 1;\n  const label = 'Slider Label';\n  const disabled = false;\n\n  const onChange = (value) => {\n    return action(`new value: ${value}`);\n  };\n\n  const options = {\n    min,\n    max,\n    stepSize,\n    labelStepSize,\n    label,\n    disabled,\n    onChange,\n    defaultValue: [2, 4],\n  };\n\n  return <RangeSlider className=\"mt-2\" {...options} />;\n}\n    "
    },
    {
      "query": "RangeSlider   Controlled Slider",
      "code": "import { RangeSlider } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState([2, 4]);\n\n  const onChange = (value) => {\n    this.window.setTimeout(() => {\n      setValue(value);\n    }, 1000);\n  };\n\n  return (\n    <RangeSlider\n      min={1}\n      max={10}\n      label='Controlled Slider'\n      stepSize={0.1}\n      labelStepSize={1}\n      value={value}\n      onChange={onChange}\n    />\n  );\n}\n    "
    },
    {
      "query": "RangeSlider   Cutsom Labels",
      "code": "import { RangeSlider } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState([2, 4]);\n\n  const onChange = (value) => {\n    setValue(value);\n  };\n\n  const labelRenderer = (value) => {\n    return `${value}%`;\n  };\n\n  return (\n    <RangeSlider\n      min={1}\n      max={10}\n      stepSize={0.1}\n      labelStepSize={1}\n      value={value}\n      onChange={onChange}\n      labelRenderer={labelRenderer}\n    />\n  );\n}\n    "
    },
    {
      "query": "RangeSlider   Disabled",
      "code": "import { RangeSlider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <RangeSlider\n        className=\"mb-9 mt-2\"\n        label=\"Disabled Slider\"\n        disabled={true}\n        stepSize={0.1}\n        labelStepSize={1}\n        defaultValue={[2, 4]}\n      />\n      <RangeSlider label=\"Default Slider\" stepSize={0.1} labelStepSize={1} defaultValue={[2, 4]} className=\"mt-2\" />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "RangeSlider   Disctere Slider",
      "code": "import { RangeSlider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <RangeSlider\n      min={1}\n      max={10}\n      label=\"Discrete Slider\"\n      stepSize={1}\n      labelStepSize={1}\n      defaultValue={[2, 4]}\n      className=\"mt-2\"\n    />\n  );\n}\n    "
    },
    {
      "query": "RangeSlider   Free Slider",
      "code": "import { RangeSlider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <RangeSlider\n      min={1}\n      max={10}\n      label=\"Free Slider\"\n      stepSize={0.1}\n      labelStepSize={1}\n      defaultValue={[2, 4]}\n      className=\"mt-2\"\n    />\n  );\n}\n    "
    },
    {
      "query": "RangeSlider   Slider Label",
      "code": "import { Text, RangeSlider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <div className=\"mb-9\">\n        <Text weight=\"strong\">With Slider Label</Text>\n        <br />\n        <RangeSlider label=\"Slider-label\" stepSize={0.1} labelStepSize={1} defaultValue={[2, 4]} className=\"mt-2\" />\n      </div>\n      <div>\n        <Text weight=\"strong\">Without Slider Label</Text>\n        <br />\n        <RangeSlider stepSize={0.1} labelStepSize={1} defaultValue={[2, 4]} className=\"mt-2\" />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "RangeSlider   Uncontrolled Slider",
      "code": "import { RangeSlider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <RangeSlider\n      min={1}\n      max={10}\n      label=\"Uncontrolled Slider\"\n      stepSize={0.1}\n      labelStepSize={1}\n      defaultValue={[2, 4]}\n      className=\"mt-2\"\n    />\n  );\n}\n    "
    }
  ],
  "sidesheet": [
    {
      "query": "Sidesheet",
      "code": "import { Button, Sidesheet, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const headerOptions = {\n    heading: 'Heading',\n    subHeading: 'Subheading'\n  };\n\n  const options = {\n    onClose,\n    open,\n    headerOptions,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">Primary</Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    )\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Sidesheet</Button>\n      <Sidesheet {...options} >\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Modal",
      "code": "import { Button, Sidesheet, Heading, Badge, Divider, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const options = {\n    onClose,\n    open,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">\n          Primary\n        </Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    ),\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true,\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true,\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Sidesheet</Button>\n      <Sidesheet\n        {...options}\n        dimension=\"regular\"\n        header={\n          <div className=\"pl-7\">\n            <Heading size=\"s\">Untitled document</Heading>\n            <div className=\"d-flex\">\n              <div className=\"mr-3\">\n                <Badge appearance=\"primary\">User Interface</Badge>\n              </div>\n              <div className=\"mr-3\">\n                <Badge>Design</Badge>\n              </div>\n              <div className=\"mr-3\">\n                <Badge>Development</Badge>\n              </div>\n            </div>\n            <Divider></Divider>\n          </div>\n        }\n      >\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Sidesheet",
      "code": "import { Button, Sidesheet, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const headerOptions = {\n    heading: 'Heading',\n    subHeading: 'Subheading'\n  };\n\n  const options = {\n    onClose,\n    open,\n    headerOptions,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">Primary</Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    )\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Sidesheet</Button>\n      <Sidesheet {...options} dimension=\"large\">\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Sidesheet",
      "code": "import { Button, Sidesheet, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const [openSecond, setOpenSecond] = React.useState(false);\n  const seperator = false;\n  const backIcon = false;\n  const stickFooter = false;\n  const backdropClose = true;\n  const dimension = 'regular';\n\n  const onClose = () => {\n    setOpen(false);\n    action('on close triggered')();\n  };\n\n  const onCloseSecond = () => {\n    setOpenSecond(false);\n    action('on close triggered')();\n  };\n\n  const backIconCallback = () => {\n    action('back icon clicked')();\n  };\n\n  const headerOptions = {\n    backIcon,\n    backIconCallback: backIcon ? backIconCallback : undefined,\n    heading: 'Heading',\n    subHeading: 'Subheading',\n  };\n\n  const options = {\n    onClose,\n    open,\n    dimension,\n    seperator,\n    headerOptions,\n    stickFooter,\n    backdropClose,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\" onClick={() => setOpenSecond(true)}>\n          Open\n        </Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    ),\n  };\n\n  const SecondOverlayOptions = {\n    dimension,\n    seperator,\n    headerOptions,\n    stickFooter,\n    backdropClose,\n    onClose: onCloseSecond,\n    open: openSecond,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">\n          Primary\n        </Button>\n      </>\n    ),\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true,\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true,\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>\n        Open Sidesheet\n      </Button>\n      <Sidesheet {...options} dimension=\"large\" closeOnEscape={true}>\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n\n      <Sidesheet {...SecondOverlayOptions} closeOnEscape={true}>\n        <Text>Modal Body Part Two</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Sidesheet",
      "code": "import { Button, Sidesheet, Text, ModalDescription, Modal } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const [openSecond, setOpenSecond] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const onSecondOverlayClose = () => {\n    setOpenSecond(!openSecond);\n  }\n\n  const headerOptions = {\n    heading: 'Heading',\n    subHeading: 'Subheading'\n  };\n\n  const options = {\n    onClose,\n    open,\n    headerOptions,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\" onClick={() => setOpenSecond(true)}>Open</Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    )\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Sidesheet</Button>\n      <Sidesheet {...options} closeOnEscape={true}>\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n      <Modal\n        closeOnEscape={true}\n        open={openSecond}\n        dimension='medium'\n        backdropClose={false}\n        onClose={onSecondOverlayClose}\n        headerOptions={{\n          heading: 'Heading Part Two',\n          subHeading: 'Subheading Part Two',\n        }}\n        footer={\n          <>\n            <Button appearance=\"primary\" className=\"ml-4\" onClick={() => console.log('Primary button click')}>\n              Primary\n            </Button>\n          </>\n        }\n      >\n        <Text>Modal Part Two Body</Text>\n        <ModalDescription description=\"Card Sections include supporting text like an article summary or a restaurant description.\" />\n      </Modal>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Sidesheet",
      "code": "import { Button, Sidesheet, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const headerOptions = {\n    heading: 'Heading',\n    subHeading: 'Subheading'\n  };\n\n  const options = {\n    onClose,\n    open,\n    headerOptions,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">Primary</Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    )\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Sidesheet</Button>\n      <Sidesheet {...options} dimension=\"regular\">\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n      </Sidesheet>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Sidesheet",
      "code": "import { Button, Sidesheet, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(!open);\n  };\n\n  const backIconCallback = (e) => {\n    console.log('back icon clicked');\n  }\n\n  const headerOptions = {\n    backIconCallback,\n    backIcon: true,\n    heading: 'Heading',\n    subHeading: 'Subheading'\n  };\n\n  const options = {\n    onClose,\n    open,\n\t\theaderOptions,\n\t\tstickFooter: true,\n    footer: (\n      <>\n        <Button appearance=\"primary\" className=\"mr-4\">Primary</Button>\n        <Button appearance=\"basic\">Basic</Button>\n      </>\n    )\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Sidesheet</Button>\n      <Sidesheet {...options} >\n        <Text>Modal Body</Text>\n        <ModalDescription {...modalDescriptionOptions} />\n        <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.<br />\n\t\t\t\tUt enim ad minim veniam,\n        quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.<br />\n\t\t\t\tDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br />\n\t\t\t\tExcepteur sint occaecat cupidatat non proident,\n        sunt in culpa qui officia deserunt mollit anim id est laborum.<br />\n      </Sidesheet>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Sidesheet",
      "code": "import { Button, Sidesheet, Heading, Text, ModalDescription } from '@innovaccer/design-system';\n    () => {\n  const [open, setOpen] = React.useState(false);\n  const [page, setPage] = React.useState(1);\n  const [animate, setAnimate] = React.useState(true);\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  React.useEffect(() => {\n    setAnimate(true);\n    return () => {\n      setAnimate(false);\n    }\n  }, [page])\n\n  const backIconCallback = (e) => {\n    console.log('back icon clicked');\n    setPage(1);\n  };\n\n  const headerOptions = {\n    backIconCallback,\n    backIcon: page === 2,\n    heading: `Heading ${page}`,\n    subHeading: 'Subheading',\n  };\n\n  const options = {\n    onClose,\n    open,\n    headerOptions,\n    stickFooter: true,\n    backdropClose: true,\n    footer: (\n      <>\n        {page === 1 && (\n          <Button\n            appearance=\"primary\"\n            className=\"mr-4\"\n            onClick={() => setPage(2)}\n          >\n            Next\n          </Button>\n        )}\n        {page === 2 && (\n          <>\n            <Button\n              appearance=\"primary\"\n              onClick={() => console.log('Submit button click')}\n              className=\"mr-4\"\n            >\n              Submit\n            </Button>\n            <Button\n              appearance=\"basic\"\n              onClick={() => setPage(1)}\n            >\n              Back\n            </Button>\n          </>\n        )}\n      </>\n    )\n  };\n\n  const modalDescriptionOptions = {\n    title: 'Description Title',\n    description: 'Adding a subheading clearly indicates the hierarchy of the information.',\n    removePadding: true\n  };\n\n  const modalDescriptionOptionsWithoutTitle = {\n    description: 'Card Sections include supporting text like an article summary or a restaurant description.',\n    removePadding: true\n  };\n\n  return (\n    <div>\n      <Button appearance=\"primary\" onClick={() => setOpen(true)}>Open Sidesheet</Button>\n      <Sidesheet {...options} >\n        <div \n          className={ animate ? 'fade-in' : ''} \n          onAnimationEnd={() => setAnimate(false)}\n        >\n          <Heading size=\"s\">{`Page ${page}`}</Heading>\n          <Text>Modal Body</Text>\n          <ModalDescription {...modalDescriptionOptions} />\n          <ModalDescription {...modalDescriptionOptionsWithoutTitle} />\n        </div>\n      </Sidesheet>\n    </div>\n  );\n}\n    "
    }
  ],
  "slider": [
    {
      "query": "Slider All",
      "code": "import { Slider } from '@innovaccer/design-system';\n    () => {\n  const min = 0;\n  const max = 10;\n  const stepSize = 0.1;\n  const labelStepSize = 1;\n  const defaultValue = 4;\n  const label = 'Slider Label';\n  const disabled = false;\n\n  const onChange = (value) => {\n    return action(`new value: ${value}`);\n  };\n\n  const options = {\n    min,\n    max,\n    stepSize,\n    labelStepSize,\n    label,\n    disabled,\n    defaultValue,\n    onChange,\n  };\n\n  return <Slider key={defaultValue} className=\"mt-2\" {...options} />;\n}\n    "
    },
    {
      "query": "Slider   Controlled Slider",
      "code": "import { Slider } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState(4);\n\n  const onChange = (value) => {\n    this.window.setTimeout(() => {\n      setValue(value);\n    }, 1000);\n  };\n\n  return (\n    <Slider\n      min={1}\n      max={10}\n      label='Controlled Slider'\n      stepSize={0.1}\n      labelStepSize={1}\n      value={value}\n      onChange={onChange}\n      className=\"mt-2\"\n    />\n  );\n}\n    "
    },
    {
      "query": "Slider   Cutsom Labels",
      "code": "import { Slider } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState(4);\n\n  const onChange = (value) => {\n    setValue(value);\n  };\n\n  const labelRenderer = (value) => {\n    return `${value}%`;\n  };\n\n  return (\n    <Slider\n      min={1}\n      max={10}\n      stepSize={0.1}\n      labelStepSize={1}\n      value={value}\n      onChange={onChange}\n      labelRenderer={labelRenderer}\n    />\n  );\n}\n    "
    },
    {
      "query": "Slider   Disabled",
      "code": "import { Slider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <Slider\n        className=\"mb-9 mt-2\"\n        label=\"Disabled Slider\"\n        disabled={true}\n        stepSize={0.1}\n        labelStepSize={1}\n        defaultValue={4}\n      />\n      <Slider label=\"Default Slider\" stepSize={0.1} labelStepSize={1} defaultValue={4} className=\"mt-2\" />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Slider   Disctere Slider",
      "code": "import { Slider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Slider min={1} max={10} label=\"Discrete Slider\" stepSize={1} labelStepSize={1} defaultValue={4} className=\"mt-2\" />\n  );\n}\n    "
    },
    {
      "query": "Slider   Free Slider",
      "code": "import { Slider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Slider min={1} max={10} label=\"Free Slider\" stepSize={0.1} labelStepSize={1} defaultValue={4} className=\"mt-2\" />\n  );\n}\n    "
    },
    {
      "query": "Slider   Slider Label",
      "code": "import { Text, Slider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <div className=\"mb-9\">\n        <Text weight=\"strong\">With Slider Label</Text>\n        <br />\n        <Slider label=\"Slider-label\" stepSize={0.1} labelStepSize={1} defaultValue={4} className=\"mt-2\" />\n      </div>\n      <div>\n        <Text weight=\"strong\">Without Slider Label</Text>\n        <br />\n        <Slider stepSize={0.1} labelStepSize={1} defaultValue={4} className=\"mt-2\" />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Slider   Uncontrolled Slider",
      "code": "import { Slider } from '@innovaccer/design-system';\n    () => {\n  return (\n    <Slider\n      min={1}\n      max={10}\n      label=\"Uncontrolled Slider\"\n      stepSize={0.1}\n      labelStepSize={1}\n      defaultValue={4}\n      className=\"mt-2\"\n    />\n  );\n}\n    "
    }
  ],
  "statushint": [
    {
      "query": "StatusHint All",
      "code": "import { StatusHint } from '@innovaccer/design-system';\n    () => {\n  const children = 'Status Hint';\n\n  const appearance = 'success';\n\n  const options = {\n    appearance,\n  };\n\n  return (\n    <div>\n      <StatusHint {...options}>{children}</StatusHint>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "StatusHint",
      "code": "import { StatusHint } from '@innovaccer/design-system';\n    () => <StatusHint appearance=\"alert\">{'Alert'}</StatusHint>\n    "
    },
    {
      "query": "StatusHint",
      "code": "import { StatusHint } from '@innovaccer/design-system';\n    () => <StatusHint appearance=\"success\">{'Completed'}</StatusHint>\n    "
    },
    {
      "query": "StatusHint",
      "code": "import { StatusHint } from '@innovaccer/design-system';\n    () => <StatusHint appearance=\"default\">{'Default'}</StatusHint>\n    "
    },
    {
      "query": "StatusHint",
      "code": "import { StatusHint } from '@innovaccer/design-system';\n    () => <StatusHint appearance=\"alert\">{'Inactive'}</StatusHint>\n    "
    },
    {
      "query": "StatusHint",
      "code": "import { StatusHint } from '@innovaccer/design-system';\n    () => <StatusHint appearance=\"info\">{'Info'}</StatusHint>\n    "
    },
    {
      "query": "StatusHint",
      "code": "import { StatusHint } from '@innovaccer/design-system';\n    () => <StatusHint appearance=\"warning\">{'Ongoing'}</StatusHint>\n    "
    },
    {
      "query": "StatusHint",
      "code": "import { StatusHint } from '@innovaccer/design-system';\n    () => <StatusHint appearance=\"success\">{'Success'}</StatusHint>\n    "
    },
    {
      "query": "StatusHint",
      "code": "import { StatusHint } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['info', 'success', 'alert', 'warning', 'default'];\n\n  return (\n    <div>\n      {appearances.map((iconAppearance, i) => {\n        return (\n          <div key={i} className=\"mb-4\">\n            <StatusHint appearance={iconAppearance}>{iconAppearance}</StatusHint>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "stepper": [
    {
      "query": "Stepper All",
      "code": "import { Stepper } from '@innovaccer/design-system';\n    () => {\n  const [active, setActive] = React.useState(2);\n\n  const steps = [\n    {\n      label: 'Step',\n      value: 'Step1'\n    },\n    {\n      label: 'Step',\n      value: 'Step2'\n    },\n    {\n      label: 'Step',\n      value: 'Step3'\n    },\n    {\n      label: 'Step',\n      value: 'Step4'\n    }\n  ];\n\n  const onChange = (index) => {\n    setActive(index);\n  };\n\n  return (\n    <Stepper\n      steps={steps}\n      active={active}\n      completed={1}\n      onChange={onChange}\n    />\n  );\n}\n    "
    },
    {
      "query": "Stepper Skippable Step",
      "code": "import { Stepper, Button } from '@innovaccer/design-system';\n    () => {\n  const steps = [\n    {\n      label: 'Application details',\n      value: 'application_details'\n    },\n    {\n      label: 'Approval questions',\n      value: 'approval_questions'\n    },\n    {\n      label: 'Payer information',\n      value: 'payer_information'\n    },\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(active - 1);\n  const [skipIndexes, setSkip] = React.useState([]);\n  const requiredSteps = [0];\n\n  const onChange = (activeStep) => {\n    setActive(activeStep);\n  };\n\n  const onClickHandler = () => {\n    if (skipIndexes.includes(active)) {\n      const updatedSkip = [...skipIndexes];\n      const index = updatedSkip.findIndex(skippedIndex => skippedIndex === active);\n      updatedSkip.splice(index, 1);\n      setSkip(updatedSkip);\n    }\n    const updatedActive = active > completed ? active + 1 : completed + 1;\n    if (active > completed) setCompleted(active);\n    setActive(updatedActive);\n  };\n\n  const onSkipHandler = () => {\n    const updatedActive = active > completed ? active + 1 : completed + 1;\n    setActive(updatedActive);\n    if (!skipIndexes.includes(active)) {\n      setSkip([...skipIndexes, active, updatedActive]);\n    }\n  };\n\n  return (\n    <div\n      className=\"d-flex flex-column justify-content-between align-items-end py-4 px-4 bg-secondary-lightest\"\n      style={{ height: '200px' }}\n    >\n      <div className=\"d-flex justify-content-center py-5 w-100\">\n        <Stepper\n          steps={steps}\n          active={active}\n          completed={completed}\n          onChange={onChange}\n          skipIndexes={skipIndexes}\n        />\n      </div>\n      <br />\n      <div className=\"w-25 d-flex justify-content-end\">\n        <Button onClick={onSkipHandler} disabled={requiredSteps.includes(active)} className=\"mr-4\">Skip</Button>\n        <Button onClick={onClickHandler} appearance=\"primary\">Next</Button>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Stepper Standalone Stepper",
      "code": "import { Stepper } from '@innovaccer/design-system';\n    () => {\n  const [active, setActive] = React.useState(0);\n\n  const steps = [\n    {\n      label: 'Enter email',\n      value: 'enter_email'\n    },\n    {\n      label: 'Verify email',\n      value: 'verify_email'\n    },\n    {\n      label: 'Create profile',\n      value: 'create_profile'\n    },\n    {\n      label: 'Setup organization',\n      value: 'setup_organization'\n    },\n    {\n      label: 'Invite team',\n      value: 'invite_team'\n    }\n  ];\n\n  const onChange = (index) => {\n    setActive(index);\n  };\n\n  return (\n    <Stepper\n      steps={steps}\n      active={active}\n      completed={-1}\n      onChange={onChange}\n    />\n  );\n}\n    "
    },
    {
      "query": "Stepper Stepper In Page Header",
      "code": "import { Stepper, Text, Avatar, Dropdown, Button, Breadcrumbs, Badge, MetaList, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const stepperData = [\n    {\n      value: 'step_1',\n      label: 'Recipients',\n    },\n    {\n      value: 'step_2',\n      label: 'Message'\n    },\n    {\n      value: 'step_3',\n      label: 'Schedule',\n    }\n  ];\n\n  const options = [\n    {\n      label: 'Option 1',\n      value: 'Option 1',\n    },\n    {\n      label: 'Option 2',\n      value: 'Option 2',\n    },\n    {\n      label: 'Option 3',\n      value: 'Option 3',\n    }\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(-1);\n\n  const onChangeHandler = (activeStep) => {\n    setActive(activeStep);\n  };\n\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  };\n\n  const stepper = <Stepper steps={stepperData} onChange={onChangeHandler} active={active} completed={completed} />;\n\n  const actions = (\n    <div className=\"d-flex justify-content-end align-items-center\">\n      <Text className=\"mr-4\">few minutes ago</Text>\n      <Avatar className=\"mr-4\" firstName=\"John\" lastName=\"Doe\" appearance=\"accent2\"/>\n      <div className=\"mr-4\">\n        <Dropdown\n          menu={true}\n          icon=\"more_horiz\"\n          options={options}\n        />\n      </div>\n      <Button className=\"mr-4\">Finish Later</Button>\n      <Button className=\"mr-4\" appearance=\"primary\" onClick={onClickHandler}>Next</Button>\n    </div>\n  );\n\n  const breadcrumbs = (\n    <Breadcrumbs\n      list={[{\n        label: 'Campaigns',\n        link: '/Campaigns'\n      }]}\n      onClick={link => console.log(`on-click: ${link}`)}\n    />\n  );\n\n  const badge = (\n    <Badge appearance=\"secondary\">Message</Badge>\n  );\n\n  const meta = (\n    <MetaList\n      list={[{ label: 'Alert'}, { label: 'Draft' }]}\n      seperator={true}\n    />\n  );\n\n  return (\n    <div className=\"p-6 bg-secondary-lightest\" style={{width:'1200px'}}>\n      <PageHeader\n        title=\"Annual Wellness Visit\"\n        separator={true}\n        navigationPosition=\"center\"\n        stepper={stepper}\n        actions={actions}\n        breadcrumbs={breadcrumbs}\n        badge={badge}\n        meta={meta}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Stepper   Active Step",
      "code": "import { Stepper } from '@innovaccer/design-system';\n    () => {\n  const [active, setActive] = React.useState(0);\n\n  const steps = [\n    {\n      label: 'Step',\n      value: 'Step1'\n    },\n    {\n      label: 'Step',\n      value: 'Step2'\n    },\n    {\n      label: 'Step',\n      value: 'Step3'\n    },\n    {\n      label: 'Step',\n      value: 'Step4'\n    }\n  ];\n\n  const onChange = (index) => {\n    setActive(index);\n  };\n\n  return (\n    <Stepper\n      steps={steps}\n      active={active}\n      onChange={onChange}\n    />\n  );\n}\n    "
    },
    {
      "query": "Stepper   Completed Step",
      "code": "import { Stepper } from '@innovaccer/design-system';\n    () => {\n  const [active, setActive] = React.useState(3);\n\n  const steps = [\n    {\n      label: 'Step',\n      value: 'Step1'\n    },\n    {\n      label: 'Step',\n      value: 'Step2'\n    },\n    {\n      label: 'Step',\n      value: 'Step3'\n    },\n    {\n      label: 'Step',\n      value: 'Step4'\n    }\n  ];\n\n  const onChange = (index) => {\n    setActive(index);\n  };\n\n  return (\n    <Stepper\n      steps={steps}\n      active={active}\n      completed={2}\n      onChange={onChange}\n    />\n  );\n}\n    "
    },
    {
      "query": "Stepper   Stepper With Skip",
      "code": "import { Stepper, Button } from '@innovaccer/design-system';\n    () => {\n  const steps = [\n    {\n      label: 'Step',\n      value: 'Step1'\n    },\n    {\n      label: 'Step',\n      value: 'Step2'\n    },\n    {\n      label: 'Step',\n      value: 'Step3'\n    },\n    {\n      label: 'Step',\n      value: 'Step4'\n    }\n  ];\n\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(active - 1);\n  const [skipIndexes, setSkipIndexes] = React.useState([]);\n  const requiredSteps = [0];\n\n  const onChange = (activeStep) => {\n    setActive(activeStep);\n  };\n\n  const onClickHandler = () => {\n    if (skipIndexes.includes(active)) {\n      const updatedSkip = [...skipIndexes];\n      const index = updatedSkip.findIndex(skippedIndex => skippedIndex === active);\n      updatedSkip.splice(index, 1);\n      setSkipIndexes(updatedSkip);\n    }\n    const updatedActive = active > completed ? active + 1 : completed + 1;\n    if (active > completed) setCompleted(active);\n    setActive(updatedActive);\n  };\n\n  const onSkipHandler = () => {\n    const updatedActive = active > completed ? active + 1 : completed + 1;\n    setActive(updatedActive);\n    if (!skipIndexes.includes(active)) {\n      setSkipIndexes([...skipIndexes, active]);\n    }\n  };\n\n  return (\n    <div\n      className=\"d-flex flex-column justify-content-between align-items-end py-4 px-4 bg-secondary-lightest\"\n      style={{ height: '200px' }}\n    >\n      <div className=\"d-flex justify-content-center py-5 bg-light w-100\">\n        <Stepper\n          steps={steps}\n          active={active}\n          completed={completed}\n          onChange={onChange}\n          skipIndexes={skipIndexes}\n        />\n      </div>\n      <br />\n      <div className=\"w-25 d-flex justify-content-end\">\n        <Button onClick={onSkipHandler} disabled={requiredSteps.includes(active)} className=\"mr-4\">Skip</Button>\n        <Button onClick={onClickHandler} appearance=\"primary\">Next</Button>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Stepper variants Stepper With Trigger",
      "code": "import { Stepper, Button } from '@innovaccer/design-system';\n    () => {\n  const steps = [\n    {\n      label: 'Step',\n      value: 'Step1'\n    },\n    {\n      label: 'Step',\n      value: 'Step2'\n    },\n    {\n      label: 'Step',\n      value: 'Step3'\n    },\n    {\n      label: 'Step',\n      value: 'Step4'\n    }\n  ];\n  const [active, setActive] = React.useState(0);\n  const [completed, setCompleted] = React.useState(active - 1);\n  const onChange = (index) => {\n    setActive(index);\n  };\n  const onClickHandler = () => {\n    if (active > completed) setCompleted(active);\n    active > completed ? setActive(active + 1) : setActive(completed + 1);\n  };\n  return (\n    <div\n      className=\"d-flex flex-column justify-content-between align-items-end py-4 px-4\"\n      style={{ height: '200px', background: 'var(--secondary-lightest)' }}\n    >\n      <div className=\"d-flex justify-content-center py-5 bg-light w-100\">\n        <Stepper\n          steps={steps}\n          active={active}\n          completed={completed}\n          onChange={onChange}\n        />\n      </div>\n      <br />\n      <div className=\"w-25 d-flex justify-content-end\">\n        <Button onClick={onClickHandler} appearance=\"primary\">Next</Button>\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "subheading": [
    {
      "query": "Subheading",
      "code": "import { Subheading } from '@innovaccer/design-system';\n    () => {\n  const appearance = 'white';\n\n  return (\n    <div className={appearance === 'white' ? 'bg-dark' : 'bg-transparent'}>\n      <Subheading appearance={appearance}>\n        Subheading component have different varients, look for options in knobs tab.\n      </Subheading>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Subheading",
      "code": "import { Subheading, Text } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['default', 'subtle', 'disabled', 'white'];\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-6\">\n            <div className={appear === 'white' ? 'bg-dark' : 'bg-transparent'}>\n              <Subheading appearance={appear}>Subheading</Subheading>\n            </div>\n            <br />\n            <Text weight=\"strong\">{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "switch": [
    {
      "query": "Switch All",
      "code": "import { Label, Switch } from '@innovaccer/design-system';\n    () => {\n  const size = 'tiny';\n\n  const [checked, setChecked] = React.useState(false);\n\n  const disabled = false;\n\n  const onChangeHandler = (_event, checkedValue) => {\n    setChecked(!checked);\n    return action(`switch-change: ${checkedValue}`)();\n  };\n\n  return (\n    <form>\n      <Label htmlFor=\"vaccination-status\">Have you been vaccinated ?</Label>\n      <div>\n        <Switch id=\"vaccination-status\" disabled={disabled} checked={checked} size={size} onChange={onChangeHandler} />\n      </div>\n    </form>\n  );\n}\n    "
    },
    {
      "query": "Switch",
      "code": "import { Switch } from '@innovaccer/design-system';\n    () => <Switch aria-label=\"Default Checked Switch\" defaultChecked={true} size=\"regular\" />\n    "
    },
    {
      "query": "Switch",
      "code": "import { Switch } from '@innovaccer/design-system';\n    () => <Switch aria-label=\"Off State Switch\" defaultChecked={false} size=\"regular\" />\n    "
    },
    {
      "query": "Switch",
      "code": "import { Switch, Text } from '@innovaccer/design-system';\n    () => {\n  const sizes = ['tiny', 'regular', 'large'];\n\n  return (\n    <div className=\"d-flex\">\n      {sizes.map((SwitchSize, ind) => {\n        return (\n          <div key={ind} className=\"mr-9\">\n            <div className=\"h-50\">\n              <Switch aria-label={`Switch ${SwitchSize}`} defaultChecked={true} size={SwitchSize} />\n            </div>\n            <br />\n            <Text weight=\"strong\">{SwitchSize.charAt(0).toUpperCase() + SwitchSize.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Switch",
      "code": "import { Switch, Text } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-9\">\n        <Switch aria-label=\"Switch enabled\" defaultChecked={true} disabled={false} />\n        <br />\n        <Text weight=\"strong\">Enabled</Text>\n      </div>\n      <div>\n        <Switch aria-label=\"Switch disabled\" disabled={true} defaultChecked={true} />\n        <br />\n        <Text weight=\"strong\">Disabled</Text>\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "table": [
    {
      "query": "Table All",
      "code": "import { Card, Table } from '@innovaccer/design-system';\n    () => {\n  const async = false;\n\n  let loading;\n  let error;\n  let applyData;\n  let applySchema;\n  const applyLoaderSchema = true;\n\n  if (!async) {\n    loading = false;\n\n    error = false;\n\n    applySchema = true;\n\n    applyData = true;\n  }\n\n  const type = 'resource';\n\n  const size = 'comfortable';\n\n  const draggable = true;\n\n  const nestedRows = false;\n\n  const withHeader = true;\n\n  const withCheckbox = false;\n\n  const showMenu = true;\n\n  const withPagination = false;\n\n  const page = 1;\n\n  const paginationType = 'jump';\n\n  const pageSize = 12;\n\n  const multipleSorting = false;\n\n  const headCellTooltip = false;\n\n  const separator = false;\n\n  const filterPosition = 'HEADER';\n\n  let dataAttr = {};\n  if (async) {\n    dataAttr = {\n      fetchData,\n    };\n  } else {\n    dataAttr = {\n      loading,\n      error,\n      schema: applySchema ? schema : [],\n      data: applyData ? data : [],\n    };\n  }\n\n  return (\n    <div className=\"vh-75\">\n      <Card className=\"h-100 overflow-hidden\">\n        <Table\n          key={`${async}`}\n          {...dataAttr}\n          loading={loading}\n          error={error}\n          errorTemplate={errorTemplate}\n          withHeader={withHeader}\n          headerOptions={{\n            withSearch: true,\n          }}\n          withCheckbox={withCheckbox}\n          showMenu={showMenu}\n          type={type}\n          size={size}\n          headCellTooltip={headCellTooltip}\n          separator={separator}\n          draggable={draggable}\n          nestedRows={nestedRows}\n          nestedRowRenderer={nestedRowRenderer}\n          withPagination={withPagination}\n          page={page}\n          paginationType={paginationType}\n          pageSize={pageSize}\n          loaderSchema={applyLoaderSchema ? loaderSchema : undefined}\n          onRowClick={(rowData, rowIndex) =>\n            action(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)()\n          }\n          onSelect={(rowIndex, selected, selectedList, selectAll) =>\n            action(\n              `on-select:- rowIndex: ${rowIndex} selected: ${selected} selectedList: ${JSON.stringify(\n                selectedList\n              )} selectAll: ${selectAll}`\n            )()\n          }\n          onPageChange={(newPage) => action(`on-page-change:- ${newPage}`)()}\n          onSearch={(currData, searchTerm) => {\n            action(`on-search:- currData: ${JSON.stringify(currData)}, searchTerm: ${searchTerm}`)();\n            return currData;\n          }}\n          multipleSorting={multipleSorting}\n          sortingList={[{ name: 'name', type: 'desc' }]}\n          filterList={{\n            name: ['h-r', 's-z'],\n          }}\n          filterPosition={filterPosition}\n        />\n      </Card>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Compressed Table",
      "code": "import { Card, Table } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'MSSP Track 1 Urban',\n      status: \"Active\",\n      measures: \"9\",\n      current_period: \"March 2017 - Feb 2018\",\n      added_in: \"March 2014\",\n    },\n    {\n      name: 'MSSP Track 1 Rural',\n      status: \"Active\",\n      measures: \"9\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2015\",\n    },\n    {\n      name: 'MSSP Track 2',\n      status: \"Inactive\",\n      measures: \"14\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2016\",\n    },\n    {\n      name: 'Aetna',\n      status: \"Active\",\n      measures: \"20\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2019\",\n    },\n    {\n      name: 'BCBS',\n      status: \"Active\",\n      measures: \"16\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2017\",\n    },\n  ];\n\n  const schema = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'status',\n      displayName: 'Status',\n      width: '20%',\n      translate: a => ({\n        title: a.status,\n        statusAppearance: (a.status === 'Inactive') ? 'default' : 'success'\n      }),\n      cellType: \"STATUS_HINT\",\n      sorting: false\n    },\n    {\n      name: 'measures',\n      displayName: 'No. of Measures',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'current_period',\n      displayName: 'Current Period',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'added_in',\n      displayName: 'Added in',\n      width: '20%',\n      sorting: false\n    },\n  ];\n\n  return (\n      <Card>\n        <Table\n          showMenu={false}\n          size=\"compressed\"\n          separator={false}\n          data={data}\n          schema={schema}\n          withHeader={true}\n          headerOptions={{\n            withSearch: true\n          }}\n          onSearch={(currData, searchTerm) => {\n            return currData.filter(d =>\n              d.name.toLowerCase().match(searchTerm.toLowerCase())\n            );\n          }}\n          withPagination={false}\n        />\n      </Card>\n  );\n}\n    "
    },
    {
      "query": "Pinned Column",
      "code": "import { Card, Table } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      s_no: 1,\n      empi: \"P087636\",\n      first_name: \"Joy\",\n      last_name: \"Lawson\",\n      dob: \"01/12/1982\",\n      gender: 'Female',\n      facility: 'Charity Medical Clinic'\n    },\n    {\n      s_no: 2,\n      empi: \"P087637\",\n      first_name: \"Hannah\",\n      last_name: \"Pop\",\n      dob: \"01/11/1982\",\n      gender: 'Female',\n      facility: 'Bancroft Medical Clinic'\n    },\n    {\n      s_no: 3,\n      empi: \"P087638\",\n      first_name: \"Lisa\",\n      last_name: \"Sanchez\",\n      dob: \"02/12/1981\",\n      gender: 'Female',\n      facility: 'Lullaby Medical Clinic'\n    },\n    {\n      s_no: 4,\n      empi: \"P087639\",\n      first_name: \"Kathy\",\n      last_name: \"Powell\",\n      dob: \"01/10/1972\",\n      gender: 'Female',\n      facility: 'Charity Medical Clinic'\n    },\n    {\n      s_no: 5 ,\n      empi: \"P087631\",\n      first_name: \"Dennis\",\n      last_name: \"Lane\",\n      dob: \"01/10/1982\",\n      gender: 'Male',\n      facility: 'Lullaby Medical Clinic'\n    },\n  ];\n\n  const schema = [\n    {\n      name: 's_no',\n      displayName: 'S.no.',\n      width: '5%',\n      sorting: false,\n      pinned: 'left'\n    },\n    {\n      name: 'empi',\n      displayName: 'EMPI',\n      width: '10%',\n      sorting: false,\n      pinned: 'left'\n    },\n    {\n      name: 'first_name',\n      displayName: 'First Name',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'last_name',\n      displayName: 'Last Name',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'dob',\n      displayName: 'DOB',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'gender',\n      displayName: 'Gender',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'facility',\n      displayName: 'Facility',\n      sorting: false\n    },\n  ];\n\n  return (\n      <Card>\n        <Table\n          showMenu={false}\n          size=\"compressed\"\n          separator={false}\n          data={data}\n          schema={schema}\n          withHeader={true}\n          headerOptions={{\n            withSearch: false\n          }}\n          withPagination={false}\n        />\n      </Card>\n  );\n}\n    "
    },
    {
      "query": "Standard Table",
      "code": "import { Card, Table } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'MSSP Track 1 Urban',\n      status: \"Active\",\n      measures: \"9\",\n      current_period: \"March 2017 - Feb 2018\",\n      added_in: \"March 2014\",\n    },\n    {\n      name: 'MSSP Track 1 Rural',\n      status: \"Active\",\n      measures: \"9\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2015\",\n    },\n    {\n      name: 'MSSP Track 2',\n      status: \"Inactive\",\n      measures: \"14\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2016\",\n    },\n    {\n      name: 'Aetna',\n      status: \"Active\",\n      measures: \"20\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2019\",\n    },\n    {\n      name: 'BCBS',\n      status: \"Active\",\n      measures: \"16\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2017\",\n    },\n  ];\n\n  const schema = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'status',\n      displayName: 'Status',\n      width: '20%',\n      translate: a => ({\n        title: a.status,\n        statusAppearance: (a.status === 'Inactive') ? 'default' : 'success'\n      }),\n      cellType: \"STATUS_HINT\",\n      sorting: false\n    },\n    {\n      name: 'measures',\n      displayName: 'No. of Measures',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'current_period',\n      displayName: 'Current Period',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'added_in',\n      displayName: 'Added in',\n      width: '20%',\n      sorting: false\n    },\n  ];\n\n  return (\n      <Card>\n        <Table\n          showMenu={false}\n          separator={false}\n          data={data}\n          schema={schema}\n          withHeader={true}\n          headerOptions={{\n            withSearch: true\n          }}\n          onSearch={(currData, searchTerm) => {\n            return currData.filter(d =>\n              d.name.toLowerCase().match(searchTerm.toLowerCase())\n            );\n          }}\n          withPagination={false}\n        />\n      </Card>\n  );\n}\n    "
    },
    {
      "query": "Table as Description List",
      "code": "import { Text, Button, Card, List } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'jonathandoe@gamil.com',\n      owner: true\n    },\n    {\n      firstName: 'Katty',\n      lastName: 'Perry',\n      email: 'kattyperry21@gamil.com',\n      edit: true\n    },\n    {\n      firstName: 'Daniel',\n      lastName: 'Low',\n      email: 'daniellow02@yahoo.com',\n      view: true\n    },\n    {\n      firstName: 'Randy',\n      lastName: 'Boatwright',\n      email: 'rboatwright3@arstechnica.com',\n      edit: true,\n    },\n    {\n      firstName: 'Rolando',\n      lastName: 'Cyples',\n      email: 'rcyples4@biglobe.ne.jp',\n      owner: true,\n    },\n  ];\n\n  const schema = [\n    {\n      name: 'info',\n      displayName: 'Info',\n      width: '75%',\n      cellType: 'AVATAR_WITH_META_LIST',\n      translate: a => ({\n        firstName: a.firstName,\n        lastName: a.lastName,\n        title: `${a.firstName} ${a.lastName}`,\n        metaList: [a.email]\n      }),\n    },\n    {\n      name: 'rights',\n      displayName: 'Rights',\n      width: '25%',\n      cellRenderer: (props) => {\n        const renderRights = () => {\n          if (props.data.owner) {\n            return <Text appearance=\"subtle\" className=\"pr-5\">owner</Text>;\n          }\n\n          if (props.data.edit || props.data.view) {\n            const rights = props.data.edit ? 'edit' : 'view';\n            return (\n              <Button\n                icon=\"keyboard_arrow_down\"\n                iconAlign=\"right\"\n                appearance=\"transparent\"\n                onClick={e => e.stopPropagation()}\n              >\n                {`can ${rights}`}\n              </Button>\n            );\n          }\n\n          return null;\n        };\n\n        return (\n          <div className=\"d-flex align-items-center justify-content-end flex-grow-1\">\n            {renderRights()}\n          </div>\n        );\n      }\n    }\n  ];\n\n  return (\n      <Card  className=\"py-4\">\n        <Text size=\"large\" weight=\"strong\" className=\"ml-5\">Sharing Test Manual</Text>\n        <List\n          type=\"resource\"\n          withHeader={true}\n          headerOptions={{\n            withSearch: true,\n            dynamicColumn: false\n          }}\n          separator={false}\n          showMenu={false}\n          data={data}\n          schema={schema}\n          withPagination={false}\n          onSearch={(currData, searchTerm) => {\n            return currData.filter(d =>\n              d.firstName.toLowerCase().match(searchTerm.toLowerCase())\n              || d.lastName.toLowerCase().match(searchTerm.toLowerCase())\n            );\n          }}\n          onRowClick={(rowData, rowIndex) =>\n            console.log(`o\n-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)\n          }\n        />\n      </Card>\n  );\n}\n    "
    },
    {
      "query": "Table as Option List",
      "code": "import { Card, Text, List } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      assessment: 'Alcohol Usage Disorders Identification Test - C (Audit C)',\n    },\n    {\n      assessment: 'Functional Assessment - Initial',\n    },\n    {\n      assessment: 'Functional Assessment - Discharge',\n    },\n    {\n      assessment: 'Hypertension - Diabetes Symptoms Identification Test',\n    },\n    {\n      assessment: 'Patient Health Questionaire',\n    },\n  ];\n\n  const schema = [\n    {\n      name: 'assessment',\n      displayName: 'Assessment',\n      cellType: \"DEFAULT\",\n      width: '100%'\n    },\n  ];\n\n  return (\n      <Card>\n        <Text size=\"large\" weight=\"strong\" className=\"ml-5\">Select Assessment</Text>\n        <List\n          type=\"resource\"\n          withHeader={true}\n          headerOptions={{\n            withSearch: true,\n            dynamicColumn: false\n          }}\n          separator={false}\n          showMenu={false}\n          data={data}\n          schema={schema}\n          withPagination={false}\n          onSearch={(currData, searchTerm) => {\n            return currData.filter(d =>\n              d.assessment.toLowerCase().match(searchTerm.toLowerCase())\n            );\n          }}\n          onRowClick={(rowData, rowIndex) =>\n            console.log(`on-row-click:- rowIndex: ${rowIndex} data: ${JSON.stringify(rowData)}`)\n          }\n        />\n      </Card>\n  );\n}\n    "
    },
    {
      "query": "Tight Table",
      "code": "import { Card, Table } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'MSSP Track 1 Urban',\n      status: \"Active\",\n      measures: \"9\",\n      current_period: \"March 2017 - Feb 2018\",\n      added_in: \"March 2014\",\n    },\n    {\n      name: 'MSSP Track 1 Rural',\n      status: \"Active\",\n      measures: \"9\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2015\",\n    },\n    {\n      name: 'MSSP Track 2',\n      status: \"Inactive\",\n      measures: \"14\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2016\",\n    },\n    {\n      name: 'Aetna',\n      status: \"Active\",\n      measures: \"20\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2019\",\n    },\n    {\n      name: 'BCBS',\n      status: \"Active\",\n      measures: \"16\",\n      current_period: \"March 2017 - Feb 201\",\n      added_in: \"March 2017\",\n    },\n  ];\n\n  const schema = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'status',\n      displayName: 'Status',\n      width: '20%',\n      translate: a => ({\n        title: a.status,\n        statusAppearance: (a.status === 'Inactive') ? 'default' : 'success'\n      }),\n      cellType: \"STATUS_HINT\",\n      sorting: false\n    },\n    {\n      name: 'measures',\n      displayName: 'No. of Measures',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'current_period',\n      displayName: 'Current Period',\n      width: '20%',\n      sorting: false\n    },\n    {\n      name: 'added_in',\n      displayName: 'Added in',\n      width: '20%',\n      sorting: false\n    },\n  ];\n\n  return (\n      <Card>\n        <Table\n          showMenu={false}\n          size=\"tight\"\n          separator={false}\n          data={data}\n          schema={schema}\n          withHeader={true}\n          headerOptions={{\n            withSearch: true\n          }}\n          onSearch={(currData, searchTerm) => {\n            return currData.filter(d =>\n              d.name.toLowerCase().match(searchTerm.toLowerCase())\n            );\n          }}\n          withPagination={false}\n        />\n      </Card>\n  );\n}\n    "
    },
    {
      "query": "Table   Sync Loader Schema",
      "code": "import { Card, Table } from '@innovaccer/design-system';\n    () => {\n  const loading = true;\n\n  const error = false;\n\n  const pageSize = 5;\n\n  const withCheckbox = true;\n\n  const applyLoaderSchema = true;\n\n  const applySchema = false;\n\n  const applyData = false;\n\n  return (\n    <div className=\"vh-75\">\n      <Card className=\"h-100 overflow-hidden\">\n        <Table\n          loading={loading}\n          error={error}\n          pageSize={pageSize}\n          withCheckbox={withCheckbox}\n          loaderSchema={applyLoaderSchema ? loaderSchema : []}\n          data={applyData ? data : []}\n          schema={applySchema ? schema : []}\n          showMenu={true}\n          withHeader={true}\n          headerOptions={{\n            withSearch: true,\n          }}\n        />\n      </Card>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Table   With Error Template",
      "code": "import { Button, Heading, Card, Table } from '@innovaccer/design-system';\n    \n() => {\n  const schema = [\n    {\n      name: 'name',\n      displayName: 'Name',\n      width: 300,\n      resizable: true,\n      separator: true,\n      tooltip: true,\n      translate: a => ({\n        title: `${a.firstName} ${a.lastName}`,\n        firstName: a.firstName,\n        lastName: a.lastName\n      }),\n      filters: [\n        { label: 'A-G', value: 'a-g' },\n        { label: 'H-R', value: 'h-r' },\n        { label: 'S-Z', value: 's-z' },\n      ],\n      onFilterChange: (a, filters) => {\n        for (const filter of filters) {\n          switch (filter) {\n            case 'a-g':\n              if (a.firstName[0].toLowerCase() >= 'a' && a.firstName[0].toLowerCase() <= 'g') return true;\n              break;\n            case 'h-r':\n              if (a.firstName[0].toLowerCase() >= 'h' && a.firstName[0].toLowerCase() <= 'r') return true;\n              break;\n            case 's-z':\n              if (a.firstName[0].toLowerCase() >= 's' && a.firstName[0].toLowerCase() <= 'z') return true;\n              break;\n          }\n        }\n        return false;\n      },\n      cellType: 'AVATAR_WITH_TEXT',\n    },\n    {\n      name: 'email',\n      displayName: 'Email',\n      width: 350,\n      resizable: true,\n      sorting: false,\n      cellType: 'WITH_META_LIST'\n    },\n    {\n      name: 'gender',\n      displayName: 'Gender',\n      width: 200,\n      resizable: true,\n      comparator: (a, b) => a.gender.localeCompare(b.gender),\n      cellType: 'STATUS_HINT',\n      translate: a => ({\n        title: a.gender,\n        statusAppearance: (a.gender === 'Female') ? 'alert' : 'success'\n      }),\n      filters: [\n        { label: 'Male', value: 'male' },\n        { label: 'Female', value: 'female' },\n      ],\n      onFilterChange: (a, filters) => {\n        for (const filter of filters) {\n          if (a.gender.toLowerCase() === filter) return true;\n        }\n        return false;\n      },\n    },\n    {\n      name: 'icon',\n      displayName: 'Icon',\n      width: 100,\n      resizable: true,\n      align: 'center',\n      cellType: 'ICON',\n      translate: _ => ({\n        icon: 'events'\n      })\n    },\n    {\n      name: 'customCell',\n      displayName: 'Custom Cell',\n      width: 200,\n      resizable: true,\n      separator: true,\n      cellRenderer: (props) => {\n        const {\n          loading\n        } = props;\n\n        if (loading) return <></>;\n\n        return (\n          <Button appearance={'primary'}>Button</Button>\n        );\n      }\n    },\n  ];\n\n  const errorTemplate = () => {\n    return (\n      <Heading appearance={'disabled'}>We failed as a team</Heading>\n    );\n  };\n\n  return (\n    <div\n      className=\"vh-75\"\n    >\n      <Card className=\"h-100 overflow-hidden\">\n        <Table\n          schema={schema}\n          error={true}\n          errorTemplate={errorTemplate}\n        />\n      </Card>\n    </div>\n  );\n};\n\n    "
    }
  ],
  "tabs": [
    {
      "query": "Tabs All",
      "code": "import { Tabs, Tab } from '@innovaccer/design-system';\n    () => {\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  const onTabChangeHandler = (tabIndex) => {\n    setActiveIndex(tabIndex);\n  };\n\n  return(\n    <Tabs\n      activeIndex={activeIndex}\n      onTabChange={onTabChangeHandler}\n      className=\"mb-6\"\n    >\n      <Tab label=\"Tab(Recommended)\" count={10}>\n        <div>Tab(Recommended)</div>\n      </Tab>\n      <Tab label=\"All\" icon=\"call_received\">\n        <div>All</div>\n      </Tab>\n      <Tab label=\"Extras\" disabled={true}>\n        <div>Extras</div>\n      </Tab>\n    </Tabs>\n  );\n}\n    "
    },
    {
      "query": "Tabs Basic Tabs",
      "code": "import { Heading, Dropdown, Tabs, Tab } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Feb 9, 2019 (recent)',\n      value: 'Feb 9, 2019 (recent)',\n      selected: true\n    },\n    {\n      label: 'Feb 10, 2019',\n      value: 'Feb 10, 2019'\n    },\n    {\n      label: 'Feb 11, 2019',\n      value: 'Feb 11, 2019'\n    },\n    {\n      label: 'Feb 12, 2019',\n      value: 'Feb 12, 2019'\n    },\n    {\n      label: 'Feb 13, 2019',\n      value: 'Feb 13, 2019'\n    }\n  ];\n\n  return(\n    <div>\n      <div className=\"d-flex justify-content-between\">\n        <Heading size=\"m\">Data Gaps</Heading>\n        <div style={{width: 'var(--spacing-8)'}}>\n          <Dropdown options={options} />\n        </div>\n      </div>\n      <Tabs className=\"mb-6\">\n        <Tab\n          label=\"Clinical Gaps\"\n        >\n          <div>\n            Clinical Gaps\n          </div>\n        </Tab>\n        <Tab\n          label=\"Billing Gaps\"\n        >\n          <div>\n            Billing Gaps\n          </div>\n        </Tab>\n        <Tab\n          label=\"Claim Gaps\"\n          disabled={true}\n        >\n          <div>\n            Claim Gaps\n          </div>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Tabs Custom Labels",
      "code": "import { Tabs, Tab, Badge, Text, Icon } from '@innovaccer/design-system';\n    () => {\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  const onTabChangeHandler = (tabIndex) => {\n    setActiveIndex(tabIndex);\n    console.log(`tab-change: ${tabIndex}`)();\n  };\n\n  return (\n    <Tabs\n      activeIndex={activeIndex}\n      onTabChange={onTabChangeHandler}\n      className=\"mb-6\"\n    >\n      <Tab\n        label={(\n          <>\n            <div className=\"Tab-count\">\n              <Badge appearance={activeIndex === 0 ? 'primary' : 'secondary'}>2</Badge>\n            </div>\n            <Text appearance={activeIndex !== 0 ? 'subtle' : 'link'}>Tab(Recommended)</Text>\n          </>\n        )}\n      >\n        <div>\n          Tab(Recommended)\n        </div>\n      </Tab>\n      <Tab\n        label={(\n          <div className=\"Tab-icon\">\n            <Icon name=\"south_west\" appearance={activeIndex === 1 ? 'info' : 'subtle'} />\n            <Text appearance={activeIndex !== 1 ? 'subtle' : 'link'}>All</Text>\n          </div>\n        )}\n      >\n        <div>\n          All\n        </div>\n      </Tab>\n      <Tab\n        label={(\n          <>\n            <Text appearance={activeIndex !== 2 ? 'subtle' : undefined}>Extras</Text>\n          </>\n        )}\n        disabled={true}\n      >\n        <div>\n          Extras\n        </div>\n      </Tab>\n    </Tabs>\n  );\n}\n    "
    },
    {
      "query": "Tabs Disabled With Active",
      "code": "import { Tabs, Tab, EmptyState } from '@innovaccer/design-system';\n    () => {\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  const onTabChangeHandler = (tabIndex) => {\n    setActiveIndex(tabIndex);\n  };\n\n  const isDisabled = true;\n  return (\n    <Tabs activeIndex={activeIndex} onTabChange={onTabChangeHandler} className=\"mb-6\">\n      <Tab label=\"All\" icon=\"call_received\" count={10} disabled={isDisabled}>\n        {isDisabled ? (\n          <div className=\"h-100 pb-5 bg-secondary-lightest\">\n            <EmptyState\n              title=\"There's a problem loading this page.\"\n              description=\"Tab is disabled and you are not authorized to see the content of this tab\"\n              size=\"large\"\n            ></EmptyState>\n          </div>\n        ) : (\n          <div>All</div>\n        )}\n      </Tab>\n      <Tab label=\"Tab(Recommended)\">\n        <div>Tab(Recommended)</div>\n      </Tab>\n      <Tab label=\"Extras\" disabled={true}>\n        <div>Extras</div>\n      </Tab>\n    </Tabs>\n  );\n}\n    "
    },
    {
      "query": "Tabs Dismissible Tab",
      "code": "import { Tabs, Tab } from '@innovaccer/design-system';\n    () => {\n  const [activeIndex, setActiveIndex] = React.useState(0);\n  const [hideTab, setHideTab] = React.useState(false);\n\n  const onTabChangeHandler = (tabIndex) => {\n    setActiveIndex(tabIndex);\n  };\n\n  const onDismissHandler = (tabInfo) => {\n    setHideTab(true);\n  };\n\n  return(\n    <Tabs\n      activeIndex={activeIndex}\n      onTabChange={onTabChangeHandler}\n      className=\"mb-6\"\n    >\n      {!hideTab && (\n        <Tab\n          label=\"Tab(Recommended)\"\n          count={10}\n          isDismissible={true}\n          onDismiss={(tabInfo) => onDismissHandler(tabInfo)}\n        >\n          <div>Tab(Recommended)</div>\n        </Tab>\n      )}\n      <Tab label=\"All\" icon=\"call_received\" isDismissible={true} onDismiss={(tabInfo)=>{console.log(tabInfo)}}>\n        <div>All</div>\n      </Tab>\n      <Tab label=\"Extras\" disabled={true} isDismissible={true} onDismiss={(tabInfo)=>{console.log(tabInfo)}}>\n        <div>Extras</div>\n      </Tab>\n    </Tabs>\n  );\n}\n    "
    },
    {
      "query": "Tabs Inline Content",
      "code": "import { Tabs, Tab, Input, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Increasing',\n      value: 'Increasing',\n    },\n    {\n      label: 'Decreasing',\n      value: 'Decreasing'\n    },\n  ];\n\n  return(\n    <Tabs\n      onTabChange={console.log}\n      className=\"mb-6\"\n    >\n      <Tab label=\"All\" count={12}>\n        <div>All</div>\n      </Tab>\n      <Tab label=\"Active\" count={3}>\n        <div>Active</div>\n      </Tab>\n      <Tab label=\"Inactive\" count={9}>\n        <div>Inactive</div>\n      </Tab>\n      <div className=\"d-flex justify-content-end flex-grow-1\">\n        <div style={{ width: 'var(--spacing-9)' }} className=\"ml-8\">\n          <Input placeholder=\"Search by name\" icon=\"search\" />\n        </div>\n        <div style={{ width: 'var(--spacing-8)' }} className=\"ml-4\">\n          <Dropdown options={options} placeholder=\"Sort by\" />\n        </div>\n      </div>\n    </Tabs>\n  );\n}\n    "
    },
    {
      "query": "Tabs Tabs With Count",
      "code": "import { Heading, Button, Tabs, Tab, Input, Dropdown } from '@innovaccer/design-system';\n    () => {\n  const options = [\n    {\n      label: 'Increasing',\n      value: 'Increasing',\n    },\n    {\n      label: 'Decreasing',\n      value: 'Decreasing'\n    },\n  ];\n\n  return(\n    <div>\n      <div className=\"d-flex justify-content-between\">\n        <Heading size=\"m\">Strategy</Heading>\n        <Button appearance=\"primary\">New Strategy</Button>\n      </div>\n      <div className=\"d-flex align-items-center mt-3\" >\n        <Tabs\n          onTabChange={console.log}\n          className=\"mb-6\"\n        >\n          <Tab label=\"All\" count={12}>\n            <div>All</div>\n          </Tab>\n          <Tab label=\"Active\" count={3}>\n            <div>Active</div>\n          </Tab>\n          <Tab label=\"Inactive\" count={9}>\n            <div>Inactive</div>\n          </Tab>\n          <div className=\"d-flex align-items-center\">\n            <div style={{ width: 'var(--spacing-9)' }} className=\"ml-8\">\n              <Input placeholder=\"Search by name\" icon=\"search\" />\n            </div>\n            <div style={{ width: 'var(--spacing-8)' }} className=\"ml-4\">\n              <Dropdown options={options} placeholder=\"Sort by\" />\n            </div>\n          </div>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Tabs Tabs With Icon",
      "code": "import { Heading, Link, Tabs, Tab } from '@innovaccer/design-system';\n    () => {\n  return(\n    <div>\n      <div className=\"d-flex align-items-center\">\n        <Heading size=\"s\">Diabetes: Hemoglobin A1c Poor Control</Heading>\n        <Link className=\"ml-4\">Measure definition</Link>\n      </div>\n      <Tabs\n        onTabChange={console.log}\n        className=\"mb-6\"\n      >\n        <Tab label=\"2020\" icon=\"warning\">\n          <div>2020</div>\n        </Tab>\n        <Tab label=\"2019\" icon=\"check_circle\">\n          <div>2019</div>\n        </Tab>\n        <Tab label=\"2018\" icon=\"warning\">\n          <div>2018</div>\n        </Tab>\n        <Tab label=\"2017\" icon=\"check_circle\">\n          <div>2017</div>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n    "
    }
  ],
  "text": [
    {
      "query": "Text",
      "code": "import { Text } from '@innovaccer/design-system';\n    () => {\n  const weight = 'medium';\n  const size = 'regular';\n  const small = false;\n  const appearance = 'white';\n  const options = {\n    size,\n    weight,\n    appearance,\n    small,\n  };\n\n  return (\n    <div className={appearance === 'white' ? 'bg-dark' : 'bg-transparent'}>\n      <Text {...options}>Text component have different varients, look for options in knobs tab.</Text>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Text",
      "code": "import { Text } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['default', 'white', 'destructive', 'subtle', 'disabled', 'success', 'link'];\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        const backgroundClass = appear === 'white' ? 'bg-dark mr-6' : 'bg-transparent mr-6';\n\n        return (\n          <div key={ind} className={backgroundClass}>\n            <Text appearance={appear}>{appear.charAt(0).toUpperCase() + appear.slice(1)}</Text>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Text",
      "code": "import { Row, Column, Text } from '@innovaccer/design-system';\n    () => {\n  const colorList = [\n    [\n      'primary',\n      'primary-dark',\n      'primary-darker',\n      'primary-light',\n      'primary-lighter',\n      'primary-lightest',\n      'primary-shadow',\n    ],\n    [\n      'success',\n      'success-dark',\n      'success-darker',\n      'success-light',\n      'success-lighter',\n      'success-lightest',\n      'success-shadow',\n    ],\n    ['alert', 'alert-dark', 'alert-darker', 'alert-light', 'alert-lighter', 'alert-lightest', 'alert-shadow'],\n    [\n      'warning',\n      'warning-dark',\n      'warning-darker',\n      'warning-light',\n      'warning-lighter',\n      'warning-lightest',\n      'warning-shadow',\n    ],\n    [\n      'accent1',\n      'accent1-dark',\n      'accent1-darker',\n      'accent1-light',\n      'accent1-lighter',\n      'accent1-lightest',\n      'accent1-shadow',\n    ],\n    [\n      'accent2',\n      'accent2-dark',\n      'accent2-darker',\n      'accent2-light',\n      'accent2-lighter',\n      'accent2-lightest',\n      'accent2-shadow',\n    ],\n    [\n      'accent3',\n      'accent3-dark',\n      'accent3-darker',\n      'accent3-light',\n      'accent3-lighter',\n      'accent3-lightest',\n      'accent3-shadow',\n    ],\n    [\n      'accent4',\n      'accent4-dark',\n      'accent4-darker',\n      'accent4-light',\n      'accent4-lighter',\n      'accent4-lightest',\n      'accent4-shadow',\n    ],\n    ['secondary', 'secondary-dark', 'secondary-light', 'secondary-lighter', 'secondary-lightest', 'secondary-shadow'],\n\n    ['white', 'inverse', 'inverse-light', 'inverse-lighter', 'inverse-lightest', 'inverse-shadow'],\n  ];\n\n  return (\n    <Row>\n      {colorList.map((colors, key) => {\n        return (\n          <Row key={key} className=\"py-4\">\n            {colors.map((color, ind) => {\n              return (\n                <Column key={ind}>\n                  <Text size=\"large\" color={color} className={color === 'white' ? 'bg-dark' : ''}>\n                    {color}\n                  </Text>\n                </Column>\n              );\n            })}\n          </Row>\n        );\n      })}\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Text",
      "code": "import { Text } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-6\">\n        <Text size=\"small\">Small</Text>\n      </div>\n      <div className=\"mr-6\">\n        <Text size=\"regular\">Regular</Text>\n      </div>\n      <div>\n        <Text size=\"large\">Large</Text>\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Text",
      "code": "import { Text } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div className=\"d-flex\">\n      <div className=\"mr-6\">\n        <Text weight=\"strong\">Strong</Text>\n      </div>\n      <div>\n        <Text weight=\"medium\">Medium</Text>\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "textarea": [
    {
      "query": "Textarea All",
      "code": "import { Textarea } from '@innovaccer/design-system';\n    () => {\n  const value = '';\n\n  const placeholder = 'Placeholder';\n\n  const disabled = false;\n\n  const error = false;\n\n  const resize = true;\n\n  const rows = 3;\n\n  return (\n    <div className=\"w-25\">\n      <Textarea\n        name=\"Textarea\"\n        value={value}\n        disabled={disabled}\n        onChange={action('on-change')}\n        onClick={action('on-click')}\n        placeholder={placeholder}\n        error={error}\n        resize={resize}\n        rows={rows}\n        aria-labelledby=\"Textarea\"\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Textarea",
      "code": "import { Label, Textarea } from '@innovaccer/design-system';\n    () => (\n  <>\n    <Label withInput={true} htmlFor=\"comments\">\n      Comments\n    </Label>\n    <Textarea\n      name=\"comments\"\n      id=\"comments\"\n      aria-labelledby=\"Comments\"\n      className=\"w-50\"\n      placeholder=\"Enter your comments here\"\n    />\n  </>\n)\n    "
    },
    {
      "query": "Textarea",
      "code": "import { Label, Textarea, Caption } from '@innovaccer/design-system';\n    () => {\n  const [value, setValue] = React.useState('Patient moved out of country last week.');\n\n  return (\n    <>\n      <Label withInput={true} htmlFor=\"notes\">\n        Confirmation Notes\n      </Label>\n      <Textarea\n        name=\"notes\"\n        className=\"w-50\"\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        placeholder=\"Enter your comments here\"\n        aria-labelledby=\"Confirmation Notes\"\n        id=\"notes\"\n      />\n      <Caption withInput={true}>This note will be automatically pinned for export.</Caption>\n    </>\n  );\n}\n    "
    },
    {
      "query": "Textarea",
      "code": "import { Row, Column, Label, Textarea } from '@innovaccer/design-system';\n    () => {\n  const BooleanValue = [true, false];\n\n  return (\n    <Row>\n      {BooleanValue.map((value, ind) => (\n        <Column key={ind} className=\"p-4\">\n          <Label withInput={true}>{value ? 'Disabled' : 'Enabled'}</Label>\n          <Textarea\n            name=\"Textarea\"\n            onChange={action('on-change')}\n            placeholder=\"Placeholder\"\n            disabled={value}\n            rows={3}\n            aria-labelledby=\"Textarea\"\n          />\n        </Column>\n      ))}\n    </Row>\n  );\n}\n    "
    }
  ],
  "timepicker": [
    {
      "query": "TimePicker",
      "code": "import { Row, Label, TimePicker } from '@innovaccer/design-system';\n    () => {\n\n  return (\n    <Row>\n      <div className=\"w-25\">\n        <Label>12 Hour Format</Label>\n        <TimePicker withSearch={true} disabledSlotList={['12:45 AM', '01:00 AM']} id=\"12-hour\" />\n      </div>\n\n      <div className=\"w-25 ml-7\">\n        <Label>24 Hour Format</Label>\n        <TimePicker timeFormat=\"24-Hour\" withSearch={true} disabledSlotList={['00:45', '01:00']} id=\"24-hour\" />\n      </div>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "TimePicker",
      "code": "import { Label, TimePicker } from '@innovaccer/design-system';\n    () => {\n\n  const [startTime, setStartTime] = React.useState('00:00');\n\n  const onFromChangeHandler = (props) => {\n    setStartTime(props);\n  };\n\n  return (\n    <div className=\"d-flex\">\n      <div className=\"w-25 mr-5\">\n        <Label withInput={true}>From</Label>\n        <TimePicker withSearch={true} startTime=\"00:15 AM\" endTime=\"11:45 PM\" onChange={onFromChangeHandler} id=\"From\" />\n      </div>\n\n      <div className=\"w-25\">\n        <Label withInput={true}>To</Label>\n        <TimePicker withSearch={true} startTime={startTime} endTime=\"11:45 PM\" showDuration={true} id=\"To\" />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "TimePicker",
      "code": "import { Row, Label, TimePicker } from '@innovaccer/design-system';\n    () => {\n\n  return (\n    <Row>\n      <div className=\"w-25\">\n        <Label>12 Hour Format</Label>\n        <TimePicker startTime=\"05:00\" withSearch={true} showDuration={true} id=\"12-hour\" />\n      </div>\n\n      <div className=\"w-25 ml-7\">\n        <Label>24 Hour Format</Label>\n        <TimePicker startTime=\"05:00\" timeFormat=\"24-Hour\" withSearch={true} showDuration={true} id=\"24-hour\" />\n      </div>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "TimePicker",
      "code": "import { Row, Label, TimePicker } from '@innovaccer/design-system';\n    () => {\n\n  return (\n    <Row>\n      <div className=\"w-25\">\n        <Label>12 Hour Format (1 hour Interval)</Label>\n        <TimePicker withSearch={true} interval={60} id=\"12-hour\" />\n      </div>\n\n      <div className=\"w-25 ml-7\">\n        <Label>24 Hour Format (1 hour Interval)</Label>\n        <TimePicker timeFormat=\"24-Hour\" withSearch={true} interval={60} id=\"24-hour\" />\n      </div>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "TimePicker",
      "code": "import { Row, Label, DatePicker, TimePicker } from '@innovaccer/design-system';\n    () => {\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleDateChange = (date) => {\n    if(date) {\n      setOpen(false);\n      setTimeout(() => {\n        setOpen(true);\n      }, 0);\n    }\n  };\n\n  return (\n    <Row>\n      <div className=\"w-25\">\n        <Label>Date</Label>\n        <DatePicker\n          firstDayOfWeek=\"saturday\"\n          onDateChange={handleDateChange}\n          outputFormat=\"yyyy/mm/dd\"\n          withInput={true}\n          inputOptions={{\n            required: true,\n          }}\n        />\n      </div>\n      <div className=\"w-25 ml-7\">\n        <Label>Time</Label>\n        <TimePicker withSearch={true} open={open} />\n      </div>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "TimePicker",
      "code": "import { TimePicker } from '@innovaccer/design-system';\n    () => {\n  const onTimeChange = (val) => {\n    console.log(val);\n  };\n\n  return (\n    <div className=\"w-25\">\n      <TimePicker\n        inputFormat={'hh:mm AM'}\n        outputFormat={'hh:mm AM'}\n        onTimeChange={onTimeChange}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "TimePicker",
      "code": "import { Row, Label, TimePicker } from '@innovaccer/design-system';\n    () => {\n\n  const onChangeHandler = (props) => {\n    console.log(props);\n  };\n\n  return (\n    <Row>\n      <div className=\"w-25\">\n        <Label>12 Hour Format</Label>\n        <TimePicker \n          withSearch={true} \n          startTime=\"00:00 AM\" \n          endTime=\"11:59 PM\" \n          onChange={onChangeHandler} \n          noResultMessage=\"Invalid Time\"\n          id=\"12-hour\"\n        />\n      </div>\n      <div className=\"w-25 ml-7\">\n        <Label>24 Hour Format</Label>\n        <TimePicker\n          withSearch={true}\n          startTime=\"00:00 AM\"\n          endTime=\"11:59 PM\"\n          timeFormat=\"24-Hour\"\n          onChange={onChangeHandler}\n          noResultMessage=\"Invalid Time\"\n          id=\"24-hour\"\n        />\n      </div>\n  </Row>\n  );\n}\n    "
    }
  ],
  "toast": [
    {
      "query": "Toast All",
      "code": "import { Toast } from '@innovaccer/design-system';\n    () => {\n  const title = 'Sample toast';\n\n  const message = '';\n\n  const actionLabel1 = '';\n  const actionLabel2 = '';\n\n  const props = {\n    actions: [],\n  };\n\n  if (actionLabel1) {\n    props.actions.push({\n      label: actionLabel1,\n      onClick: () => action('action button click: 1')(),\n    });\n  }\n  if (actionLabel2) {\n    props.actions.push({\n      label: actionLabel2,\n      onClick: () => action('action button click: 2')(),\n    });\n  }\n\n  return <Toast title={title} message={message} onClose={action('on-close clicked')} {...props} />;\n}\n    "
    },
    {
      "query": "Toast Alert Toast",
      "code": "import { Toast } from '@innovaccer/design-system';\n    () => (\n  <Toast\n    appearance=\"alert\"\n    title=\"Campaign failed to run\"\n    message=\"Try to run again. If it continues to fail, please raise a ticket.\"\n  />\n)\n    "
    },
    {
      "query": "Toast Info Toast",
      "code": "import { Toast } from '@innovaccer/design-system';\n    () => (\n  <Toast\n    appearance=\"info\"\n    title=\"Sophie sent you a task\"\n    message=\"Schedule Appointment for 'Joy Lawson'. It's due on Aug 31.\"\n  />\n)\n    "
    },
    {
      "query": "Toast Success Toast",
      "code": "import { Toast } from '@innovaccer/design-system';\n    () => (\n  <Toast\n    appearance=\"success\"\n    title=\"Outreach successfully sent\"\n    message=\"2,340 outreach messages have been successfully sent.\"\n  />\n)\n    "
    },
    {
      "query": "Toast Toast With Actions",
      "code": "import { Toast } from '@innovaccer/design-system';\n    () => (\n  <Toast\n    appearance=\"success\"\n    title=\"Review requested successfully\"\n    message=\"Automatically redirecting to the next Prior Auth of Joy Lawson in 10s\"\n    actions={[\n      {\n        label: 'Need Prior Auth',\n        onClick: () => {},\n      },\n      {\n        label: 'Go To Worklist',\n        onClick: () => {},\n      },\n    ]}\n  />\n)\n    "
    },
    {
      "query": "Toast Toast With Description",
      "code": "import { Toast } from '@innovaccer/design-system';\n    () => (\n  <Toast appearance=\"success\" title=\"Message sent successfully\" message=\"Description goes here\" />\n)\n    "
    },
    {
      "query": "Toast",
      "code": "import { Toast } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['info', 'success', 'alert', 'warning'];\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appear, ind) => {\n        return (\n          <div key={ind} className=\"mr-5 mb-8\">\n            <Toast appearance={appear} title={appear.charAt(0).toUpperCase() + appear.slice(1)} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Toast",
      "code": "import { Toast } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['info', 'success', 'alert', 'warning'];\n\n  const message = 'Outreach was sent';\n\n  const actionLabel1 = 'Try Again';\n  const actionLabel2 = '';\n\n  const props = {\n    actions: [],\n  };\n\n  if (actionLabel1) {\n    props.actions.push({\n      label: actionLabel1,\n      onClick: () => action('action button click: 1')(),\n    });\n  }\n  if (actionLabel2) {\n    props.actions.push({\n      label: actionLabel2,\n      onClick: () => action('action button click: 2')(),\n    });\n  }\n\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appearance, ind) => {\n        return (\n          <div key={ind} className=\"mr-5 mb-8\">\n            <Toast\n              appearance={appearance}\n              title={appearance.charAt(0).toUpperCase() + appearance.slice(1)}\n              message={message}\n              onClose={action('on-close clicked')}\n              {...props}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Toast",
      "code": "import { Toast } from '@innovaccer/design-system';\n    () => {\n  const appearances = ['info', 'success', 'alert', 'warning'];\n\n  const message = 'Outreach was sent';\n  return (\n    <div className=\"d-flex\">\n      {appearances.map((appearance, ind) => {\n        return (\n          <div key={ind} className=\"mr-5 mb-8\">\n            <Toast\n              appearance={appearance}\n              title={appearance.charAt(0).toUpperCase() + appearance.slice(1)}\n              message={message}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Toast Warning Toast",
      "code": "import { Toast } from '@innovaccer/design-system';\n    () => (\n  <Toast\n    appearance=\"warning\"\n    title=\"Chat response is delayed\"\n    message=\"'Memorial Clinic' has been running for more that 2 hours.\"\n  />\n)\n    "
    }
  ],
  "tooltip": [
    {
      "query": "Tooltip All",
      "code": "import { Tooltip, Button } from '@innovaccer/design-system';\n    () => {\n  const position = 'bottom';\n  const appendToBody = true;\n  const hoverable = false;\n  const tooltip = 'An awesome tooltip';\n\n  const options = {\n    tooltip,\n    hoverable,\n    position,\n    appendToBody,\n  };\n\n  return (\n    <div className=\"mt-8 ml-12\">\n      <Tooltip {...options}>\n        <Button>Hover over me</Button>\n      </Tooltip>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Tooltip",
      "code": "import { Tooltip, Button } from '@innovaccer/design-system';\n    () => {\n  const positions = ['top', 'top-start', 'bottom', 'top-end', 'bottom-start', 'bottom-end', 'right', 'left'];\n  const appendToBody = false;\n  const tooltip = 'An awesome tooltip';\n\n  const options = {\n    tooltip,\n    appendToBody,\n  };\n\n  return (\n    <div className=\"pb-6 Row\">\n      {positions.map((pos, ind) => {\n        return (\n          <div key={ind} className=\"mr-13 mt-8\">\n            <Tooltip position={pos} {...options}>\n              <Button>{pos}</Button>\n            </Tooltip>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    }
  ],
  "verificationcodeinput": [
    {
      "query": "Input",
      "code": "import { Label, VerificationCodeInput } from '@innovaccer/design-system';\n    () => {\n  const inputType = 'number';\n\n  const fields = undefined;\n\n  const value = '6543';\n\n  const placeholder = '-';\n\n  const disabled = false;\n\n  const autoFocus = true;\n\n  const readOnly = false;\n\n  const error = false;\n\n  const pattern = '';\n\n  return (\n    <>\n      <Label withInput={true}>Verification code</Label>\n      <VerificationCodeInput\n        fields={fields}\n        type={inputType}\n        value={value}\n        disabled={disabled}\n        readOnly={readOnly}\n        onComplete={action('on-complete')}\n        onFocus={action('on-focus')}\n        onBlur={action('on-blur')}\n        placeholder={placeholder}\n        error={error}\n        pattern={pattern}\n        // TODO(a11y)\n        \n        autoFocus={autoFocus}\n      />\n    </>\n  );\n}\n    "
    },
    {
      "query": "VerificationCodeInput",
      "code": "import { Label, VerificationCodeInput } from '@innovaccer/design-system';\n    () => {\n  return (\n    <>\n      <Label withInput={true}>Verification code</Label>\n      <VerificationCodeInput disabled={true} value=\"1234\" />\n    </>\n  );\n}\n    "
    },
    {
      "query": "VerificationCodeInput",
      "code": "import { Label, VerificationCodeInput } from '@innovaccer/design-system';\n    () => {\n  return (\n    <>\n      <Label withInput={true}>Verification code</Label>\n      <VerificationCodeInput error={true} />\n    </>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Label, VerificationCodeInput } from '@innovaccer/design-system';\n    () => {\n  return (\n    <>\n      <Label withInput={true}>Verification code</Label>\n      <VerificationCodeInput />\n    </>\n  );\n}\n    "
    },
    {
      "query": "Input",
      "code": "import { Label, VerificationCodeInput, Button } from '@innovaccer/design-system';\n    () => {\n    const inputType = 'number';\n  \n    const fields = undefined;\n  \n    const placeholder = '-';\n  \n    const disabled = false;\n  \n    const autoFocus = true;\n  \n    const readOnly = false;\n  \n    const error = false;\n  \n    const pattern = '';\n    const [counter, setCounter] = React.useState(0);\n    const [value, setValue] = React.useState('1234');\n    const handleClick = () => {\n      setCounter(counter + 1);\n      setValue('----');\n    };\n  \n    return (\n      <>\n        <Label withInput={true}>Verification code</Label>\n        <VerificationCodeInput\n          key={counter}\n          fields={fields}\n          type={inputType}\n          value={value}\n          disabled={disabled}\n          readOnly={readOnly}\n          onComplete={console.log('on-complete')}\n          onFocus={console.log('on-focus')}\n          onBlur={console.log('on-blur')}\n          placeholder={placeholder}\n          error={error}\n          pattern={pattern}\n          // TODO(a11y)\n          //  eslint-disable-next-line\n          autoFocus={autoFocus}\n        />\n        <Button className=\"mt-5\" onClick={handleClick}>\n          Reset\n        </Button>\n      </>\n    );\n  }\n    "
    },
    {
      "query": "Input",
      "code": "import { Label, VerificationCodeInput } from '@innovaccer/design-system';\n    () => {\n  return (\n    <>\n      <Label withInput={true}>Verification code</Label>\n      <VerificationCodeInput fields={6} />\n    </>\n  );\n}\n    "
    }
  ],
  "verticalnav": [
    {
      "query": "VerticalNav All",
      "code": "import { VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n      count: 10,\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      count: 2,\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      icon: 'airline_seat_flat_angled',\n      count: 5,\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle'\n    },\n    {\n      name: 'manual_entry',\n      label: 'Manual Entry',\n      icon: 'border_color'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    }\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"bg-secondary-lightest vh-100\">\n      <VerticalNav\n        menus={data}\n        expanded={true}\n        active={active}\n        onClick={onClickHandler}\n        hoverable={false}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav Child Items With Icons",
      "code": "import { Collapsible, VerticalNav } from '@innovaccer/design-system';\n    () => {\n\n  const data = [\n    {\n      name: 'clinical_data',\n      label: 'Clinical Data',\n      icon: 'assignment_ind'\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'people'\n        },\n        {\n          name: 'care_management.care_protocol',\n          label: 'Care Protocol',\n          icon: 'fact_check'\n        },\n        {\n          name: 'care_management.assessments',\n          label: 'Assessments',\n          icon: 'assessment'\n        },\n        {\n          name: 'care_management.tasks',\n          label: 'Tasks',\n          icon: 'alarm'\n        },\n        {\n          name: 'care_management.goals',\n          label: 'Goals',\n          icon: 'golf_course'\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'accessibility_new'\n        },\n        {\n          name: 'care_management.medical_adherence',\n          label: 'Medical Adherence',\n          icon: 'local_pharmacy'\n        },\n        {\n          name: 'care_management.community_resources',\n          label: 'Community Resources',\n          icon: 'businesses'\n        }\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      icon: 'airline_seat_flat_angled'\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite'\n    },\n    {\n      name: 'preventive_health',\n      label: 'Preventive Health',\n      icon: 'beenhere'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'receipt'\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'account_circle'\n    },\n    {\n      name: 'manual_entry',\n      label: 'Manual Entry',\n      icon: 'edit'\n    },\n    {\n      name: 'patient_notes',\n      label: 'Patient Notes',\n      icon: 'note_add'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    },\n  ];\n\n  const [expanded, setExpanded] = React.useState(false);\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n\n  return (\n    <div className=\"bg-secondary-lightest vh-100\">\n      <Collapsible expanded={expanded} onToggle={setExpanded}>\n        <VerticalNav\n          menus={data}\n          active={active}\n          expanded={expanded}\n          onClick={setActive}\n        />\n      </Collapsible>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav Custom Items Renderer",
      "code": "import { Icon, Tooltip, Text, VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'clinical_data',\n      label: 'Clinical Data',\n      icon: 'assignment_ind'\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'people'\n        },\n        {\n          name: 'care_management.care_protocol',\n          label: 'Care Protocol',\n          icon: 'fact_check'\n        },\n        {\n          name: 'care_management.assessments',\n          label: 'Assessments',\n          icon: 'assessment'\n        },\n        {\n          name: 'care_management.tasks',\n          label: 'Tasks',\n          icon: 'alarm'\n        },\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      icon: 'airline_seat_flat_angled'\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite'\n    },\n    {\n      name: 'preventive_health',\n      label: 'Preventive Health',\n      icon: 'beenhere'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'receipt'\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'account_circle'\n    },\n    {\n      name: 'manual_entry',\n      label: 'Manual Entry',\n      icon: 'edit'\n    },\n    {\n      name: 'patient_notes',\n      label: 'Patient Notes',\n      icon: 'note_add'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n\n  const customItemRenderer = (props) => {\n    const {menu, onClick, expanded, isChildren} = props;\n    return ( \n      <div \n        onClick={() => onClick(menu)}\n        className={`p-5 d-flex align-items-center cursor-pointer ${isChildren ? 'ml-7' : ''}`}\n      >\n        {menu.icon && \n            <Icon\n              data-test=\"DesignSystem-VerticalNav--Icon\"\n              className={expanded ? 'mr-4' : ''}\n              name={menu.icon}\n            />\n        }\n        <Tooltip tooltip={menu.label} position=\"right\">\n          <Text weight=\"medium\">\n            {menu.label}\n          </Text>\n        </Tooltip>\n      </div>\n    );\n  };\n  \n  return (\n    <div className=\"bg-secondary-lightest vh-100\">\n      <VerticalNav\n        menus={data}\n        expanded={true}\n        active={active}\n        onClick={setActive}\n        customItemRenderer={customItemRenderer}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav Custom Options Renderer",
      "code": "import { Icon, VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'clinical_data',\n      label: 'Clinical Data',\n      icon: 'assignment_ind'\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management',\n      icon: 'forum',\n      count: 40,\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'people',\n          count: 10\n        },\n        {\n          name: 'care_management.care_protocol',\n          label: 'Care Protocol',\n          icon: 'fact_check',\n          count: 10\n        },\n        {\n          name: 'care_management.assessments',\n          label: 'Assessments',\n          icon: 'assessment',\n          count: 10\n        },\n        {\n          name: 'care_management.tasks',\n          label: 'Tasks',\n          icon: 'alarm',\n          count: 10\n        },\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      icon: 'airline_seat_flat_angled',\n      count: 100\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite'\n    },\n    {\n      name: 'preventive_health',\n      label: 'Preventive Health',\n      icon: 'beenhere'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'receipt'\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'account_circle'\n    },\n    {\n      name: 'manual_entry',\n      label: 'Manual Entry',\n      icon: 'edit'\n    },\n    {\n      name: 'patient_notes',\n      label: 'Patient Notes',\n      icon: 'note_add'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n\n  const customItemRenderer = (props) => {\n    const {menu, onClick, hasSubmenu, expanded, isChildren, MenuIcon, MenuLabel, MenuPills} = props;\n    return ( \n      <div \n        onClick={() => onClick(menu)}\n        className={`p-5 d-flex align-items-center cursor-pointer ${isChildren ? 'ml-7' : ''}`}\n      >\n        {menu.icon && (\n          <Icon data-test=\"DesignSystem-VerticalNav--Icon\" className={expanded ? 'mr-4' : ''} name={menu.icon} />\n        )}\n        {MenuLabel()}\n        <div className=\"ml-5 d-flex\">{MenuPills()}</div>\n        {hasSubmenu && MenuIcon()}\n      </div>\n    );\n  };\n  \n  return (\n    <div className=\"bg-secondary-lightest vh-100\">\n      <VerticalNav\n        menus={data}\n        expanded={true}\n        active={active}\n        onClick={setActive}\n        customItemRenderer={customItemRenderer}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav Custom Trigger",
      "code": "import { Icon, Heading, Collapsible, VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const [expanded, setExpanded] = React.useState(false);\n  const [active, setActive] = React.useState({\n    name: 'TODOs.Due',\n  });\n\n  const data = [\n    {\n      name: 'TODOs',\n      label: 'TODOs',\n      icon: 'assignment_ind',\n      count: 31,\n      subMenu: [\n        {\n          name: 'TODOs.Due',\n          label: 'Due',\n          count: 31\n        },\n        {\n          name: 'TODOs.Completed',\n          label: 'Completed',\n          count: 0\n        },\n      ],\n    },\n    {\n      name: 'Received',\n      label: 'Received',\n      count: 0\n    },\n    {\n      name: 'Sent',\n      label: 'Sent',\n      count: 5\n    },\n  ];\n\n  return (\n    <div>\n      <div className='d-flex align-items-center mb-3'>\n        <Icon name=\"menu\" className=\"cursor-pointer\" onClick={() => setExpanded(!expanded) }></Icon>\n        <Heading size='s' className=\"ml-4\">My Worklist</Heading>\n      </div>\n      <Collapsible withTrigger={false} expanded={expanded} height=\"100vh\">\n        <VerticalNav menus={data} active={active} expanded={expanded} onClick={setActive} />\n      </Collapsible>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav Custom Vertical Navigation",
      "code": "import { Collapsible, DatePicker, VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'to_dos',\n      label: 'To-dos',\n      icon: 'check_circle_outline',\n      subMenu: [\n        {\n          name: 'to_dos.due',\n          label: 'Due',\n          count: 10\n        },\n        {\n          name: 'to_dos.completed',\n          label: 'Completed',\n          count: 7\n        },\n      ]\n    },\n    {\n      name: 'received',\n      label: 'Received',\n      icon: 'call_received'\n    },\n    {\n      name: 'sent',\n      label: 'Sent',\n      icon: 'call_made'\n    },\n  ];\n\n  const [expanded, setExpanded] = React.useState(true);\n  const [active, setActive] = React.useState({\n    name: 'data_exchange.reports'\n  });\n\n  return (\n    <div className=\"bg-secondary-lightest vh-100\">\n      <Collapsible expanded={expanded} onToggle={setExpanded} hoverable={false}>\n        <>\n        {expanded && (\n          <div className=\"mt-5 d-flex justify-content-center border-top\">\n          <DatePicker date={new Date()} size=\"small\" />\n          </div>\n          )}\n          <VerticalNav\n            menus={data}\n            expanded={expanded}\n            active={active}\n            onClick={setActive}\n          />\n        </>\n      </Collapsible>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav Flat Edged Vertical Navigation",
      "code": "import { Collapsible, VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'home',\n      label: 'Home',\n      icon: 'home',\n      count: 10\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle',\n      count: 25,\n      subMenu: [\n        {\n          name: 'profile.personal',\n          label: 'Personal',\n          count: 5\n        },\n        {\n          name: 'profile.are_team',\n          label: 'Care Team',\n          count: 10\n        },\n        {\n          name: 'profile.goals',\n          label: 'Goals',\n          count: 5\n        },\n        {\n          name: 'profile.care_plans',\n          label: 'Care Plans',\n          count: 5\n        }\n      ]\n    },\n    {\n      name: 'medical_records',\n      label: 'Medical Records',\n      icon: 'local_hospital',\n      subMenu: [\n        {\n          name: 'medical_records.allergies',\n          label: 'Allergies'\n        },\n        {\n          name: 'medical_records.conditions',\n          label: 'Conditions'\n        },\n        {\n          name: 'medical_records.immunizations',\n          label: 'Immunizations'\n        },\n        {\n          name: 'medical_records.lab_results',\n          label: 'Lab Results'\n        },\n        {\n          name: 'medical_records.medications',\n          label: 'Medications'\n        },\n        {\n          name: 'medical_records.procedures',\n          label: 'Procedures'\n        },\n        {\n          name: 'medical_records.vitals',\n          label: 'Vitals'\n        },\n        {\n          name: 'medical_records.smoking_history',\n          label: 'medical_records.Smoking History'\n        },\n        {\n          name: 'devices',\n          label: 'Devices'\n        }\n      ]\n    },\n    {\n      name: 'formulary',\n      label: 'Formulary',\n      icon: 'list',\n    },\n    {\n      name: 'encounters',\n      label: 'Encounters',\n      icon: 'directions_walk',\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    },\n    {\n      name: 'find_care',\n      label: 'Find Care',\n      icon: 'search',\n      subMenu: [\n        {\n          name: 'find_care.providers',\n          label: 'Providers'\n        },\n        {\n          name: 'find_care.pharmacies',\n          label: 'Pharmacies'\n        },\n      ]\n    },\n    {\n      name: 'connected_applications',\n      label: 'Connected Applications',\n      icon: 'extension'\n    },\n  ];\n\n  const [expanded, setExpanded] = React.useState(true);\n  const [active, setActive] = React.useState({\n    name: 'medical_records.allergies'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"bg-secondary-lightest vh-100\">\n      <Collapsible expanded={expanded} onToggle={setExpanded} hoverable={false}>\n        <VerticalNav\n          menus={data}\n          active={active}\n          expanded={expanded}\n          onClick={onClickHandler}\n        />\n      </Collapsible>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav Grouping",
      "code": "import { VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'customer_information',\n      label: 'Customer Information',\n      group: 'General'\n    },\n    {\n      name: 'organizational_structure',\n      label: 'Organizational Structure',\n      group: 'General'\n    },\n    {\n      name: 'contacts',\n      label: 'Contacts',\n      group: 'General',\n    },\n    {\n      name: 'empi',\n      label: 'EMPI',\n      group: 'Platform',\n    },\n    {\n      name: 'data_exchange',\n      label: 'Data Exchange',\n      group: 'Platform',\n      subMenu: [\n        {\n          name: 'data_exchange.reports',\n          label: 'Reports'\n        },\n        {\n          name: 'data_exchange.destinations',\n          label: 'Destinations'\n        },\n        {\n          name: 'data_exchange.validation',\n          label: 'Validation'\n        },\n      ]\n    },\n    {\n      name: 'import_export_settings',\n      label: 'Import/Export Settings',\n      group: 'Platform',\n    },\n    {\n      name: 'pipelines',\n      label: 'Pipelines',\n      group: 'Apps',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'data_exchange.reports'\n  });\n\n  return (\n    <div className=\"bg-secondary-lightest vh-100\">\n      <VerticalNav\n        menus={data}\n        expanded={true}\n        active={active}\n        onClick={setActive}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav Label Overflow Behaviour",
      "code": "import { VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'clinical_data',\n      label: 'Clinical Data',\n      icon: 'assignment_ind'\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management Timeline Protocol',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'people'\n        },\n        {\n          name: 'care_management.care_protocol',\n          label: 'Care Protocol Management Guidelines',\n          icon: 'fact_check'\n        },\n        {\n          name: 'care_management.assessments',\n          label: 'Assessments',\n          icon: 'assessment'\n        },\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      icon: 'airline_seat_flat_angled'\n    },\n    {\n      name: 'preventive_health',\n      label: 'Preventive Health Precautions Template',\n      icon: 'beenhere'\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n  \n  return (\n    <div className=\"bg-secondary-lightest vh-100\">\n      <VerticalNav\n        menus={data}\n        expanded={true}\n        active={active}\n        onClick={setActive}\n        showTooltip={true}      \n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav Non Collapsible Vertical Navigation",
      "code": "import { VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'practice',\n      label: 'Practice',\n    },\n    {\n      name: 'users',\n      label: 'Users',\n    },\n    {\n      name: 'copayment',\n      label: 'Copayment',\n    },\n    {\n      name: 'subscription',\n      label: 'Subscription',\n    },\n    {\n      name: 'import_export_settings',\n      label: 'Import/Export Settings',\n    },\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'users'\n  });\n\n  return (\n    <div className=\"bg-secondary-lightest pb-12\">\n      <VerticalNav\n        menus={data}\n        active={active}\n        expanded={true}\n        onClick={setActive}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav Round Edged Vertical Navigation",
      "code": "import { VerticalNav } from '@innovaccer/design-system';\n    () => {\n\n  const primaryNavdata = [\n    {\n      name: 'clinical_data',\n      label: 'Clinical Data',\n      icon: 'assignment_ind'\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'people'\n        },\n        {\n          name: 'care_management.care_protocol',\n          label: 'Care Protocol',\n          icon: 'fact_check'\n        },\n        {\n          name: 'care_management.assessments',\n          label: 'Assessments',\n          icon: 'assessment'\n        },\n        {\n          name: 'care_management.tasks',\n          label: 'Tasks',\n          icon: 'alarm'\n        },\n        {\n          name: 'care_management.goals',\n          label: 'Goals',\n          icon: 'golf_course'\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'accessibility_new'\n        },\n        {\n          name: 'care_management.medical_adherence',\n          label: 'Medical Adherence',\n          icon: 'local_pharmacy'\n        },\n        {\n          name: 'care_management.community_resources',\n          label: 'Community Resources',\n          icon: 'businesses'\n        }\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      icon: 'airline_seat_flat_angled'\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite'\n    },\n    {\n      name: 'preventive_health',\n      label: 'Preventive Health',\n      icon: 'beenhere'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'receipt'\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'account_circle'\n    },\n    {\n      name: 'manual_entry',\n      label: 'Manual Entry',\n      icon: 'edit'\n    },\n    {\n      name: 'patient_notes',\n      label: 'Patient Notes',\n      icon: 'note_add'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    },\n  ];\n\n  const secondaryNavdata = [\n    {\n      name: '11/12/20',\n      label: '11 Dec, 2020',\n    },\n    {\n      name: '17/11/20',\n      label: '17 Nov, 2020',\n    },\n    {\n      name: '07/11/20',\n      label: '7 Nov, 2020',\n    },\n    {\n      name: '09/10/20',\n      label: '9 Oct, 2020',\n    },\n    {\n      name: '23/08/20',\n      label: '23 Aug, 2020',\n    },\n  ];\n\n  const [primaryActive, setPrimaryActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n\n  const [secondaryActive, setSecondaryActive] = React.useState({\n    name: '11/12/20'\n  });\n\n  return (\n    <div className=\"d-flex bg-secondary-lightest vh-100\">\n      <VerticalNav\n        menus={primaryNavdata}\n        active={primaryActive}\n        onClick={setPrimaryActive}\n      />\n      <VerticalNav\n        menus={secondaryNavdata}\n        active={secondaryActive}\n        rounded={true}\n        className=\"mt-10 ml-5\"\n        onClick={setSecondaryActive}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav   Rounded",
      "code": "import { VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360'\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline'\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans'\n        }\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      icon: 'airline_seat_flat_angled'\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline'\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans'\n        }\n      ]\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle'\n    },\n    {\n      name: 'manula_entry',\n      label: 'Manual Entry',\n      icon: 'border_color'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    }\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n  const [expanded, setExpanded] = React.useState(false);\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"bg-secondary-lightest vh-100\">\n      <VerticalNav\n        menus={data}\n        expanded={true}\n        active={active}\n        rounded={true}\n        onClick={onClickHandler}\n      />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "VerticalNav   Section",
      "code": "import { VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n      group: 'Section 1'\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      group: 'Section 2',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      group: 'Section 2',\n      icon: 'airline_seat_flat_angled'\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      group: 'Section 2',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt',\n      group: 'Section 3'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle',\n      group: 'Section 3'\n    },\n    {\n      name: 'manula_entry',\n      label: 'Manual Entry',\n      icon: 'border_color',\n      group: 'Section 3'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment',\n      group: 'Section 3'\n    }\n  ];\n\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return (\n    <div className=\"bg-secondary-lightest vh-100\">\n      <VerticalNav\n        menus={data}\n        expanded={true}\n        active={active}\n        onClick={onClickHandler}\n        hoverable={false}\n      />\n    </div>\n  );\n}\n    "
    }
  ],
  "design tokens": [
    {
      "query": "Others Design Tokens Colors",
      "code": "import { Heading, Card, Table } from '@innovaccer/design-system';\n    () => {\n  React.useEffect(() => {\n    const collection = document.getElementsByClassName('setBgColor');\n    giveBgColor(collection);\n  });\n\n  const colorSchema = getSchema('backgroundColor', '', 'p-4');\n  return (\n    <div>\n      <Heading size=\"xxl\">Design Tokens</Heading>\n      <br />\n      <br />\n      <Heading size=\"m\">Colors</Heading>\n      <br />\n      {tokenColors.map((data, idx) => {\n        const heading =\n          idx !== 4 && idx !== 9\n            ? data[0].token.slice(2)[0].toUpperCase() + data[0].token.slice(3)\n            : idx === 4\n            ? 'Neutral'\n            : 'Others';\n        return (\n          <div className=\"mt-5 mb-5\" key={idx}>\n            <Heading size=\"s\">{heading}</Heading>\n            <br />\n            <Card className=\"h-100 overflow-hidden\">\n              <Table data={data} schema={colorSchema} />\n            </Card>\n            <br />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Others Design Tokens Miscellaneous",
      "code": "import { Heading, Card, Table, Paragraph, Text } from '@innovaccer/design-system';\n    () => {\n  const borderSchema = getSchema('border', 'aA bB cC', 'p-3 w-50');\n  const shadowSchema = getSchema('boxShadow', 'aA bB cC', 'p-7');\n  return (\n    <div>\n      <Heading size=\"xxl\">Design Tokens</Heading>\n      <br />\n      <br />\n      <Heading size=\"m\">Miscellaneous</Heading>\n      <br />\n      <Heading size=\"m\">Border</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={borderData} schema={borderSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Shadow</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={shadowData} schema={shadowSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Grid breakpoints</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={gridBreakpointData} schema={spaceSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Grid Columns</Heading>\n      <Paragraph appearance=\"default\">\n        The <Text weight=\"strong\">--grid-columns</Text> token has a value of\n        <Text weight=\"strong\"> 12 </Text>\n        which defines the maximum number of columns in a row.\n      </Paragraph>\n      <br />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Others Design Tokens Spacing",
      "code": "import { Heading, Card, Table } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <Heading size=\"xxl\">Design Tokens</Heading>\n      <br />\n      <br />\n      <Heading size=\"m\">Spacing</Heading>\n      <br />\n      <Card className=\"h-100\">\n        <Table data={spacingData} schema={spaceSchema} />\n      </Card>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Others Design Tokens Transitions",
      "code": "import { Heading, Card, Table } from '@innovaccer/design-system';\n    () => {\n  return (\n    <div>\n      <Heading size=\"xxl\">Design Tokens</Heading>\n      <br />\n      <br />\n      <Heading size=\"m\">Transitions</Heading>\n      <br />\n      <Heading size=\"m\">Transition curve</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={transitionsCurveData} schema={spaceSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Transition Duration</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={transitionsDurationData} schema={spaceSchema} />\n      </Card>\n      <br />\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Others Design Tokens Typography",
      "code": "import { Heading, Text, Card, Table, Paragraph, Row, Column } from '@innovaccer/design-system';\n    () => {\n  React.useEffect(() => {\n    const collection = document.getElementsByClassName('setBgColor');\n    giveBgColor(collection);\n  });\n\n  const textColorsSchema = getSchema('color', 'aA bB cC');\n  const fontSizeSchema = getSchema('fontSize', 'aA bB cC');\n  const fontWeightSchema = getSchema('fontWeight', 'aA bB cC');\n  const fontHeightSchema = getSchema('lineHeight', 'aA bB cC', '', { backgroundColor: 'var(--secondary-light)' });\n\n  return (\n    <div>\n      <Heading size=\"xxl\">Design Tokens</Heading>\n      <br />\n      <br />\n      <Heading size=\"m\">Typography</Heading>\n      <Text appearance=\"default\" size=\"regular\" weight=\"strong\">\n        The design system has many built in tokens to easily solve most common use cases surrounding text and its\n        formatting.\n      </Text>\n      <br />\n      <br />\n      <Heading size=\"m\">Text Colors</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={textColors} schema={textColorsSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Font Family</Heading>\n      <Paragraph appearance=\"default\">\n        The <Text weight=\"strong\">--font-family</Text> token provides with Nunito sans font family which is used\n        throughout the design system.\n      </Paragraph>\n      <br />\n      <Card className=\"w-25 p-4\">\n        <Row>\n          <Column size=\"6\" sizeS=\"12\" sizeXS=\"12\">\n            <div style={{ fontFamily: 'Times New Roman, Times, serif' }}>Normal Text</div>\n          </Column>\n          <Column size=\"6\" sizeS=\"12\" sizeXS=\"12\">\n            <div style={{ fontFamily: 'var(--font-family)' }}>Nunito Sans</div>\n          </Column>\n        </Row>\n      </Card>\n      <br />\n      <Heading size=\"m\">Font Size</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={fontSize} schema={fontSizeSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Font Weight</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={fontWeight} schema={fontWeightSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Font Height</Heading>\n      <Card className=\"h-100 overflow-hidden\">\n        <Table data={fontHeight} schema={fontHeightSchema} />\n      </Card>\n      <br />\n      <Heading size=\"m\">Letter Spacing</Heading>\n      <Paragraph appearance=\"default\">\n        The <Text weight=\"strong\">--letter-spacing</Text> token provides with <Text weight=\"strong\">0.5px </Text>\n        of spacing between letters.\n      </Paragraph>\n      <br />\n      <Card className=\"w-25 p-4\">\n        <Row>\n          <Column size=\"12\">\n            <div>\n              Text <strong>without</strong> letter spacing\n            </div>\n          </Column>\n          <Column size=\"12\">\n            <div style={{ letterSpacing: 'var(--letter-spacing)' }}>\n              Text <strong>with</strong> letter spacing\n            </div>\n          </Column>\n        </Row>\n      </Card>\n      <br />\n    </div>\n  );\n}\n    "
    }
  ],
  "layout": [
    {
      "query": "Others Layout All",
      "code": "import { Row, Column } from '@innovaccer/design-system';\n    () => {\n  const size = optionsKnob(\n    'size',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const sizeXS = optionsKnob(\n    'sizeXS',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const sizeS = optionsKnob(\n    'sizeS',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const sizeM = optionsKnob(\n    'sizeM',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const sizeL = optionsKnob(\n    'sizeL',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n  const sizeXL = optionsKnob(\n    'sizeXL',\n    {\n      1: '1',\n      2: '2',\n      3: '3',\n      4: '4',\n      5: '5',\n      6: '6',\n      7: '7',\n      8: '8',\n      9: '9',\n      10: '10',\n      11: '11',\n      12: '12',\n    },\n    undefined,\n    {\n      display: 'inline-radio',\n    }\n  );\n\n  const columnOptions = {\n    size,\n    sizeXL,\n    sizeL,\n    sizeM,\n    sizeS,\n    sizeXS,\n  };\n  return (\n    <Row>\n      <Column {...columnOptions}>1</Column>\n      <Column {...columnOptions}>2</Column>\n      <Column {...columnOptions}>3</Column>\n      <Column {...columnOptions}>4</Column>\n      <Column {...columnOptions}>5</Column>\n      <Column {...columnOptions}>6</Column>\n      <Column {...columnOptions}>7</Column>\n      <Column {...columnOptions}>8</Column>\n      <Column {...columnOptions}>9</Column>\n      <Column {...columnOptions}>10</Column>\n      <Column {...columnOptions}>11</Column>\n      <Column {...columnOptions}>12</Column>\n    </Row>\n  );\n}\n    "
    }
  ],
  "styles": [
    {
      "query": "Others Styles Align",
      "code": "import { Heading, Text, Card, Table, Paragraph } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      className: 'align-baseline',\n      properties: 'vertical-align: baseline ;',\n    },\n    {\n      className: 'align-top',\n      properties: 'vertical-align: top ;',\n    },\n    {\n      className: 'align-middle',\n      properties: 'vertical-align: middle ;',\n    },\n    {\n      className: 'align-bottom',\n      properties: 'vertical-align: bottom ;',\n    },\n    {\n      className: 'align-text-bottom',\n      properties: 'vertical-align: text-bottom ;',\n    },\n    {\n      className: 'align-text-top',\n      properties: 'vertical-align: text-top ;',\n    },\n  ];\n  return (\n    <div>\n      <Heading size=\"xxl\">Vertical alignment</Heading>\n      <br />\n      &nbsp;\n      <Text weight=\"strong\">Change the vertical alignment of inline, inline-block, inline-table </Text>\n      &nbsp;\n      <div\n        style={{\n          height: '250px',\n        }}\n        className=\"mt-5 mb-8\"\n      >\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            size={'standard'}\n            headerOptions={{\n              withSearch: true,\n            }}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      &nbsp;\n      <div className=\"pl-10 h-25 Utilities-example w-50\">\n        <span className=\"align-baseline\">baseline </span>\n        <span className=\"align-top\">top </span>\n        <span className=\"align-middle\">middle </span>\n        <span className=\"align-bottom\">bottom </span>\n        <span className=\"align-text-top\">text-top </span>\n        <span className=\"align-text-bottom\">text-bottom </span>\n      </div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock w-50 pl-10\">\n        {'<span className=\"align-baseline\">baseline </span>'}\n        <br />\n        {'<span className=\"align-top\">top </span>'}\n        <br />\n        {'<span className=\"align-middle\">middle </span>'}\n        <br />\n        {'<span className=\"align-bottom\">bottom </span>'}\n        <br />\n        {'<span className=\"align-text-top\">text-top </span>'}\n        <br />\n        {'<span className=\"align-text-bottom\">text-bottom </span>'}\n        <br />\n      </div>\n      &nbsp;\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Others Styles Animation",
      "code": "import { Heading, Text, Row } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      className: 'opacity-0',\n      properties: 'opacity: 0',\n    },\n    {\n      className: 'opacity-1',\n      properties: 'opacity: 1',\n    },\n    {\n      className: 'fade-in',\n      properties: '0 to 100 opacity',\n    },\n    {\n      className: 'fade-out',\n      properties: '100 to 0 opacity',\n    },\n    {\n      className: 'slideOut-left',\n      properties: 'The object is moving 16px left while fading out, using an exit-expressive-curve',\n    },\n    {\n      className: 'slideIn-left',\n      properties: 'The object is moving 16px left while fading in, using an entrance-expressive-curve',\n    },\n    {\n      className: 'slideOut-right',\n      properties: 'The object is moving 16px from left to right while fading out, using an exit-expressive-curve',\n    },\n    {\n      className: 'slideIn-right',\n      properties: 'The object is moving 16px from left to right while fading in, using an entrance-expressive-curve',\n    },\n  ];\n\n  return (\n    <div>\n      <Heading size=\"xxl\">Animation</Heading>\n      <br />\n      <Text weight=\"strong\">Easily set the animation using below classes</Text>\n      <Row className=\"mt-5 mb-8\">\n        {data.map((item, key) => {\n          const { className, properties } = item;\n          return <Container key={key} className={className} property={properties} />;\n        })}\n      </Row>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Others Styles Display",
      "code": "import { Heading, Text, Paragraph, Card, Table } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      className: 'd-none',\n      properties: 'display: none ;',\n    },\n    {\n      className: 'd-inline',\n      properties: 'display: inline ;',\n    },\n    {\n      className: 'd-inline-block',\n      properties: 'display: inline-block ;',\n    },\n    {\n      className: 'd-block',\n      properties: 'display: block ;',\n    },\n    {\n      className: 'd-table',\n      properties: 'display: table ;',\n    },\n    {\n      className: 'd-table-row',\n      properties: 'display: table-row ;',\n    },\n    {\n      className: 'd-table-cell',\n      properties: 'display: table-cell ;',\n    },\n    {\n      className: 'd-flex',\n      properties: 'display: flex ;',\n    },\n    {\n      className: 'd-inline-flex',\n      properties: 'display: inline-flex ;',\n    },\n  ];\n  return (\n    <div>\n      <Heading size=\"xxl\">Display property</Heading>\n      <br />\n      <Text weight=\"strong\">\n        Quickly and responsively toggle the display value of components and more with our display utilities.\n      </Text>\n      &nbsp;\n      <Heading size=\"m\">How it works</Heading>\n      <Paragraph>\n        Change the value of the display property with our responsive display utility classes. We purposely support only\n        a subset of all possible values for display. Classes can be combined for various effects as you need.\n      </Paragraph>\n      &nbsp;\n      <Heading size=\"m\">Notation</Heading>\n      <Paragraph> Value of display is one of:</Paragraph>\n      <div\n        style={{\n          height: '350px',\n        }}\n        className=\"mt-5 mb-8\"\n      >\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size={'standard'}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      <br />\n      <div className=\"d-inline p-2 Utilities-example\">d-inline</div>\n      <div className=\"d-inline p-2 bg-dark Utilities-example Utilities-text--color\">d-inline</div>\n      <br />\n      &nbsp;\n      <div className=\"DocPage-codeBlock pb-5 pt-5 pl-5\">\n        {'<div className=\"d-inline p-2\">d-inline</div>'}\n        <br />\n        {'<div className=\"d-inline p-2\">d-inline</div>'}\n        <br />\n      </div>\n      &nbsp;\n      <span className=\"d-block p-2 Utilities-example\">d-block</span>\n      <span className=\"d-block p-2 bg-dark Utilities-example Utilities-text--color \">d-block</span>\n      &nbsp;\n      <div className=\"DocPage-codeBlock pb-5 pt-5 pl-5\">\n        {'<span className=\"d-block p-2\">d-block</span>'}\n        <br />\n        {'<span className=\"d-block p-2\">d-block</span>'}\n        <br />\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Others Styles Miscellaneous",
      "code": "import { Card, Table } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      className: 'hide-scroll-bar::-webkit-scrollbar',\n      properties: 'height: 0px;\\nbackground: transparent;',\n    },\n    {\n      className: 'hide-scroll-bar',\n      properties: '-ms-overflow-style: none;\\nscrollbar-width: none;',\n    },\n    {\n      className: 'ellipsis',\n      properties: 'overflow: hidden;\\ntext-overflow: ellipsis;',\n    },\n    {\n      className: 'ellipsis--noWrap',\n      properties: 'white-space: nowrap;\\noverflow: hidden;\\ntext-overflow: ellipsis;',\n    },\n    {\n      className: 'cursor-pointer',\n      properties: 'cursor: pointer;',\n    },\n  ];\n  return (\n    <div className=\"mt-8 mb-8\">\n      <Card className=\"h-100\">\n        <Table\n          data={data}\n          schema={utilitiesSchema}\n          headerOptions={{\n            withSearch: true,\n          }}\n          size={'standard'}\n          showMenu={false}\n        />\n      </Card>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Others Styles Overflow",
      "code": "import { Heading, Text, Card, Table, Paragraph } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      className: 'overflow-auto',\n      properties: 'overflow: auto !important;',\n    },\n    {\n      className: 'overflow-hidden',\n      properties: 'overflow: hidden !important;',\n    },\n  ];\n  return (\n    <div>\n      <Heading size=\"xxl\">Overflow</Heading>\n      <br />\n      <Text weight=\"strong\">\n        The CSS overflow property controls what happens to content that is too big to fit into an area.\n      </Text>\n      <div className=\"mb-8 mt-5\">\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size={'standard'}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      &nbsp;\n      <Heading size=\"s\">The auto value adds scrollbars when necessary:</Heading>\n      <br />\n      <div className=\"overflow-auto Utilities-overflow\">\n        You can use the overflow property when you want to have better control of the layout. The overflow property\n        specifies what happens if content overflows an element's box.\n      </div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock\">\n        {'<div className=\"overflow-auto overflow\">'}\n        <br />\n        {\n          'You can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element box.'\n        }\n        <br />\n        {'</div>'}\n      </div>\n      &nbsp;\n      <Heading size=\"s\">With the hidden value, the overflow is clipped, and the rest of the content is hidden</Heading>\n      <br />\n      <div className=\"overflow-hidden Utilities-overflow\">\n        You can use the overflow property when you want to have better control of the layout. The overflow property\n        specifies what happens if content overflows an element's box.\n      </div>\n      &nbsp;\n      <div className=\"DocPage-codeBlock\">\n        {'<div className=\"overflow-hidden overflow\">'}\n        <br />\n        {\n          'You can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an elements box.'\n        }\n        <br />\n        {'</div>'}\n      </div>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Others Styles Position",
      "code": "import { Heading, Text, Card, Table, Paragraph } from '@innovaccer/design-system';\n    () => {\n  const data = [\n    {\n      className: 'position-static',\n      properties: 'position: static ;',\n    },\n    {\n      className: 'position-relative',\n      properties: 'position: relative ;',\n    },\n    {\n      className: 'position-absolute',\n      properties: 'position: absolute ;',\n    },\n    {\n      className: 'position-fixed',\n      properties: 'position: fixed ;',\n    },\n    {\n      className: 'position-sticky',\n      properties: 'position: -webkit-sticky ;\\nposition: sticky ;',\n    },\n  ];\n  return (\n    <div>\n      <Heading size=\"xxl\">Position</Heading>\n      <br />\n      <Text weight=\"strong\">Use these shorthand utilities for quickly configuring the position of an element.</Text>\n      <div className=\"mb-8 mt-5\">\n        <Card className=\"h-100\">\n          <Table\n            data={data}\n            schema={utilitiesSchema}\n            headerOptions={{\n              withSearch: true,\n            }}\n            size={'standard'}\n            showMenu={false}\n          />\n        </Card>\n      </div>\n      <Heading size=\"m\">Examples</Heading>\n      <Paragraph>Here are some representative examples of these classes:</Paragraph>\n      <br />\n      <div className=\"DocPage-codeBlock w-50\">\n        <code>\n          {'<div className=\"position-static\">...</div>'}\n          <br />\n          {'<div className=\"position-relative\">...</div>'}\n          <br />\n          {'<div className=\"position-absolute\">...</div>'}\n          <br />\n          {'<div className=\"position-fixed\">...</div>'}\n          <br />\n          {'<div className=\"position-sticky\">...</div>'}\n          <br />\n        </code>\n      </div>\n    </div>\n  );\n}\n    "
    }
  ],
  "utilities": [
    {
      "query": "Others Utilities OutsideClick All",
      "code": "import { OutsideClick, Card, Heading } from '@innovaccer/design-system';\n    () => {\n  const outsideClickHandler = () => console.log('outside click');\n  const insideClickHandler = () => console.log('inside click');\n\n  return(\n    <OutsideClick className=\"d-inline-block\" onOutsideClick={outsideClickHandler}>\n      <Card\n        className=\"d-flex align-items-center justify-content-center p-10\"\n        onClick={insideClickHandler}\n      >\n        <Heading>Card</Heading>\n      </Card>\n    </OutsideClick>\n  );\n}\n    "
    }
  ],
  "forms": [
    {
      "query": "Basic Form",
      "code": "import { Card, Heading, Label, Input, Icon, Link, Button } from '@innovaccer/design-system';\n    \n\n() => {\n  class BasicForm extends React.Component {\n\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        signInDisabled: true,\n        passwordVisible: false,\n        data: { email: '', password: '' }\n      };\n\n      this.onEmailChange = this.onEmailChange.bind(this);\n      this.onPasswordChange = this.onPasswordChange.bind(this);\n      this.onActionClick = this.onActionClick.bind(this);\n      this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onActionClick() {\n      this.setState({\n        passwordVisible: !this.state.passwordVisible\n      });\n    }\n\n    onEmailChange(event) {\n      const { password = '' } = this.state.data;\n      const email = event.target.value;\n      const disabled = !password || !email;\n\n      this.setState({\n        data: { ...this.state.data, email },\n        signInDisabled: disabled\n      });\n    };\n\n    onPasswordChange(event) {\n      const { email = '' } = this.state.data;\n      const password = event.target.value;\n      const disabled = !password || !email;\n\n      this.setState({\n        data: { ...this.state.data, password },\n        signInDisabled: disabled\n      });\n    }\n\n    onSubmit(e) {\n      e.preventDefault();\n      const { email = '', password = '' } = this.state.data;\n      console.log(`email: ${email}, password: ${password}`);\n      return false;\n    }\n\n    render() {\n      const { password = '' } = this.state.data;\n\n      return (\n        <div style={{ width: '350px' }}>\n          <Card className=\"px-6 py-6\">\n            <form onSubmit={this.onSubmit}>\n              <Heading className=\"mb-7\" size=\"m\">Login</Heading>\n              <Label withInput={true}>Email</Label>\n              <Input\n                name=\"input\"\n                type=\"text\"\n                placeholder=\"Enter email\"\n                className=\"mb-6\"\n                autocomplete={'off'}\n                onChange={this.onEmailChange}\n              />\n              <Label withInput={true}>Password</Label>\n              <Input\n                name=\"input\"\n                className=\"mb-4\"\n                placeholder=\"Enter password\"\n                autocomplete={'off'}\n                type={this.state.passwordVisible ? 'text' : 'password'}\n                value={password}\n                onChange={this.onPasswordChange}\n                actionIcon={(\n                  <Icon\n                    name={this.state.passwordVisible ? 'visibility' : 'visibility_off'}\n                    onClick={this.onActionClick}\n                  />\n                )}\n              />\n              <Link target=\"_blank\" href=\"#\">Forgot Password?</Link>\n              <Button\n                className=\"mt-7\"\n                appearance=\"primary\"\n                expanded={true}\n                disabled={this.state.signInDisabled}\n                type=\"submit\"\n              >\n                Sign In\n              </Button>\n            </form>\n          </Card>\n        </div>\n      );\n    }\n  }\n\n  return <BasicForm />\n}\n    "
    },
    {
      "query": "Time Period Form",
      "code": "import { Card, Heading, Text, Label, Dropdown, Link, DateRangePicker, Slider, Paragraph, Button } from '@innovaccer/design-system';\n    \n\n() => {\n  class TimePeriodForm extends React.Component {\n    constructor(props = {}) {\n      super(props);\n\n      this.state = {\n        time: 8,\n        budget: 60\n      };\n    }\n\n    render() {\n      const options = [];\n      for (let i = 1; i <= 10; i++) {\n        options.push({\n          label: `Option ${i}`,\n          value: `Option ${i}`,\n        });\n      }\n\n      return (\n        <div className=\"w-75\">\n          <Card className=\"px-7 py-6\">\n            <Heading className=\"mb-6\" size=\"s\">Configure Initiative</Heading>\n            <Text weight=\"strong\">Population Filter</Text>\n            <div className=\"d-flex mt-5 mb-4\">\n              <div className=\"mr-6\" style={{ width: 'var(--spacing-8)' }}>\n                <Label withInput={true}>Region</Label>\n                <Dropdown options={options} />\n              </div>\n              <div style={{ width: 'var(--spacing-9)' }}>\n                <Label withInput={true}>Organization</Label>\n                <Dropdown options={options} />\n              </div>\n            </div>\n            <Link target=\"_blank\" href=\"#\">Add organizations</Link>\n            <div className=\"my-6 pt-6\" style={{ borderTop: 'var(--spacing-xs) solid var(--secondary-light)' }}>\n              <Text weight=\"strong\">Time Period</Text>\n              <div className=\"mt-5\">\n                <DateRangePicker withInput />\n              </div>\n              <Slider\n                className=\"mt-6 mb-7\"\n                label=\"Care Manager - Time Allocation\"\n                min={1}\n                max={10}\n                stepSize={1}\n                value={this.state.time}\n                onChange={(value) => this.setState({ time: value })}\n                labelRenderer={(value) => this.state.time === value ? `${value}` : ''}\n              />\n              <Paragraph appearance=\"subtle\">Limit to <b>{this.state.time} hours</b> per day per Care Manager</Paragraph>\n              <Slider\n                className=\"mt-6 mb-7\"\n                label=\"Budget Allocation\"\n                min={10}\n                max={100}\n                stepSize={10}\n                labelStepSize={10}\n                value={this.state.budget}\n                onChange={(value) => this.setState({ budget: value })}\n                labelRenderer={(value) => this.state.budget === value ? `$${value}K` : ''}\n              />\n              <Paragraph appearance=\"subtle\">Allocated Budget: <b>${this.state.budget}K</b> </Paragraph>\n            </div>\n            <div\n              className=\"mt-7 pt-5 d-flex justify-content-end\"\n              style={{ borderTop: 'var(--spacing-xs) solid var(--secondary-light)' }}\n            >\n              <Button appearance=\"basic\" className=\"mr-4\">Cancel</Button>\n              <Button appearance=\"success\">Initiate</Button>\n            </div>\n          </Card>\n        </div>\n      );\n    }\n  }\n\n  return <TimePeriodForm />\n}\n    "
    }
  ],
  "layouts": [
    {
      "query": "Blank Template",
      "code": "import { Row, Column } from '@innovaccer/design-system';\n    () => {\n  return(\n    <Row className=\"d-flex flex-column bg-secondary-lightest vh-100 p-6\">\n      <Column>\n        <div className=\"h-100 bg-light\" />\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Level 1 Header Template",
      "code": "import { Navigation, Button, Breadcrumbs, Badge, PageHeader, Row, Column } from '@innovaccer/design-system';\n    () => {\n  const navigationPosition = 'center';\n  const title = 'Page title';\n  const navigationData = [\n    {\n      name: 'menu_1',\n      label: 'Menu 1',\n      icon: 'event',\n    },\n    {\n      name: 'menu_2',\n      label: 'Menu 2'\n    },\n    {\n      name: 'menu_3',\n      label: 'Menu 3',\n      disabled: true\n    }\n  ];\n  const breadcrumbData = [\n    {\n      label: 'Level 0',\n      link: '/level0'\n    },\n    {\n      label: 'Level 1',\n      link: '/level1'\n    }\n  ];\n\n  const options = {\n    navigationPosition,\n    title,\n    navigation: <Navigation menus={navigationData} onClick={menu => console.log(menu)} active={{ name: 'menu_1' }} />,\n    actions: (\n      <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center' }}>\n        <Button appearance=\"primary\">Primary</Button>\n      </div>\n    ),\n    breadcrumbs: (\n      <Breadcrumbs\n        list={breadcrumbData}\n        onClick={link => console.log(link)}\n      />\n    ),\n    badge: (\n      <Badge appearance=\"secondary\">Badge</Badge>\n    )\n  };\n\n  return(\n    <div className=\"d-flex flex-column bg-secondary-lightest vh-100\">\n      <PageHeader\n        {...options}\n      />\n      <Row className=\"h-100 p-6\">\n        <Column className=\"h-100 bg-light\" />\n      </Row>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Mini sidebar Template",
      "code": "import { Row, Collapsible, VerticalNav, Column, PageHeader, Icon, Heading } from '@innovaccer/design-system';\n    () => {\n  const menus = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      icon: 'airline_seat_flat_angled'\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    }\n  ];\n\n  const [expanded, setExpanded] = React.useState(false);\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return(\n    <Row className=\"vh-100 bg-secondary-lightest\">\n        <Collapsible expanded={expanded} onToggle={setExpanded}>\n          <VerticalNav\n            menus={menus}\n            expanded={expanded}\n            active={active}\n            onClick={onClickHandler}\n            hoverable={false}\n          />\n        </Collapsible>\n      <Column\n        className=\"d-flex flex-column pb-6\"\n      >\n        <PageHeader title=\"Page title\" separator={false} />\n        <Row className=\"px-6 h-100\">\n          <Column className=\"h-100 bg-light\" />\n        </Row>\n      </Column>\n      <Column size={'auto'}>\n        <div className=\"d-flex flex-column py-4\">\n          <Icon name=\"assignment_ind\" className=\"m-4\"/>\n          <Icon name=\"account_circle\" className=\"m-4\"/>\n        </div>\n      </Column>\n      <Column\n        size={3}\n        className=\"d-flex flex-column pb-6\"\n      >\n        <Heading className='px-6 py-4'>Page Title</Heading>\n        <Row className=\"px-6 h-100\">\n          <Column className=\"h-100 bg-light\" />\n        </Row>\n      </Column>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Narrow width content Template",
      "code": "import { Row, Collapsible, VerticalNav, Column, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const menus = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      icon: 'airline_seat_flat_angled'\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    }\n  ];\n\n  const [expanded, setExpanded] = React.useState(false);\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return(\n    <Row className=\"vh-100 bg-secondary-lightest flex-nowrap\">\n      <Collapsible expanded={expanded} onToggle={setExpanded}>\n        <VerticalNav\n          menus={menus}\n          expanded={expanded}\n          active={active}\n          onClick={onClickHandler}\n          hoverable={false}\n        />\n      </Collapsible>\n      <Row className=\"justify-content-center\">\n        <Column size={8} className=\"d-flex flex-column pb-6\">\n          <PageHeader\n            title=\"Page title\"\n            separator={false}\n          />\n          <Row className=\"px-6 h-100\">\n            <Column className=\"h-100 bg-light\" />\n          </Row>\n        </Column>\n      </Row>\n    </Row>\n  );\n}\n    "
    },
    {
      "query": "Resource Table Template",
      "code": "import { PageHeader, Row, Column } from '@innovaccer/design-system';\n    () => {\n  return(\n    <div className=\"d-flex flex-column bg-secondary-lightest vh-100 pb-6\">\n      <PageHeader\n        title=\"Page title\"\n        separator={false}\n      />\n      <Row className=\"px-6 h-100\">\n        <Column className=\"h-100 bg-light\" />\n      </Row>\n    </div>\n  );\n}\n    "
    },
    {
      "query": "Sidebar Template",
      "code": "import { Row, Collapsible, VerticalNav, Column, PageHeader } from '@innovaccer/design-system';\n    () => {\n  const menus = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      icon: 'airline_seat_flat_angled'\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    }\n  ];\n\n  const [expanded, setExpanded] = React.useState(false);\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return(\n    <Row className=\"vh-100 bg-secondary-lightest\">\n      <Collapsible expanded={expanded} onToggle={setExpanded}>\n        <VerticalNav\n          menus={menus}\n          expanded={expanded}\n          active={active}\n          onClick={onClickHandler}\n          hoverable={false}\n        />\n      </Collapsible>\n      <Column className=\"d-flex flex-column pb-6\">\n        <PageHeader\n          title=\"Page title\"\n          separator={false}\n        />\n        <Row className=\"px-6\">\n          <Column className=\"h-100 bg-light\" />\n        </Row>\n      </Column>\n    </Row>\n  );\n}\n    "
    }
  ],
  "verticalnavigation": [
    {
      "query": "Side Nav",
      "code": "import { Collapsible, VerticalNav } from '@innovaccer/design-system';\n    () => {\n  const menus = [\n    {\n      name: 'patient_360',\n      label: 'Patient 360',\n      icon: 'assignment_ind',\n      link: '/patient360',\n    },\n    {\n      name: 'care_management',\n      label: 'Care Management and Resources',\n      icon: 'forum',\n      subMenu: [\n        {\n          name: 'care_management.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'care_management.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'episodes',\n      label: 'Episodes',\n      disabled: true,\n      icon: 'airline_seat_flat_angled'\n    },\n    {\n      name: 'risk',\n      label: 'Risk',\n      icon: 'favorite',\n      subMenu: [\n        {\n          name: 'risk.timeline',\n          label: 'Timeline',\n          icon: 'events'\n        },\n        {\n          name: 'risk.care_plans',\n          label: 'Care Plans',\n          icon: 'events'\n        }\n      ]\n    },\n    {\n      name: 'claims',\n      label: 'Claims',\n      icon: 'receipt'\n    },\n    {\n      name: 'profile',\n      label: 'Profile',\n      icon: 'account_circle'\n    },\n    {\n      name: 'manula_entry',\n      label: 'Manual Entry',\n      icon: 'border_color'\n    },\n    {\n      name: 'documents',\n      label: 'Documents',\n      icon: 'assignment'\n    }\n  ];\n\n  const [expanded, setExpanded] = React.useState(false);\n  const [active, setActive] = React.useState({\n    name: 'care_management.timeline'\n  });\n\n  const onClickHandler = (menu) => {\n    console.log('menu-clicked: ', menu);\n    setActive(menu);\n  };\n\n  return (\n    <div style={{ height: 'calc(80vh)', background: 'var(--secondary-lightest)' }}>\n      <Collapsible expanded={expanded} onToggle={setExpanded}>\n        <VerticalNav\n          menus={menus}\n          expanded={expanded}\n          active={active}\n          onClick={onClickHandler}\n          hoverable={false}\n        />\n      </Collapsible>\n    </div>\n  );\n}\n    "
    }
  ]
}